# frozen_string_literal: true

module Increase
  module Resources
    class OAuthTokens
      # Some parameter documentations has been truncated, see
      # {Increase::Models::OAuthTokenCreateParams} for more details.
      #
      # Create an OAuth Token
      #
      # @overload create(grant_type:, client_id: nil, client_secret: nil, code: nil, production_token: nil, request_options: {})
      #
      # @param grant_type [Symbol, Increase::Models::OAuthTokenCreateParams::GrantType] The credential you request in exchange for the code. In Production, this is alwa
      # ...
      #
      # @param client_id [String] The public identifier for your application.
      #
      # @param client_secret [String] The secret that confirms you own the application. This is redundent given that t
      # ...
      #
      # @param code [String] The authorization code generated by the user and given to you as a query paramet
      # ...
      #
      # @param production_token [String] The production token you want to exchange for a sandbox token. This is only avai
      # ...
      #
      # @param request_options [Increase::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Increase::Models::OAuthToken]
      #
      # @see Increase::Models::OAuthTokenCreateParams
      def create(params)
        parsed, options = Increase::Models::OAuthTokenCreateParams.dump_request(params)
        @client.request(
          method: :post,
          path: "oauth/tokens",
          body: parsed,
          model: Increase::Models::OAuthToken,
          options: options
        )
      end

      # @api private
      #
      # @param client [Increase::Client]
      def initialize(client:)
        @client = client
      end
    end
  end
end
