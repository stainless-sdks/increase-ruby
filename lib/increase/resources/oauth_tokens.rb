# frozen_string_literal: true

module Increase
  module Resources
    class OAuthTokens
      def initialize(client:)
        @client = client
      end

      # Create an OAuth Token
      #
      # @param params [Hash] Attributes to send in this request.
      # @option params [Symbol] :grant_type The credential you request in exchange for the code. In Production, this is
      #   always `authorization_code`. In Sandbox, you can pass either enum value.
      # @option params [String] :client_id The public identifier for your application.
      # @option params [String] :client_secret The secret that confirms you own the application. This is redundent given that
      #   the request is made with your API key but it's a required component of OAuth
      #   2.0.
      # @option params [String] :code The authorization code generated by the user and given to you as a query
      #   parameter.
      # @option params [String] :production_token The production token you want to exchange for a sandbox token. This is only
      #   available in Sandbox. Set `grant_type` to `production_token` to use this
      #   parameter.
      #
      # @param opts [Hash|RequestOptions] Options to specify HTTP behaviour for this request.
      #
      # @return [Increase::Models::OAuthToken]
      def create(params = {}, opts = {})
        request = {}
        request[:method] = :post
        request[:path] = "/oauth/tokens"
        body_params = [:grant_type, :client_id, :client_secret, :code, :production_token]
        request[:body] = params.filter { |k, _| body_params.include?(k) }
        request[:model] = Increase::Models::OAuthToken
        request.merge!(opts)
        @client.request(request)
      end
    end
  end
end
