module Increase
  module Models
    module Simulations
      type inbound_funds_hold_release_response =
        {
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::status,
          type: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::type_
        }

      class InboundFundsHoldReleaseResponse < Increase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor amount: Integer

        attr_accessor automatically_releases_at: Time

        attr_accessor created_at: Time

        attr_accessor currency: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::currency

        attr_accessor held_transaction_id: String?

        attr_accessor pending_transaction_id: String?

        attr_accessor released_at: Time?

        attr_accessor status: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::status

        attr_accessor type: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::type_

        def initialize: (
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::status,
          type: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::type_
        ) -> void

        def to_hash: -> {
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::status,
          type: Increase::Models::Simulations::InboundFundsHoldReleaseResponse::type_
        }

        type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

        module Currency
          extend Increase::Internal::Type::Enum

          # Canadian Dollar (CAD)
          CAD: :CAD

          # Swiss Franc (CHF)
          CHF: :CHF

          # Euro (EUR)
          EUR: :EUR

          # British Pound (GBP)
          GBP: :GBP

          # Japanese Yen (JPY)
          JPY: :JPY

          # US Dollar (USD)
          USD: :USD

          def self?.values: -> ::Array[Increase::Models::Simulations::InboundFundsHoldReleaseResponse::currency]
        end

        type status = :held | :complete

        module Status
          extend Increase::Internal::Type::Enum

          # Funds are still being held.
          HELD: :held

          # Funds have been released.
          COMPLETE: :complete

          def self?.values: -> ::Array[Increase::Models::Simulations::InboundFundsHoldReleaseResponse::status]
        end

        type type_ = :inbound_funds_hold

        module Type
          extend Increase::Internal::Type::Enum

          INBOUND_FUNDS_HOLD: :inbound_funds_hold

          def self?.values: -> ::Array[Increase::Models::Simulations::InboundFundsHoldReleaseResponse::type_]
        end
      end
    end
  end
end
