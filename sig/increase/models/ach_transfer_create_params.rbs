module Increase
  module Models
    type ach_transfer_create_params = ({
      account_id: String,
      amount: Integer,
      statement_descriptor: String,
      "?account_number": String,
      "?addenda": Increase::Models::ACHTransferCreateParams::Addenda,
      "?company_descriptive_date": String,
      "?company_discretionary_data": String,
      "?company_entry_description": String,
      "?company_name": String,
      "?destination_account_holder": Increase::Models::ACHTransferCreateParams::destination_account_holder,
      "?external_account_id": String,
      "?funding": Increase::Models::ACHTransferCreateParams::funding,
      "?individual_id": String,
      "?individual_name": String,
      "?preferred_effective_date": Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate,
      "?require_approval": bool,
      "?routing_number": String,
      "?standard_entry_class_code": Increase::Models::ACHTransferCreateParams::standard_entry_class_code,
      "?transaction_timing": Increase::Models::ACHTransferCreateParams::transaction_timing
    } & Increase::request_parameters)

    class ACHTransferCreateParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor statement_descriptor: String

      attr_reader account_number: String?

      def account_number=: (String) -> String

      attr_reader addenda: Increase::Models::ACHTransferCreateParams::Addenda?

      def addenda=: (Increase::Models::ACHTransferCreateParams::Addenda) -> Increase::Models::ACHTransferCreateParams::Addenda

      attr_reader company_descriptive_date: String?

      def company_descriptive_date=: (String) -> String

      attr_reader company_discretionary_data: String?

      def company_discretionary_data=: (String) -> String

      attr_reader company_entry_description: String?

      def company_entry_description=: (String) -> String

      attr_reader company_name: String?

      def company_name=: (String) -> String

      attr_reader destination_account_holder: Increase::Models::ACHTransferCreateParams::destination_account_holder?

      def destination_account_holder=: (Increase::Models::ACHTransferCreateParams::destination_account_holder) -> Increase::Models::ACHTransferCreateParams::destination_account_holder

      attr_reader external_account_id: String?

      def external_account_id=: (String) -> String

      attr_reader funding: Increase::Models::ACHTransferCreateParams::funding?

      def funding=: (Increase::Models::ACHTransferCreateParams::funding) -> Increase::Models::ACHTransferCreateParams::funding

      attr_reader individual_id: String?

      def individual_id=: (String) -> String

      attr_reader individual_name: String?

      def individual_name=: (String) -> String

      attr_reader preferred_effective_date: Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate?

      def preferred_effective_date=: (Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate) -> Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate

      attr_reader require_approval: bool?

      def require_approval=: (bool) -> bool

      attr_reader routing_number: String?

      def routing_number=: (String) -> String

      attr_reader standard_entry_class_code: Increase::Models::ACHTransferCreateParams::standard_entry_class_code?

      def standard_entry_class_code=: (Increase::Models::ACHTransferCreateParams::standard_entry_class_code) -> Increase::Models::ACHTransferCreateParams::standard_entry_class_code

      attr_reader transaction_timing: Increase::Models::ACHTransferCreateParams::transaction_timing?

      def transaction_timing=: (Increase::Models::ACHTransferCreateParams::transaction_timing) -> Increase::Models::ACHTransferCreateParams::transaction_timing

      def initialize: (account_id: String, amount: Integer, statement_descriptor: String, account_number: String, addenda: Increase::Models::ACHTransferCreateParams::Addenda, company_descriptive_date: String, company_discretionary_data: String, company_entry_description: String, company_name: String, destination_account_holder: Increase::Models::ACHTransferCreateParams::destination_account_holder, external_account_id: String, funding: Increase::Models::ACHTransferCreateParams::funding, individual_id: String, individual_name: String, preferred_effective_date: Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate, require_approval: bool, routing_number: String, standard_entry_class_code: Increase::Models::ACHTransferCreateParams::standard_entry_class_code, transaction_timing: Increase::Models::ACHTransferCreateParams::transaction_timing, request_options: Increase::request_opts) -> void
                    | (?(Increase::Models::ach_transfer_create_params | Increase::BaseModel) data) -> void

      def to_hash: () -> Increase::Models::ach_transfer_create_params

      type addenda = {
        category: Increase::Models::ACHTransferCreateParams::Addenda::category,
        "?freeform": Increase::Models::ACHTransferCreateParams::Addenda::Freeform,
        "?payment_order_remittance_advice": Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice
      }

      class Addenda < Increase::BaseModel
        attr_accessor category: Increase::Models::ACHTransferCreateParams::Addenda::category

        attr_reader freeform: Increase::Models::ACHTransferCreateParams::Addenda::Freeform?

        def freeform=: (Increase::Models::ACHTransferCreateParams::Addenda::Freeform) -> Increase::Models::ACHTransferCreateParams::Addenda::Freeform

        attr_reader payment_order_remittance_advice: Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice?

        def payment_order_remittance_advice=: (Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice) -> Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice

        def initialize: (category: Increase::Models::ACHTransferCreateParams::Addenda::category, freeform: Increase::Models::ACHTransferCreateParams::Addenda::Freeform, payment_order_remittance_advice: Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice) -> void
                      | (?(Increase::Models::ACHTransferCreateParams::addenda | Increase::BaseModel) data) -> void

        def to_hash: () -> Increase::Models::ACHTransferCreateParams::addenda

        type category = (:freeform | :payment_order_remittance_advice)

        class Category < Increase::Enum
          # Unstructured `payment_related_information` passed through with the transfer.
          FREEFORM: :freeform

          # Structured ASC X12 820 remittance advice records. Please reach out to [support@increase.com](mailto:support@increase.com) for more information.
          PAYMENT_ORDER_REMITTANCE_ADVICE: :payment_order_remittance_advice

          def self.values: () -> ::Array[Increase::Models::ACHTransferCreateParams::Addenda::category]
        end

        type freeform = {entries: ::Array[Increase::Models::ACHTransferCreateParams::Addenda::Freeform::Entry]}

        class Freeform < Increase::BaseModel
          attr_accessor entries: ::Array[Increase::Models::ACHTransferCreateParams::Addenda::Freeform::Entry]

          def initialize: (entries: ::Array[Increase::Models::ACHTransferCreateParams::Addenda::Freeform::Entry]) -> void
                        | (?(Increase::Models::ACHTransferCreateParams::Addenda::freeform | Increase::BaseModel) data) -> void

          def to_hash: () -> Increase::Models::ACHTransferCreateParams::Addenda::freeform

          type entry = {payment_related_information: String}

          class Entry < Increase::BaseModel
            attr_accessor payment_related_information: String

            def initialize: (payment_related_information: String) -> void
                          | (?(Increase::Models::ACHTransferCreateParams::Addenda::Freeform::entry | Increase::BaseModel) data) -> void

            def to_hash: () -> Increase::Models::ACHTransferCreateParams::Addenda::Freeform::entry
          end
        end

        type payment_order_remittance_advice = {
          invoices: ::Array[Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice::Invoice]
        }

        class PaymentOrderRemittanceAdvice < Increase::BaseModel
          attr_accessor invoices: ::Array[Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice::Invoice]

          def initialize: (invoices: ::Array[Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice::Invoice]) -> void
                        | (?(Increase::Models::ACHTransferCreateParams::Addenda::payment_order_remittance_advice | Increase::BaseModel) data) -> void

          def to_hash: () -> Increase::Models::ACHTransferCreateParams::Addenda::payment_order_remittance_advice

          type invoice = {invoice_number: String, paid_amount: Integer}

          class Invoice < Increase::BaseModel
            attr_accessor invoice_number: String

            attr_accessor paid_amount: Integer

            def initialize: (invoice_number: String, paid_amount: Integer) -> void
                          | (?(Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice::invoice | Increase::BaseModel) data) -> void

            def to_hash: () -> Increase::Models::ACHTransferCreateParams::Addenda::PaymentOrderRemittanceAdvice::invoice
          end
        end
      end

      type destination_account_holder = (:business | :individual | :unknown)

      class DestinationAccountHolder < Increase::Enum
        # The External Account is owned by a business.
        BUSINESS: :business

        # The External Account is owned by an individual.
        INDIVIDUAL: :individual

        # It's unknown what kind of entity owns the External Account.
        UNKNOWN: :unknown

        def self.values: () -> ::Array[Increase::Models::ACHTransferCreateParams::destination_account_holder]
      end

      type funding = (:checking | :savings)

      class Funding < Increase::Enum
        # A checking account.
        CHECKING: :checking

        # A savings account.
        SAVINGS: :savings

        def self.values: () -> ::Array[Increase::Models::ACHTransferCreateParams::funding]
      end

      type preferred_effective_date = {
        "?date": Date,
        "?settlement_schedule": Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate::settlement_schedule
      }

      class PreferredEffectiveDate < Increase::BaseModel
        attr_reader date: Date?

        def date=: (Date) -> Date

        attr_reader settlement_schedule: Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate::settlement_schedule?

        def settlement_schedule=: (Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate::settlement_schedule) -> Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate::settlement_schedule

        def initialize: (date: Date, settlement_schedule: Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate::settlement_schedule) -> void
                      | (?(Increase::Models::ACHTransferCreateParams::preferred_effective_date | Increase::BaseModel) data) -> void

        def to_hash: () -> Increase::Models::ACHTransferCreateParams::preferred_effective_date

        type settlement_schedule = (:same_day | :future_dated)

        class SettlementSchedule < Increase::Enum
          # The chosen effective date will be the same as the ACH processing date on which the transfer is submitted. This is necessary, but not sufficient for the transfer to be settled same-day: it must also be submitted before the last same-day cutoff and be less than or equal to $1,000.000.00.
          SAME_DAY: :same_day

          # The chosen effective date will be the business day following the ACH processing date on which the transfer is submitted. The transfer will be settled on that future day.
          FUTURE_DATED: :future_dated

          def self.values: () -> ::Array[Increase::Models::ACHTransferCreateParams::PreferredEffectiveDate::settlement_schedule]
        end
      end

      type standard_entry_class_code = (:corporate_credit_or_debit | :corporate_trade_exchange | :prearranged_payments_and_deposit | :internet_initiated)

      class StandardEntryClassCode < Increase::Enum
        # Corporate Credit and Debit (CCD).
        CORPORATE_CREDIT_OR_DEBIT: :corporate_credit_or_debit

        # Corporate Trade Exchange (CTX).
        CORPORATE_TRADE_EXCHANGE: :corporate_trade_exchange

        # Prearranged Payments and Deposits (PPD).
        PREARRANGED_PAYMENTS_AND_DEPOSIT: :prearranged_payments_and_deposit

        # Internet Initiated (WEB).
        INTERNET_INITIATED: :internet_initiated

        def self.values: () -> ::Array[Increase::Models::ACHTransferCreateParams::standard_entry_class_code]
      end

      type transaction_timing = (:synchronous | :asynchronous)

      class TransactionTiming < Increase::Enum
        # A Transaction will be created immediately.
        SYNCHRONOUS: :synchronous

        # A Transaction will be created when the funds settle at the Federal Reserve.
        ASYNCHRONOUS: :asynchronous

        def self.values: () -> ::Array[Increase::Models::ACHTransferCreateParams::transaction_timing]
      end
    end
  end
end
