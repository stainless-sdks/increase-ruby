module Increase
  module Models
    type account_number_create_params =
      {
        account_id: String,
        name: String,
        inbound_ach: Increase::AccountNumberCreateParams::InboundACH,
        inbound_checks: Increase::AccountNumberCreateParams::InboundChecks
      }
      & Increase::Internal::Type::request_parameters

    class AccountNumberCreateParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_accessor account_id: String

      attr_accessor name: String

      attr_reader inbound_ach: Increase::AccountNumberCreateParams::InboundACH?

      def inbound_ach=: (
        Increase::AccountNumberCreateParams::InboundACH
      ) -> Increase::AccountNumberCreateParams::InboundACH

      attr_reader inbound_checks: Increase::AccountNumberCreateParams::InboundChecks?

      def inbound_checks=: (
        Increase::AccountNumberCreateParams::InboundChecks
      ) -> Increase::AccountNumberCreateParams::InboundChecks

      def initialize: (
        account_id: String,
        name: String,
        ?inbound_ach: Increase::AccountNumberCreateParams::InboundACH,
        ?inbound_checks: Increase::AccountNumberCreateParams::InboundChecks,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> ::Hash[Symbol, top]

      type inbound_ach =
        {
          debit_status: Increase::AccountNumberCreateParams::InboundACH::debit_status
        }

      class InboundACH < Increase::Internal::Type::BaseModel
        attr_accessor debit_status: Increase::AccountNumberCreateParams::InboundACH::debit_status

        def initialize: (
          debit_status: Increase::AccountNumberCreateParams::InboundACH::debit_status
        ) -> void

        def to_hash: -> ::Hash[Symbol, top]

        type debit_status = :allowed | :blocked

        module DebitStatus
          extend Increase::Internal::Type::Enum

          # ACH Debits are allowed.
          ALLOWED: :allowed

          # ACH Debits are blocked.
          BLOCKED: :blocked

          def self?.values: -> ::Array[Increase::AccountNumberCreateParams::InboundACH::debit_status]
        end
      end

      type inbound_checks =
        { status: Increase::AccountNumberCreateParams::InboundChecks::status }

      class InboundChecks < Increase::Internal::Type::BaseModel
        attr_accessor status: Increase::AccountNumberCreateParams::InboundChecks::status

        def initialize: (
          status: Increase::AccountNumberCreateParams::InboundChecks::status
        ) -> void

        def to_hash: -> ::Hash[Symbol, top]

        type status = :allowed | :check_transfers_only

        module Status
          extend Increase::Internal::Type::Enum

          # Checks with this Account Number will be processed even if they are not associated with a Check Transfer.
          ALLOWED: :allowed

          # Checks with this Account Number will be processed only if they can be matched to an existing Check Transfer.
          CHECK_TRANSFERS_ONLY: :check_transfers_only

          def self?.values: -> ::Array[Increase::AccountNumberCreateParams::InboundChecks::status]
        end
      end
    end
  end
end
