module Increase
  module Models
    type declined_transaction_list_params =
      {
        account_id: String,
        category: Increase::DeclinedTransactionListParams::Category,
        created_at: Increase::DeclinedTransactionListParams::CreatedAt,
        cursor: String,
        limit: Integer,
        route_id: String
      }
      & Increase::Internal::Type::request_parameters

    class DeclinedTransactionListParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_reader account_id: String?

      def account_id=: (String) -> String

      attr_reader category: Increase::DeclinedTransactionListParams::Category?

      def category=: (
        Increase::DeclinedTransactionListParams::Category
      ) -> Increase::DeclinedTransactionListParams::Category

      attr_reader created_at: Increase::DeclinedTransactionListParams::CreatedAt?

      def created_at=: (
        Increase::DeclinedTransactionListParams::CreatedAt
      ) -> Increase::DeclinedTransactionListParams::CreatedAt

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader route_id: String?

      def route_id=: (String) -> String

      def initialize: (
        ?account_id: String,
        ?category: Increase::DeclinedTransactionListParams::Category,
        ?created_at: Increase::DeclinedTransactionListParams::CreatedAt,
        ?cursor: String,
        ?limit: Integer,
        ?route_id: String,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> ::Hash[Symbol, top]

      type category =
        { in_: ::Array[Increase::DeclinedTransactionListParams::Category::in_] }

      class Category < Increase::Internal::Type::BaseModel
        attr_reader in_: ::Array[Increase::DeclinedTransactionListParams::Category::in_]?

        def in_=: (
          ::Array[Increase::DeclinedTransactionListParams::Category::in_]
        ) -> ::Array[Increase::DeclinedTransactionListParams::Category::in_]

        def initialize: (
          ?in_: ::Array[Increase::DeclinedTransactionListParams::Category::in_]
        ) -> void

        def to_hash: -> ::Hash[Symbol, top]

        type in_ =
          :ach_decline
          | :card_decline
          | :check_decline
          | :inbound_real_time_payments_transfer_decline
          | :wire_decline
          | :check_deposit_rejection
          | :other

        module In
          extend Increase::Internal::Type::Enum

          # ACH Decline: details will be under the `ach_decline` object.
          ACH_DECLINE: :ach_decline

          # Card Decline: details will be under the `card_decline` object.
          CARD_DECLINE: :card_decline

          # Check Decline: details will be under the `check_decline` object.
          CHECK_DECLINE: :check_decline

          # Inbound Real-Time Payments Transfer Decline: details will be under the `inbound_real_time_payments_transfer_decline` object.
          INBOUND_REAL_TIME_PAYMENTS_TRANSFER_DECLINE: :inbound_real_time_payments_transfer_decline

          # Wire Decline: details will be under the `wire_decline` object.
          WIRE_DECLINE: :wire_decline

          # Check Deposit Rejection: details will be under the `check_deposit_rejection` object.
          CHECK_DEPOSIT_REJECTION: :check_deposit_rejection

          # The Declined Transaction was made for an undocumented or deprecated reason.
          OTHER: :other

          def self?.values: -> ::Array[Increase::DeclinedTransactionListParams::Category::in_]
        end
      end

      type created_at =
        { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

      class CreatedAt < Increase::Internal::Type::BaseModel
        attr_reader after: Time?

        def after=: (Time) -> Time

        attr_reader before: Time?

        def before=: (Time) -> Time

        attr_reader on_or_after: Time?

        def on_or_after=: (Time) -> Time

        attr_reader on_or_before: Time?

        def on_or_before=: (Time) -> Time

        def initialize: (
          ?after: Time,
          ?before: Time,
          ?on_or_after: Time,
          ?on_or_before: Time
        ) -> void

        def to_hash: -> ::Hash[Symbol, top]
      end
    end
  end
end
