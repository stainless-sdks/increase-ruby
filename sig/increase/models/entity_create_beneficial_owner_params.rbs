module Increase
  module Models
    type entity_create_beneficial_owner_params =
      {
        beneficial_owner: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner
      }
      & Increase::request_parameters

    class EntityCreateBeneficialOwnerParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_accessor beneficial_owner: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner

      def initialize:
        (
          beneficial_owner: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner,
          ?request_options: Increase::request_opts
        ) -> void
        | (
          ?Increase::Models::entity_create_beneficial_owner_params
          | Increase::BaseModel data
        ) -> void

      def to_hash: -> Increase::Models::entity_create_beneficial_owner_params

      type beneficial_owner =
        {
          individual: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual,
          prongs: ::Array[Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::prong],
          company_title: String
        }

      class BeneficialOwner < Increase::BaseModel
        attr_accessor individual: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual

        attr_accessor prongs: ::Array[Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::prong]

        attr_reader company_title: String?

        def company_title=: (String) -> String

        def initialize:
          (
            individual: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual,
            prongs: ::Array[Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::prong],
            ?company_title: String
          ) -> void
          | (
            ?Increase::Models::EntityCreateBeneficialOwnerParams::beneficial_owner
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateBeneficialOwnerParams::beneficial_owner

        type individual =
          {
            address: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Address,
            date_of_birth: Date,
            identification: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification,
            name: String,
            confirmed_no_us_tax_id: bool
          }

        class Individual < Increase::BaseModel
          attr_accessor address: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Address

          attr_accessor date_of_birth: Date

          attr_accessor identification: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification

          attr_accessor name: String

          attr_reader confirmed_no_us_tax_id: bool?

          def confirmed_no_us_tax_id=: (bool) -> bool

          def initialize:
            (
              address: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Address,
              date_of_birth: Date,
              identification: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification,
              name: String,
              ?confirmed_no_us_tax_id: bool
            ) -> void
            | (
              ?Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::individual
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::individual

          type address =
            {
              city: String,
              :line1 => String,
              state: String,
              zip: String,
              :line2 => String
            }

          class Address < Increase::BaseModel
            attr_accessor city: String

            attr_accessor line1: String

            attr_accessor state: String

            attr_accessor zip: String

            attr_reader line2: String?

            def line2=: (String) -> String

            def initialize:
              (
                city: String,
                line1: String,
                state: String,
                zip: String,
                ?line2: String
              ) -> void
              | (
                ?Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::address
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::address
          end

          type identification =
            {
              method_: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::method_,
              number: String,
              drivers_license: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::DriversLicense,
              other: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Other,
              passport: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Passport
            }

          class Identification < Increase::BaseModel
            attr_accessor method_: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::method_

            attr_accessor number: String

            attr_reader drivers_license: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::DriversLicense?

            def drivers_license=: (
              Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::DriversLicense
            ) -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::DriversLicense

            attr_reader other: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Other?

            def other=: (
              Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Other
            ) -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Other

            attr_reader passport: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Passport?

            def passport=: (
              Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Passport
            ) -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Passport

            def initialize:
              (
                method_: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::method_,
                number: String,
                ?drivers_license: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::DriversLicense,
                ?other: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Other,
                ?passport: Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::Passport
              ) -> void
              | (
                ?Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::identification
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::identification

            type method_ =
              :social_security_number
              | :individual_taxpayer_identification_number
              | :passport
              | :drivers_license
              | :other

            class Method < Increase::Enum
              # A social security number.
              SOCIAL_SECURITY_NUMBER: :social_security_number

              # An individual taxpayer identification number (ITIN).
              INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

              # A passport number.
              PASSPORT: :passport

              # A driver's license number.
              DRIVERS_LICENSE: :drivers_license

              # Another identifying document.
              OTHER: :other

              def self.values: -> ::Array[Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::method_]
            end

            type drivers_license =
              {
                expiration_date: Date,
                file_id: String,
                state: String,
                back_file_id: String
              }

            class DriversLicense < Increase::BaseModel
              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              attr_accessor state: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              def initialize:
                (
                  expiration_date: Date,
                  file_id: String,
                  state: String,
                  ?back_file_id: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::drivers_license
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::drivers_license
            end

            type other =
              {
                country: String,
                description: String,
                file_id: String,
                back_file_id: String,
                expiration_date: Date
              }

            class Other < Increase::BaseModel
              attr_accessor country: String

              attr_accessor description: String

              attr_accessor file_id: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              attr_reader expiration_date: Date?

              def expiration_date=: (Date) -> Date

              def initialize:
                (
                  country: String,
                  description: String,
                  file_id: String,
                  ?back_file_id: String,
                  ?expiration_date: Date
                ) -> void
                | (
                  ?Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::other
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::other
            end

            type passport =
              { country: String, expiration_date: Date, file_id: String }

            class Passport < Increase::BaseModel
              attr_accessor country: String

              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              def initialize:
                (
                  country: String,
                  expiration_date: Date,
                  file_id: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::passport
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::Individual::Identification::passport
            end
          end
        end

        type prong = :ownership | :control

        class Prong < Increase::Enum
          # A person with 25% or greater direct or indirect ownership of the entity.
          OWNERSHIP: :ownership

          # A person who manages, directs, or has significant control of the entity.
          CONTROL: :control

          def self.values: -> ::Array[Increase::Models::EntityCreateBeneficialOwnerParams::BeneficialOwner::prong]
        end
      end
    end
  end
end
