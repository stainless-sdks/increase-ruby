module Increase
  module Models
    type transaction =
      {
        id: String,
        account_id: String,
        amount: Integer,
        created_at: Time,
        currency: Increase::Transaction::currency,
        description: String,
        route_id: String?,
        route_type: Increase::Transaction::route_type?,
        source: Increase::Transaction::Source,
        type: Increase::Transaction::type_
      }

    class Transaction < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor created_at: Time

      attr_accessor currency: Increase::Transaction::currency

      attr_accessor description: String

      attr_accessor route_id: String?

      attr_accessor route_type: Increase::Transaction::route_type?

      attr_accessor source: Increase::Transaction::Source

      attr_accessor type: Increase::Transaction::type_

      def initialize: (
        id: String,
        account_id: String,
        amount: Integer,
        created_at: Time,
        currency: Increase::Transaction::currency,
        description: String,
        route_id: String?,
        route_type: Increase::Transaction::route_type?,
        source: Increase::Transaction::Source,
        type: Increase::Transaction::type_
      ) -> void

      def to_hash: -> ::Hash[Symbol, top]

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: -> ::Array[Increase::Transaction::currency]
      end

      type route_type = :account_number | :card | :lockbox

      module RouteType
        extend Increase::Internal::Type::Enum

        # An Account Number.
        ACCOUNT_NUMBER: :account_number

        # A Card.
        CARD: :card

        # A Lockbox.
        LOCKBOX: :lockbox

        def self?.values: -> ::Array[Increase::Transaction::route_type]
      end

      type source =
        {
          account_transfer_intention: Increase::Transaction::Source::AccountTransferIntention?,
          ach_transfer_intention: Increase::Transaction::Source::ACHTransferIntention?,
          ach_transfer_rejection: Increase::Transaction::Source::ACHTransferRejection?,
          ach_transfer_return: Increase::Transaction::Source::ACHTransferReturn?,
          card_dispute_acceptance: Increase::Transaction::Source::CardDisputeAcceptance?,
          card_dispute_loss: Increase::Transaction::Source::CardDisputeLoss?,
          card_refund: Increase::Transaction::Source::CardRefund?,
          card_revenue_payment: Increase::Transaction::Source::CardRevenuePayment?,
          card_settlement: Increase::Transaction::Source::CardSettlement?,
          cashback_payment: Increase::Transaction::Source::CashbackPayment?,
          category: Increase::Transaction::Source::category,
          check_deposit_acceptance: Increase::Transaction::Source::CheckDepositAcceptance?,
          check_deposit_return: Increase::Transaction::Source::CheckDepositReturn?,
          check_transfer_deposit: Increase::Transaction::Source::CheckTransferDeposit?,
          fee_payment: Increase::Transaction::Source::FeePayment?,
          inbound_ach_transfer: Increase::Transaction::Source::InboundACHTransfer?,
          inbound_ach_transfer_return_intention: Increase::Transaction::Source::InboundACHTransferReturnIntention?,
          inbound_check_adjustment: Increase::Transaction::Source::InboundCheckAdjustment?,
          inbound_check_deposit_return_intention: Increase::Transaction::Source::InboundCheckDepositReturnIntention?,
          inbound_real_time_payments_transfer_confirmation: Increase::Transaction::Source::InboundRealTimePaymentsTransferConfirmation?,
          inbound_real_time_payments_transfer_decline: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline?,
          inbound_wire_reversal: Increase::Transaction::Source::InboundWireReversal?,
          inbound_wire_transfer: Increase::Transaction::Source::InboundWireTransfer?,
          inbound_wire_transfer_reversal: Increase::Transaction::Source::InboundWireTransferReversal?,
          interest_payment: Increase::Transaction::Source::InterestPayment?,
          internal_source: Increase::Transaction::Source::InternalSource?,
          other: top?,
          real_time_payments_transfer_acknowledgement: Increase::Transaction::Source::RealTimePaymentsTransferAcknowledgement?,
          sample_funds: Increase::Transaction::Source::SampleFunds?,
          swift_transfer_intention: Increase::Transaction::Source::SwiftTransferIntention?,
          wire_transfer_intention: Increase::Transaction::Source::WireTransferIntention?
        }

      class Source < Increase::Internal::Type::BaseModel
        attr_accessor account_transfer_intention: Increase::Transaction::Source::AccountTransferIntention?

        attr_accessor ach_transfer_intention: Increase::Transaction::Source::ACHTransferIntention?

        attr_accessor ach_transfer_rejection: Increase::Transaction::Source::ACHTransferRejection?

        attr_accessor ach_transfer_return: Increase::Transaction::Source::ACHTransferReturn?

        attr_accessor card_dispute_acceptance: Increase::Transaction::Source::CardDisputeAcceptance?

        attr_accessor card_dispute_loss: Increase::Transaction::Source::CardDisputeLoss?

        attr_accessor card_refund: Increase::Transaction::Source::CardRefund?

        attr_accessor card_revenue_payment: Increase::Transaction::Source::CardRevenuePayment?

        attr_accessor card_settlement: Increase::Transaction::Source::CardSettlement?

        attr_accessor cashback_payment: Increase::Transaction::Source::CashbackPayment?

        attr_accessor category: Increase::Transaction::Source::category

        attr_accessor check_deposit_acceptance: Increase::Transaction::Source::CheckDepositAcceptance?

        attr_accessor check_deposit_return: Increase::Transaction::Source::CheckDepositReturn?

        attr_accessor check_transfer_deposit: Increase::Transaction::Source::CheckTransferDeposit?

        attr_accessor fee_payment: Increase::Transaction::Source::FeePayment?

        attr_accessor inbound_ach_transfer: Increase::Transaction::Source::InboundACHTransfer?

        attr_accessor inbound_ach_transfer_return_intention: Increase::Transaction::Source::InboundACHTransferReturnIntention?

        attr_accessor inbound_check_adjustment: Increase::Transaction::Source::InboundCheckAdjustment?

        attr_accessor inbound_check_deposit_return_intention: Increase::Transaction::Source::InboundCheckDepositReturnIntention?

        attr_accessor inbound_real_time_payments_transfer_confirmation: Increase::Transaction::Source::InboundRealTimePaymentsTransferConfirmation?

        attr_accessor inbound_real_time_payments_transfer_decline: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline?

        attr_accessor inbound_wire_reversal: Increase::Transaction::Source::InboundWireReversal?

        attr_accessor inbound_wire_transfer: Increase::Transaction::Source::InboundWireTransfer?

        attr_accessor inbound_wire_transfer_reversal: Increase::Transaction::Source::InboundWireTransferReversal?

        attr_accessor interest_payment: Increase::Transaction::Source::InterestPayment?

        attr_accessor internal_source: Increase::Transaction::Source::InternalSource?

        attr_accessor other: top?

        attr_accessor real_time_payments_transfer_acknowledgement: Increase::Transaction::Source::RealTimePaymentsTransferAcknowledgement?

        attr_accessor sample_funds: Increase::Transaction::Source::SampleFunds?

        attr_accessor swift_transfer_intention: Increase::Transaction::Source::SwiftTransferIntention?

        attr_accessor wire_transfer_intention: Increase::Transaction::Source::WireTransferIntention?

        def initialize: (
          account_transfer_intention: Increase::Transaction::Source::AccountTransferIntention?,
          ach_transfer_intention: Increase::Transaction::Source::ACHTransferIntention?,
          ach_transfer_rejection: Increase::Transaction::Source::ACHTransferRejection?,
          ach_transfer_return: Increase::Transaction::Source::ACHTransferReturn?,
          card_dispute_acceptance: Increase::Transaction::Source::CardDisputeAcceptance?,
          card_dispute_loss: Increase::Transaction::Source::CardDisputeLoss?,
          card_refund: Increase::Transaction::Source::CardRefund?,
          card_revenue_payment: Increase::Transaction::Source::CardRevenuePayment?,
          card_settlement: Increase::Transaction::Source::CardSettlement?,
          cashback_payment: Increase::Transaction::Source::CashbackPayment?,
          category: Increase::Transaction::Source::category,
          check_deposit_acceptance: Increase::Transaction::Source::CheckDepositAcceptance?,
          check_deposit_return: Increase::Transaction::Source::CheckDepositReturn?,
          check_transfer_deposit: Increase::Transaction::Source::CheckTransferDeposit?,
          fee_payment: Increase::Transaction::Source::FeePayment?,
          inbound_ach_transfer: Increase::Transaction::Source::InboundACHTransfer?,
          inbound_ach_transfer_return_intention: Increase::Transaction::Source::InboundACHTransferReturnIntention?,
          inbound_check_adjustment: Increase::Transaction::Source::InboundCheckAdjustment?,
          inbound_check_deposit_return_intention: Increase::Transaction::Source::InboundCheckDepositReturnIntention?,
          inbound_real_time_payments_transfer_confirmation: Increase::Transaction::Source::InboundRealTimePaymentsTransferConfirmation?,
          inbound_real_time_payments_transfer_decline: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline?,
          inbound_wire_reversal: Increase::Transaction::Source::InboundWireReversal?,
          inbound_wire_transfer: Increase::Transaction::Source::InboundWireTransfer?,
          inbound_wire_transfer_reversal: Increase::Transaction::Source::InboundWireTransferReversal?,
          interest_payment: Increase::Transaction::Source::InterestPayment?,
          internal_source: Increase::Transaction::Source::InternalSource?,
          other: top?,
          real_time_payments_transfer_acknowledgement: Increase::Transaction::Source::RealTimePaymentsTransferAcknowledgement?,
          sample_funds: Increase::Transaction::Source::SampleFunds?,
          swift_transfer_intention: Increase::Transaction::Source::SwiftTransferIntention?,
          wire_transfer_intention: Increase::Transaction::Source::WireTransferIntention?
        ) -> void

        def to_hash: -> ::Hash[Symbol, top]

        type account_transfer_intention =
          {
            amount: Integer,
            currency: Increase::Transaction::Source::AccountTransferIntention::currency,
            description: String,
            destination_account_id: String,
            source_account_id: String,
            transfer_id: String
          }

        class AccountTransferIntention < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor currency: Increase::Transaction::Source::AccountTransferIntention::currency

          attr_accessor description: String

          attr_accessor destination_account_id: String

          attr_accessor source_account_id: String

          attr_accessor transfer_id: String

          def initialize: (
            amount: Integer,
            currency: Increase::Transaction::Source::AccountTransferIntention::currency,
            description: String,
            destination_account_id: String,
            source_account_id: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::AccountTransferIntention::currency]
          end
        end

        type ach_transfer_intention =
          {
            account_number: String,
            amount: Integer,
            routing_number: String,
            statement_descriptor: String,
            transfer_id: String
          }

        class ACHTransferIntention < Increase::Internal::Type::BaseModel
          attr_accessor account_number: String

          attr_accessor amount: Integer

          attr_accessor routing_number: String

          attr_accessor statement_descriptor: String

          attr_accessor transfer_id: String

          def initialize: (
            account_number: String,
            amount: Integer,
            routing_number: String,
            statement_descriptor: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type ach_transfer_rejection = { transfer_id: String }

        class ACHTransferRejection < Increase::Internal::Type::BaseModel
          attr_accessor transfer_id: String

          def initialize: (transfer_id: String) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type ach_transfer_return =
          {
            created_at: Time,
            raw_return_reason_code: String,
            return_reason_code: Increase::Transaction::Source::ACHTransferReturn::return_reason_code,
            trace_number: String,
            transaction_id: String,
            transfer_id: String
          }

        class ACHTransferReturn < Increase::Internal::Type::BaseModel
          attr_accessor created_at: Time

          attr_accessor raw_return_reason_code: String

          attr_accessor return_reason_code: Increase::Transaction::Source::ACHTransferReturn::return_reason_code

          attr_accessor trace_number: String

          attr_accessor transaction_id: String

          attr_accessor transfer_id: String

          def initialize: (
            created_at: Time,
            raw_return_reason_code: String,
            return_reason_code: Increase::Transaction::Source::ACHTransferReturn::return_reason_code,
            trace_number: String,
            transaction_id: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type return_reason_code =
            :insufficient_fund
            | :no_account
            | :account_closed
            | :invalid_account_number_structure
            | :account_frozen_entry_returned_per_ofac_instruction
            | :credit_entry_refused_by_receiver
            | :unauthorized_debit_to_consumer_account_using_corporate_sec_code
            | :corporate_customer_advised_not_authorized
            | :payment_stopped
            | :non_transaction_account
            | :uncollected_funds
            | :routing_number_check_digit_error
            | :customer_advised_unauthorized_improper_ineligible_or_incomplete
            | :amount_field_error
            | :authorization_revoked_by_customer
            | :invalid_ach_routing_number
            | :file_record_edit_criteria
            | :enr_invalid_individual_name
            | :returned_per_odfi_request
            | :limited_participation_dfi
            | :incorrectly_coded_outbound_international_payment
            | :account_sold_to_another_dfi
            | :addenda_error
            | :beneficiary_or_account_holder_deceased
            | :customer_advised_not_within_authorization_terms
            | :corrected_return
            | :duplicate_entry
            | :duplicate_return
            | :enr_duplicate_enrollment
            | :enr_invalid_dfi_account_number
            | :enr_invalid_individual_id_number
            | :enr_invalid_representative_payee_indicator
            | :enr_invalid_transaction_code
            | :enr_return_of_enr_entry
            | :enr_routing_number_check_digit_error
            | :entry_not_processed_by_gateway
            | :field_error
            | :foreign_receiving_dfi_unable_to_settle
            | :iat_entry_coding_error
            | :improper_effective_entry_date
            | :improper_source_document_source_document_presented
            | :invalid_company_id
            | :invalid_foreign_receiving_dfi_identification
            | :invalid_individual_id_number
            | :item_and_rck_entry_presented_for_payment
            | :item_related_to_rck_entry_is_ineligible
            | :mandatory_field_error
            | :misrouted_dishonored_return
            | :misrouted_return
            | :no_errors_found
            | :non_acceptance_of_r62_dishonored_return
            | :non_participant_in_iat_program
            | :permissible_return_entry
            | :permissible_return_entry_not_accepted
            | :rdfi_non_settlement
            | :rdfi_participant_in_check_truncation_program
            | :representative_payee_deceased_or_unable_to_continue_in_that_capacity
            | :return_not_a_duplicate
            | :return_of_erroneous_or_reversing_debit
            | :return_of_improper_credit_entry
            | :return_of_improper_debit_entry
            | :return_of_xck_entry
            | :source_document_presented_for_payment
            | :state_law_affecting_rck_acceptance
            | :stop_payment_on_item_related_to_rck_entry
            | :stop_payment_on_source_document
            | :timely_original_return
            | :trace_number_error
            | :untimely_dishonored_return
            | :untimely_return

          module ReturnReasonCode
            extend Increase::Internal::Type::Enum

            # Code R01. Insufficient funds in the receiving account. Sometimes abbreviated to NSF.
            INSUFFICIENT_FUND: :insufficient_fund

            # Code R03. The account does not exist or the receiving bank was unable to locate it.
            NO_ACCOUNT: :no_account

            # Code R02. The account is closed at the receiving bank.
            ACCOUNT_CLOSED: :account_closed

            # Code R04. The account number is invalid at the receiving bank.
            INVALID_ACCOUNT_NUMBER_STRUCTURE: :invalid_account_number_structure

            # Code R16. The account at the receiving bank was frozen per the Office of Foreign Assets Control.
            ACCOUNT_FROZEN_ENTRY_RETURNED_PER_OFAC_INSTRUCTION: :account_frozen_entry_returned_per_ofac_instruction

            # Code R23. The receiving bank account refused a credit transfer.
            CREDIT_ENTRY_REFUSED_BY_RECEIVER: :credit_entry_refused_by_receiver

            # Code R05. The receiving bank rejected because of an incorrect Standard Entry Class code.
            UNAUTHORIZED_DEBIT_TO_CONSUMER_ACCOUNT_USING_CORPORATE_SEC_CODE: :unauthorized_debit_to_consumer_account_using_corporate_sec_code

            # Code R29. The corporate customer at the receiving bank reversed the transfer.
            CORPORATE_CUSTOMER_ADVISED_NOT_AUTHORIZED: :corporate_customer_advised_not_authorized

            # Code R08. The receiving bank stopped payment on this transfer.
            PAYMENT_STOPPED: :payment_stopped

            # Code R20. The receiving bank account does not perform transfers.
            NON_TRANSACTION_ACCOUNT: :non_transaction_account

            # Code R09. The receiving bank account does not have enough available balance for the transfer.
            UNCOLLECTED_FUNDS: :uncollected_funds

            # Code R28. The routing number is incorrect.
            ROUTING_NUMBER_CHECK_DIGIT_ERROR: :routing_number_check_digit_error

            # Code R10. The customer at the receiving bank reversed the transfer.
            CUSTOMER_ADVISED_UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE: :customer_advised_unauthorized_improper_ineligible_or_incomplete

            # Code R19. The amount field is incorrect or too large.
            AMOUNT_FIELD_ERROR: :amount_field_error

            # Code R07. The customer at the receiving institution informed their bank that they have revoked authorization for a previously authorized transfer.
            AUTHORIZATION_REVOKED_BY_CUSTOMER: :authorization_revoked_by_customer

            # Code R13. The routing number is invalid.
            INVALID_ACH_ROUTING_NUMBER: :invalid_ach_routing_number

            # Code R17. The receiving bank is unable to process a field in the transfer.
            FILE_RECORD_EDIT_CRITERIA: :file_record_edit_criteria

            # Code R45. The individual name field was invalid.
            ENR_INVALID_INDIVIDUAL_NAME: :enr_invalid_individual_name

            # Code R06. The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.
            RETURNED_PER_ODFI_REQUEST: :returned_per_odfi_request

            # Code R34. The receiving bank's regulatory supervisor has limited their participation in the ACH network.
            LIMITED_PARTICIPATION_DFI: :limited_participation_dfi

            # Code R85. The outbound international ACH transfer was incorrect.
            INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT: :incorrectly_coded_outbound_international_payment

            # Code R12. A rare return reason. The account was sold to another bank.
            ACCOUNT_SOLD_TO_ANOTHER_DFI: :account_sold_to_another_dfi

            # Code R25. The addenda record is incorrect or missing.
            ADDENDA_ERROR: :addenda_error

            # Code R15. A rare return reason. The account holder is deceased.
            BENEFICIARY_OR_ACCOUNT_HOLDER_DECEASED: :beneficiary_or_account_holder_deceased

            # Code R11. A rare return reason. The customer authorized some payment to the sender, but this payment was not in error.
            CUSTOMER_ADVISED_NOT_WITHIN_AUTHORIZATION_TERMS: :customer_advised_not_within_authorization_terms

            # Code R74. A rare return reason. Sent in response to a return that was returned with code `field_error`. The latest return should include the corrected field(s).
            CORRECTED_RETURN: :corrected_return

            # Code R24. A rare return reason. The receiving bank received an exact duplicate entry with the same trace number and amount.
            DUPLICATE_ENTRY: :duplicate_entry

            # Code R67. A rare return reason. The return this message refers to was a duplicate.
            DUPLICATE_RETURN: :duplicate_return

            # Code R47. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
            ENR_DUPLICATE_ENROLLMENT: :enr_duplicate_enrollment

            # Code R43. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
            ENR_INVALID_DFI_ACCOUNT_NUMBER: :enr_invalid_dfi_account_number

            # Code R44. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
            ENR_INVALID_INDIVIDUAL_ID_NUMBER: :enr_invalid_individual_id_number

            # Code R46. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
            ENR_INVALID_REPRESENTATIVE_PAYEE_INDICATOR: :enr_invalid_representative_payee_indicator

            # Code R41. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
            ENR_INVALID_TRANSACTION_CODE: :enr_invalid_transaction_code

            # Code R40. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
            ENR_RETURN_OF_ENR_ENTRY: :enr_return_of_enr_entry

            # Code R42. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
            ENR_ROUTING_NUMBER_CHECK_DIGIT_ERROR: :enr_routing_number_check_digit_error

            # Code R84. A rare return reason. The International ACH Transfer cannot be processed by the gateway.
            ENTRY_NOT_PROCESSED_BY_GATEWAY: :entry_not_processed_by_gateway

            # Code R69. A rare return reason. One or more of the fields in the ACH were malformed.
            FIELD_ERROR: :field_error

            # Code R83. A rare return reason. The Foreign receiving bank was unable to settle this ACH transfer.
            FOREIGN_RECEIVING_DFI_UNABLE_TO_SETTLE: :foreign_receiving_dfi_unable_to_settle

            # Code R80. A rare return reason. The International ACH Transfer is malformed.
            IAT_ENTRY_CODING_ERROR: :iat_entry_coding_error

            # Code R18. A rare return reason. The ACH has an improper effective entry date field.
            IMPROPER_EFFECTIVE_ENTRY_DATE: :improper_effective_entry_date

            # Code R39. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.
            IMPROPER_SOURCE_DOCUMENT_SOURCE_DOCUMENT_PRESENTED: :improper_source_document_source_document_presented

            # Code R21. A rare return reason. The Company ID field of the ACH was invalid.
            INVALID_COMPANY_ID: :invalid_company_id

            # Code R82. A rare return reason. The foreign receiving bank identifier for an International ACH Transfer was invalid.
            INVALID_FOREIGN_RECEIVING_DFI_IDENTIFICATION: :invalid_foreign_receiving_dfi_identification

            # Code R22. A rare return reason. The Individual ID number field of the ACH was invalid.
            INVALID_INDIVIDUAL_ID_NUMBER: :invalid_individual_id_number

            # Code R53. A rare return reason. Both the Represented Check ("RCK") entry and the original check were presented to the bank.
            ITEM_AND_RCK_ENTRY_PRESENTED_FOR_PAYMENT: :item_and_rck_entry_presented_for_payment

            # Code R51. A rare return reason. The Represented Check ("RCK") entry is ineligible.
            ITEM_RELATED_TO_RCK_ENTRY_IS_INELIGIBLE: :item_related_to_rck_entry_is_ineligible

            # Code R26. A rare return reason. The ACH is missing a required field.
            MANDATORY_FIELD_ERROR: :mandatory_field_error

            # Code R71. A rare return reason. The receiving bank does not recognize the routing number in a dishonored return entry.
            MISROUTED_DISHONORED_RETURN: :misrouted_dishonored_return

            # Code R61. A rare return reason. The receiving bank does not recognize the routing number in a return entry.
            MISROUTED_RETURN: :misrouted_return

            # Code R76. A rare return reason. Sent in response to a return, the bank does not find the errors alleged by the returning bank.
            NO_ERRORS_FOUND: :no_errors_found

            # Code R77. A rare return reason. The receiving bank does not accept the return of the erroneous debit. The funds are not available at the receiving bank.
            NON_ACCEPTANCE_OF_R62_DISHONORED_RETURN: :non_acceptance_of_r62_dishonored_return

            # Code R81. A rare return reason. The receiving bank does not accept International ACH Transfers.
            NON_PARTICIPANT_IN_IAT_PROGRAM: :non_participant_in_iat_program

            # Code R31. A rare return reason. A return that has been agreed to be accepted by the receiving bank, despite falling outside of the usual return timeframe.
            PERMISSIBLE_RETURN_ENTRY: :permissible_return_entry

            # Code R70. A rare return reason. The receiving bank had not approved this return.
            PERMISSIBLE_RETURN_ENTRY_NOT_ACCEPTED: :permissible_return_entry_not_accepted

            # Code R32. A rare return reason. The receiving bank could not settle this transaction.
            RDFI_NON_SETTLEMENT: :rdfi_non_settlement

            # Code R30. A rare return reason. The receiving bank does not accept Check Truncation ACH transfers.
            RDFI_PARTICIPANT_IN_CHECK_TRUNCATION_PROGRAM: :rdfi_participant_in_check_truncation_program

            # Code R14. A rare return reason. The payee is deceased.
            REPRESENTATIVE_PAYEE_DECEASED_OR_UNABLE_TO_CONTINUE_IN_THAT_CAPACITY: :representative_payee_deceased_or_unable_to_continue_in_that_capacity

            # Code R75. A rare return reason. The originating bank disputes that an earlier `duplicate_entry` return was actually a duplicate.
            RETURN_NOT_A_DUPLICATE: :return_not_a_duplicate

            # Code R62. A rare return reason. The originating financial institution made a mistake and this return corrects it.
            RETURN_OF_ERRONEOUS_OR_REVERSING_DEBIT: :return_of_erroneous_or_reversing_debit

            # Code R36. A rare return reason. Return of a malformed credit entry.
            RETURN_OF_IMPROPER_CREDIT_ENTRY: :return_of_improper_credit_entry

            # Code R35. A rare return reason. Return of a malformed debit entry.
            RETURN_OF_IMPROPER_DEBIT_ENTRY: :return_of_improper_debit_entry

            # Code R33. A rare return reason. Return of a Destroyed Check ("XKC") entry.
            RETURN_OF_XCK_ENTRY: :return_of_xck_entry

            # Code R37. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.
            SOURCE_DOCUMENT_PRESENTED_FOR_PAYMENT: :source_document_presented_for_payment

            # Code R50. A rare return reason. State law prevents the bank from accepting the Represented Check ("RCK") entry.
            STATE_LAW_AFFECTING_RCK_ACCEPTANCE: :state_law_affecting_rck_acceptance

            # Code R52. A rare return reason. A stop payment was issued on a Represented Check ("RCK") entry.
            STOP_PAYMENT_ON_ITEM_RELATED_TO_RCK_ENTRY: :stop_payment_on_item_related_to_rck_entry

            # Code R38. A rare return reason. The source attached to the ACH, usually an ACH check conversion, includes a stop payment.
            STOP_PAYMENT_ON_SOURCE_DOCUMENT: :stop_payment_on_source_document

            # Code R73. A rare return reason. The bank receiving an `untimely_return` believes it was on time.
            TIMELY_ORIGINAL_RETURN: :timely_original_return

            # Code R27. A rare return reason. An ACH return's trace number does not match an originated ACH.
            TRACE_NUMBER_ERROR: :trace_number_error

            # Code R72. A rare return reason. The dishonored return was sent too late.
            UNTIMELY_DISHONORED_RETURN: :untimely_dishonored_return

            # Code R68. A rare return reason. The return was sent too late.
            UNTIMELY_RETURN: :untimely_return

            def self?.values: -> ::Array[Increase::Transaction::Source::ACHTransferReturn::return_reason_code]
          end
        end

        type card_dispute_acceptance =
          { accepted_at: Time, card_dispute_id: String, transaction_id: String }

        class CardDisputeAcceptance < Increase::Internal::Type::BaseModel
          attr_accessor accepted_at: Time

          attr_accessor card_dispute_id: String

          attr_accessor transaction_id: String

          def initialize: (
            accepted_at: Time,
            card_dispute_id: String,
            transaction_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type card_dispute_loss =
          {
            card_dispute_id: String,
            explanation: String,
            lost_at: Time,
            transaction_id: String
          }

        class CardDisputeLoss < Increase::Internal::Type::BaseModel
          attr_accessor card_dispute_id: String

          attr_accessor explanation: String

          attr_accessor lost_at: Time

          attr_accessor transaction_id: String

          def initialize: (
            card_dispute_id: String,
            explanation: String,
            lost_at: Time,
            transaction_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type card_refund =
          {
            id: String,
            amount: Integer,
            card_payment_id: String,
            cashback: Increase::Transaction::Source::CardRefund::Cashback?,
            currency: Increase::Transaction::Source::CardRefund::currency,
            interchange: Increase::Transaction::Source::CardRefund::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::Transaction::Source::CardRefund::NetworkIdentifiers,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::Transaction::Source::CardRefund::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Transaction::Source::CardRefund::type_
          }

        class CardRefund < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount: Integer

          attr_accessor card_payment_id: String

          attr_accessor cashback: Increase::Transaction::Source::CardRefund::Cashback?

          attr_accessor currency: Increase::Transaction::Source::CardRefund::currency

          attr_accessor interchange: Increase::Transaction::Source::CardRefund::Interchange?

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String

          attr_accessor merchant_country: String

          attr_accessor merchant_name: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_identifiers: Increase::Transaction::Source::CardRefund::NetworkIdentifiers

          attr_accessor presentment_amount: Integer

          attr_accessor presentment_currency: String

          attr_accessor purchase_details: Increase::Transaction::Source::CardRefund::PurchaseDetails?

          attr_accessor transaction_id: String

          attr_accessor type: Increase::Transaction::Source::CardRefund::type_

          def initialize: (
            id: String,
            amount: Integer,
            card_payment_id: String,
            cashback: Increase::Transaction::Source::CardRefund::Cashback?,
            currency: Increase::Transaction::Source::CardRefund::currency,
            interchange: Increase::Transaction::Source::CardRefund::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::Transaction::Source::CardRefund::NetworkIdentifiers,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::Transaction::Source::CardRefund::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Transaction::Source::CardRefund::type_
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type cashback =
            {
              amount: String,
              currency: Increase::Transaction::Source::CardRefund::Cashback::currency
            }

          class Cashback < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor currency: Increase::Transaction::Source::CardRefund::Cashback::currency

            def initialize: (
              amount: String,
              currency: Increase::Transaction::Source::CardRefund::Cashback::currency
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::Cashback::currency]
            end
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::currency]
          end

          type interchange =
            {
              amount: String,
              code: String?,
              currency: Increase::Transaction::Source::CardRefund::Interchange::currency
            }

          class Interchange < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor code: String?

            attr_accessor currency: Increase::Transaction::Source::CardRefund::Interchange::currency

            def initialize: (
              amount: String,
              code: String?,
              currency: Increase::Transaction::Source::CardRefund::Interchange::currency
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::Interchange::currency]
            end
          end

          type network_identifiers =
            {
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor acquirer_business_id: String

            attr_accessor acquirer_reference_number: String

            attr_accessor transaction_id: String?

            def initialize: (
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]
          end

          type purchase_details =
            {
              car_rental: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Transaction::Source::CardRefund::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel?
            }

          class PurchaseDetails < Increase::Internal::Type::BaseModel
            attr_accessor car_rental: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental?

            attr_accessor customer_reference_identifier: String?

            attr_accessor local_tax_amount: Integer?

            attr_accessor local_tax_currency: String?

            attr_accessor lodging: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging?

            attr_accessor national_tax_amount: Integer?

            attr_accessor national_tax_currency: String?

            attr_accessor purchase_identifier: String?

            attr_accessor purchase_identifier_format: Increase::Transaction::Source::CardRefund::PurchaseDetails::purchase_identifier_format?

            attr_accessor travel: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel?

            def initialize: (
              car_rental: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Transaction::Source::CardRefund::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel?
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]

            type car_rental =
              {
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              }

            class CarRental < Increase::Internal::Type::BaseModel
              attr_accessor car_class_code: String?

              attr_accessor checkout_date: Date?

              attr_accessor daily_rental_rate_amount: Integer?

              attr_accessor daily_rental_rate_currency: String?

              attr_accessor days_rented: Integer?

              attr_accessor extra_charges: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::extra_charges?

              attr_accessor fuel_charges_amount: Integer?

              attr_accessor fuel_charges_currency: String?

              attr_accessor insurance_charges_amount: Integer?

              attr_accessor insurance_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::no_show_indicator?

              attr_accessor one_way_drop_off_charges_amount: Integer?

              attr_accessor one_way_drop_off_charges_currency: String?

              attr_accessor renter_name: String?

              attr_accessor weekly_rental_rate_amount: Integer?

              attr_accessor weekly_rental_rate_currency: String?

              def initialize: (
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              ) -> void

              def to_hash: -> ::Hash[Symbol, top]

              type extra_charges =
                :no_extra_charge
                | :gas
                | :extra_mileage
                | :late_return
                | :one_way_service_fee
                | :parking_violation

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Gas
                GAS: :gas

                # Extra mileage
                EXTRA_MILEAGE: :extra_mileage

                # Late return
                LATE_RETURN: :late_return

                # One way service fee
                ONE_WAY_SERVICE_FEE: :one_way_service_fee

                # Parking violation
                PARKING_VIOLATION: :parking_violation

                def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::extra_charges]
              end

              type no_show_indicator =
                :not_applicable | :no_show_for_specialized_vehicle

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show for specialized vehicle
                NO_SHOW_FOR_SPECIALIZED_VEHICLE: :no_show_for_specialized_vehicle

                def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::CarRental::no_show_indicator]
              end
            end

            type lodging =
              {
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              }

            class Lodging < Increase::Internal::Type::BaseModel
              attr_accessor check_in_date: Date?

              attr_accessor daily_room_rate_amount: Integer?

              attr_accessor daily_room_rate_currency: String?

              attr_accessor extra_charges: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::extra_charges?

              attr_accessor folio_cash_advances_amount: Integer?

              attr_accessor folio_cash_advances_currency: String?

              attr_accessor food_beverage_charges_amount: Integer?

              attr_accessor food_beverage_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::no_show_indicator?

              attr_accessor prepaid_expenses_amount: Integer?

              attr_accessor prepaid_expenses_currency: String?

              attr_accessor room_nights: Integer?

              attr_accessor total_room_tax_amount: Integer?

              attr_accessor total_room_tax_currency: String?

              attr_accessor total_tax_amount: Integer?

              attr_accessor total_tax_currency: String?

              def initialize: (
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              ) -> void

              def to_hash: -> ::Hash[Symbol, top]

              type extra_charges =
                :no_extra_charge
                | :restaurant
                | :gift_shop
                | :mini_bar
                | :telephone
                | :other
                | :laundry

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Restaurant
                RESTAURANT: :restaurant

                # Gift shop
                GIFT_SHOP: :gift_shop

                # Mini bar
                MINI_BAR: :mini_bar

                # Telephone
                TELEPHONE: :telephone

                # Other
                OTHER: :other

                # Laundry
                LAUNDRY: :laundry

                def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::extra_charges]
              end

              type no_show_indicator = :not_applicable | :no_show

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show
                NO_SHOW: :no_show

                def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Lodging::no_show_indicator]
              end
            end

            type purchase_identifier_format =
              :free_text
              | :order_number
              | :rental_agreement_number
              | :hotel_folio_number
              | :invoice_number

            module PurchaseIdentifierFormat
              extend Increase::Internal::Type::Enum

              # Free text
              FREE_TEXT: :free_text

              # Order number
              ORDER_NUMBER: :order_number

              # Rental agreement number
              RENTAL_AGREEMENT_NUMBER: :rental_agreement_number

              # Hotel folio number
              HOTEL_FOLIO_NUMBER: :hotel_folio_number

              # Invoice number
              INVOICE_NUMBER: :invoice_number

              def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::purchase_identifier_format]
            end

            type travel =
              {
                ancillary: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::TripLeg]?
              }

            class Travel < Increase::Internal::Type::BaseModel
              attr_accessor ancillary: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary?

              attr_accessor computerized_reservation_system: String?

              attr_accessor credit_reason_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::credit_reason_indicator?

              attr_accessor departure_date: Date?

              attr_accessor origination_city_airport_code: String?

              attr_accessor passenger_name: String?

              attr_accessor restricted_ticket_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator?

              attr_accessor ticket_change_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::ticket_change_indicator?

              attr_accessor ticket_number: String?

              attr_accessor travel_agency_code: String?

              attr_accessor travel_agency_name: String?

              attr_accessor trip_legs: ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::TripLeg]?

              def initialize: (
                ancillary: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::TripLeg]?
              ) -> void

              def to_hash: -> ::Hash[Symbol, top]

              type ancillary =
                {
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                }

              class Ancillary < Increase::Internal::Type::BaseModel
                attr_accessor connected_ticket_document_number: String?

                attr_accessor credit_reason_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?

                attr_accessor passenger_name_or_description: String?

                attr_accessor services: ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::Service]

                attr_accessor ticket_document_number: String?

                def initialize: (
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                ) -> void

                def to_hash: -> ::Hash[Symbol, top]

                type credit_reason_indicator =
                  :no_credit
                  | :passenger_transport_ancillary_purchase_cancellation
                  | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                  | :other

                module CreditReasonIndicator
                  extend Increase::Internal::Type::Enum

                  # No credit
                  NO_CREDIT: :no_credit

                  # Passenger transport ancillary purchase cancellation
                  PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                  # Airline ticket and passenger transport ancillary purchase cancellation
                  AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                  # Other
                  OTHER: :other

                  def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator]
                end

                type service =
                  {
                    category: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  }

                class Service < Increase::Internal::Type::BaseModel
                  attr_accessor category: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category?

                  attr_accessor sub_category: String?

                  def initialize: (
                    category: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  ) -> void

                  def to_hash: -> ::Hash[Symbol, top]

                  type category =
                    :none
                    | :bundled_service
                    | :baggage_fee
                    | :change_fee
                    | :cargo
                    | :carbon_offset
                    | :frequent_flyer
                    | :gift_card
                    | :ground_transport
                    | :in_flight_entertainment
                    | :lounge
                    | :medical
                    | :meal_beverage
                    | :other
                    | :passenger_assist_fee
                    | :pets
                    | :seat_fees
                    | :standby
                    | :service_fee
                    | :store
                    | :travel_service
                    | :unaccompanied_travel
                    | :upgrades
                    | :wifi

                  module Category
                    extend Increase::Internal::Type::Enum

                    # None
                    NONE: :none

                    # Bundled service
                    BUNDLED_SERVICE: :bundled_service

                    # Baggage fee
                    BAGGAGE_FEE: :baggage_fee

                    # Change fee
                    CHANGE_FEE: :change_fee

                    # Cargo
                    CARGO: :cargo

                    # Carbon offset
                    CARBON_OFFSET: :carbon_offset

                    # Frequent flyer
                    FREQUENT_FLYER: :frequent_flyer

                    # Gift card
                    GIFT_CARD: :gift_card

                    # Ground transport
                    GROUND_TRANSPORT: :ground_transport

                    # In-flight entertainment
                    IN_FLIGHT_ENTERTAINMENT: :in_flight_entertainment

                    # Lounge
                    LOUNGE: :lounge

                    # Medical
                    MEDICAL: :medical

                    # Meal beverage
                    MEAL_BEVERAGE: :meal_beverage

                    # Other
                    OTHER: :other

                    # Passenger assist fee
                    PASSENGER_ASSIST_FEE: :passenger_assist_fee

                    # Pets
                    PETS: :pets

                    # Seat fees
                    SEAT_FEES: :seat_fees

                    # Standby
                    STANDBY: :standby

                    # Service fee
                    SERVICE_FEE: :service_fee

                    # Store
                    STORE: :store

                    # Travel service
                    TRAVEL_SERVICE: :travel_service

                    # Unaccompanied travel
                    UNACCOMPANIED_TRAVEL: :unaccompanied_travel

                    # Upgrades
                    UPGRADES: :upgrades

                    # Wi-fi
                    WIFI: :wifi

                    def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category]
                  end
                end
              end

              type credit_reason_indicator =
                :no_credit
                | :passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_cancellation
                | :other
                | :partial_refund_of_airline_ticket

              module CreditReasonIndicator
                extend Increase::Internal::Type::Enum

                # No credit
                NO_CREDIT: :no_credit

                # Passenger transport ancillary purchase cancellation
                PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                # Airline ticket and passenger transport ancillary purchase cancellation
                AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                # Airline ticket cancellation
                AIRLINE_TICKET_CANCELLATION: :airline_ticket_cancellation

                # Other
                OTHER: :other

                # Partial refund of airline ticket
                PARTIAL_REFUND_OF_AIRLINE_TICKET: :partial_refund_of_airline_ticket

                def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::credit_reason_indicator]
              end

              type restricted_ticket_indicator =
                :no_restrictions | :restricted_non_refundable_ticket

              module RestrictedTicketIndicator
                extend Increase::Internal::Type::Enum

                # No restrictions
                NO_RESTRICTIONS: :no_restrictions

                # Restricted non-refundable ticket
                RESTRICTED_NON_REFUNDABLE_TICKET: :restricted_non_refundable_ticket

                def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator]
              end

              type ticket_change_indicator =
                :none | :change_to_existing_ticket | :new_ticket

              module TicketChangeIndicator
                extend Increase::Internal::Type::Enum

                # None
                NONE: :none

                # Change to existing ticket
                CHANGE_TO_EXISTING_TICKET: :change_to_existing_ticket

                # New ticket
                NEW_TICKET: :new_ticket

                def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::ticket_change_indicator]
              end

              type trip_leg =
                {
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code?
                }

              class TripLeg < Increase::Internal::Type::BaseModel
                attr_accessor carrier_code: String?

                attr_accessor destination_city_airport_code: String?

                attr_accessor fare_basis_code: String?

                attr_accessor flight_number: String?

                attr_accessor service_class: String?

                attr_accessor stop_over_code: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code?

                def initialize: (
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code?
                ) -> void

                def to_hash: -> ::Hash[Symbol, top]

                type stop_over_code =
                  :none | :stop_over_allowed | :stop_over_not_allowed

                module StopOverCode
                  extend Increase::Internal::Type::Enum

                  # None
                  NONE: :none

                  # Stop over allowed
                  STOP_OVER_ALLOWED: :stop_over_allowed

                  # Stop over not allowed
                  STOP_OVER_NOT_ALLOWED: :stop_over_not_allowed

                  def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code]
                end
              end
            end
          end

          type type_ = :card_refund

          module Type
            extend Increase::Internal::Type::Enum

            CARD_REFUND: :card_refund

            def self?.values: -> ::Array[Increase::Transaction::Source::CardRefund::type_]
          end
        end

        type card_revenue_payment =
          {
            amount: Integer,
            currency: Increase::Transaction::Source::CardRevenuePayment::currency,
            period_end: Time,
            period_start: Time,
            transacted_on_account_id: String?
          }

        class CardRevenuePayment < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor currency: Increase::Transaction::Source::CardRevenuePayment::currency

          attr_accessor period_end: Time

          attr_accessor period_start: Time

          attr_accessor transacted_on_account_id: String?

          def initialize: (
            amount: Integer,
            currency: Increase::Transaction::Source::CardRevenuePayment::currency,
            period_end: Time,
            period_start: Time,
            transacted_on_account_id: String?
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::CardRevenuePayment::currency]
          end
        end

        type card_settlement =
          {
            id: String,
            amount: Integer,
            card_authorization: String?,
            card_payment_id: String,
            cashback: Increase::Transaction::Source::CardSettlement::Cashback?,
            currency: Increase::Transaction::Source::CardSettlement::currency,
            interchange: Increase::Transaction::Source::CardSettlement::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::Transaction::Source::CardSettlement::NetworkIdentifiers,
            pending_transaction_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::Transaction::Source::CardSettlement::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Transaction::Source::CardSettlement::type_
          }

        class CardSettlement < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount: Integer

          attr_accessor card_authorization: String?

          attr_accessor card_payment_id: String

          attr_accessor cashback: Increase::Transaction::Source::CardSettlement::Cashback?

          attr_accessor currency: Increase::Transaction::Source::CardSettlement::currency

          attr_accessor interchange: Increase::Transaction::Source::CardSettlement::Interchange?

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String

          attr_accessor merchant_country: String

          attr_accessor merchant_name: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_identifiers: Increase::Transaction::Source::CardSettlement::NetworkIdentifiers

          attr_accessor pending_transaction_id: String?

          attr_accessor presentment_amount: Integer

          attr_accessor presentment_currency: String

          attr_accessor purchase_details: Increase::Transaction::Source::CardSettlement::PurchaseDetails?

          attr_accessor transaction_id: String

          attr_accessor type: Increase::Transaction::Source::CardSettlement::type_

          def initialize: (
            id: String,
            amount: Integer,
            card_authorization: String?,
            card_payment_id: String,
            cashback: Increase::Transaction::Source::CardSettlement::Cashback?,
            currency: Increase::Transaction::Source::CardSettlement::currency,
            interchange: Increase::Transaction::Source::CardSettlement::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::Transaction::Source::CardSettlement::NetworkIdentifiers,
            pending_transaction_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::Transaction::Source::CardSettlement::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Transaction::Source::CardSettlement::type_
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type cashback =
            {
              amount: String,
              currency: Increase::Transaction::Source::CardSettlement::Cashback::currency
            }

          class Cashback < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor currency: Increase::Transaction::Source::CardSettlement::Cashback::currency

            def initialize: (
              amount: String,
              currency: Increase::Transaction::Source::CardSettlement::Cashback::currency
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::Cashback::currency]
            end
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::currency]
          end

          type interchange =
            {
              amount: String,
              code: String?,
              currency: Increase::Transaction::Source::CardSettlement::Interchange::currency
            }

          class Interchange < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor code: String?

            attr_accessor currency: Increase::Transaction::Source::CardSettlement::Interchange::currency

            def initialize: (
              amount: String,
              code: String?,
              currency: Increase::Transaction::Source::CardSettlement::Interchange::currency
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::Interchange::currency]
            end
          end

          type network_identifiers =
            {
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor acquirer_business_id: String

            attr_accessor acquirer_reference_number: String

            attr_accessor transaction_id: String?

            def initialize: (
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]
          end

          type purchase_details =
            {
              car_rental: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Transaction::Source::CardSettlement::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel?
            }

          class PurchaseDetails < Increase::Internal::Type::BaseModel
            attr_accessor car_rental: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental?

            attr_accessor customer_reference_identifier: String?

            attr_accessor local_tax_amount: Integer?

            attr_accessor local_tax_currency: String?

            attr_accessor lodging: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging?

            attr_accessor national_tax_amount: Integer?

            attr_accessor national_tax_currency: String?

            attr_accessor purchase_identifier: String?

            attr_accessor purchase_identifier_format: Increase::Transaction::Source::CardSettlement::PurchaseDetails::purchase_identifier_format?

            attr_accessor travel: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel?

            def initialize: (
              car_rental: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Transaction::Source::CardSettlement::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel?
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]

            type car_rental =
              {
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              }

            class CarRental < Increase::Internal::Type::BaseModel
              attr_accessor car_class_code: String?

              attr_accessor checkout_date: Date?

              attr_accessor daily_rental_rate_amount: Integer?

              attr_accessor daily_rental_rate_currency: String?

              attr_accessor days_rented: Integer?

              attr_accessor extra_charges: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::extra_charges?

              attr_accessor fuel_charges_amount: Integer?

              attr_accessor fuel_charges_currency: String?

              attr_accessor insurance_charges_amount: Integer?

              attr_accessor insurance_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::no_show_indicator?

              attr_accessor one_way_drop_off_charges_amount: Integer?

              attr_accessor one_way_drop_off_charges_currency: String?

              attr_accessor renter_name: String?

              attr_accessor weekly_rental_rate_amount: Integer?

              attr_accessor weekly_rental_rate_currency: String?

              def initialize: (
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              ) -> void

              def to_hash: -> ::Hash[Symbol, top]

              type extra_charges =
                :no_extra_charge
                | :gas
                | :extra_mileage
                | :late_return
                | :one_way_service_fee
                | :parking_violation

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Gas
                GAS: :gas

                # Extra mileage
                EXTRA_MILEAGE: :extra_mileage

                # Late return
                LATE_RETURN: :late_return

                # One way service fee
                ONE_WAY_SERVICE_FEE: :one_way_service_fee

                # Parking violation
                PARKING_VIOLATION: :parking_violation

                def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::extra_charges]
              end

              type no_show_indicator =
                :not_applicable | :no_show_for_specialized_vehicle

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show for specialized vehicle
                NO_SHOW_FOR_SPECIALIZED_VEHICLE: :no_show_for_specialized_vehicle

                def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::CarRental::no_show_indicator]
              end
            end

            type lodging =
              {
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              }

            class Lodging < Increase::Internal::Type::BaseModel
              attr_accessor check_in_date: Date?

              attr_accessor daily_room_rate_amount: Integer?

              attr_accessor daily_room_rate_currency: String?

              attr_accessor extra_charges: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::extra_charges?

              attr_accessor folio_cash_advances_amount: Integer?

              attr_accessor folio_cash_advances_currency: String?

              attr_accessor food_beverage_charges_amount: Integer?

              attr_accessor food_beverage_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::no_show_indicator?

              attr_accessor prepaid_expenses_amount: Integer?

              attr_accessor prepaid_expenses_currency: String?

              attr_accessor room_nights: Integer?

              attr_accessor total_room_tax_amount: Integer?

              attr_accessor total_room_tax_currency: String?

              attr_accessor total_tax_amount: Integer?

              attr_accessor total_tax_currency: String?

              def initialize: (
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              ) -> void

              def to_hash: -> ::Hash[Symbol, top]

              type extra_charges =
                :no_extra_charge
                | :restaurant
                | :gift_shop
                | :mini_bar
                | :telephone
                | :other
                | :laundry

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Restaurant
                RESTAURANT: :restaurant

                # Gift shop
                GIFT_SHOP: :gift_shop

                # Mini bar
                MINI_BAR: :mini_bar

                # Telephone
                TELEPHONE: :telephone

                # Other
                OTHER: :other

                # Laundry
                LAUNDRY: :laundry

                def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::extra_charges]
              end

              type no_show_indicator = :not_applicable | :no_show

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show
                NO_SHOW: :no_show

                def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Lodging::no_show_indicator]
              end
            end

            type purchase_identifier_format =
              :free_text
              | :order_number
              | :rental_agreement_number
              | :hotel_folio_number
              | :invoice_number

            module PurchaseIdentifierFormat
              extend Increase::Internal::Type::Enum

              # Free text
              FREE_TEXT: :free_text

              # Order number
              ORDER_NUMBER: :order_number

              # Rental agreement number
              RENTAL_AGREEMENT_NUMBER: :rental_agreement_number

              # Hotel folio number
              HOTEL_FOLIO_NUMBER: :hotel_folio_number

              # Invoice number
              INVOICE_NUMBER: :invoice_number

              def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::purchase_identifier_format]
            end

            type travel =
              {
                ancillary: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::TripLeg]?
              }

            class Travel < Increase::Internal::Type::BaseModel
              attr_accessor ancillary: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary?

              attr_accessor computerized_reservation_system: String?

              attr_accessor credit_reason_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator?

              attr_accessor departure_date: Date?

              attr_accessor origination_city_airport_code: String?

              attr_accessor passenger_name: String?

              attr_accessor restricted_ticket_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator?

              attr_accessor ticket_change_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator?

              attr_accessor ticket_number: String?

              attr_accessor travel_agency_code: String?

              attr_accessor travel_agency_name: String?

              attr_accessor trip_legs: ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::TripLeg]?

              def initialize: (
                ancillary: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::TripLeg]?
              ) -> void

              def to_hash: -> ::Hash[Symbol, top]

              type ancillary =
                {
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                }

              class Ancillary < Increase::Internal::Type::BaseModel
                attr_accessor connected_ticket_document_number: String?

                attr_accessor credit_reason_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?

                attr_accessor passenger_name_or_description: String?

                attr_accessor services: ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::Service]

                attr_accessor ticket_document_number: String?

                def initialize: (
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                ) -> void

                def to_hash: -> ::Hash[Symbol, top]

                type credit_reason_indicator =
                  :no_credit
                  | :passenger_transport_ancillary_purchase_cancellation
                  | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                  | :other

                module CreditReasonIndicator
                  extend Increase::Internal::Type::Enum

                  # No credit
                  NO_CREDIT: :no_credit

                  # Passenger transport ancillary purchase cancellation
                  PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                  # Airline ticket and passenger transport ancillary purchase cancellation
                  AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                  # Other
                  OTHER: :other

                  def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator]
                end

                type service =
                  {
                    category: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  }

                class Service < Increase::Internal::Type::BaseModel
                  attr_accessor category: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category?

                  attr_accessor sub_category: String?

                  def initialize: (
                    category: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  ) -> void

                  def to_hash: -> ::Hash[Symbol, top]

                  type category =
                    :none
                    | :bundled_service
                    | :baggage_fee
                    | :change_fee
                    | :cargo
                    | :carbon_offset
                    | :frequent_flyer
                    | :gift_card
                    | :ground_transport
                    | :in_flight_entertainment
                    | :lounge
                    | :medical
                    | :meal_beverage
                    | :other
                    | :passenger_assist_fee
                    | :pets
                    | :seat_fees
                    | :standby
                    | :service_fee
                    | :store
                    | :travel_service
                    | :unaccompanied_travel
                    | :upgrades
                    | :wifi

                  module Category
                    extend Increase::Internal::Type::Enum

                    # None
                    NONE: :none

                    # Bundled service
                    BUNDLED_SERVICE: :bundled_service

                    # Baggage fee
                    BAGGAGE_FEE: :baggage_fee

                    # Change fee
                    CHANGE_FEE: :change_fee

                    # Cargo
                    CARGO: :cargo

                    # Carbon offset
                    CARBON_OFFSET: :carbon_offset

                    # Frequent flyer
                    FREQUENT_FLYER: :frequent_flyer

                    # Gift card
                    GIFT_CARD: :gift_card

                    # Ground transport
                    GROUND_TRANSPORT: :ground_transport

                    # In-flight entertainment
                    IN_FLIGHT_ENTERTAINMENT: :in_flight_entertainment

                    # Lounge
                    LOUNGE: :lounge

                    # Medical
                    MEDICAL: :medical

                    # Meal beverage
                    MEAL_BEVERAGE: :meal_beverage

                    # Other
                    OTHER: :other

                    # Passenger assist fee
                    PASSENGER_ASSIST_FEE: :passenger_assist_fee

                    # Pets
                    PETS: :pets

                    # Seat fees
                    SEAT_FEES: :seat_fees

                    # Standby
                    STANDBY: :standby

                    # Service fee
                    SERVICE_FEE: :service_fee

                    # Store
                    STORE: :store

                    # Travel service
                    TRAVEL_SERVICE: :travel_service

                    # Unaccompanied travel
                    UNACCOMPANIED_TRAVEL: :unaccompanied_travel

                    # Upgrades
                    UPGRADES: :upgrades

                    # Wi-fi
                    WIFI: :wifi

                    def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category]
                  end
                end
              end

              type credit_reason_indicator =
                :no_credit
                | :passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_cancellation
                | :other
                | :partial_refund_of_airline_ticket

              module CreditReasonIndicator
                extend Increase::Internal::Type::Enum

                # No credit
                NO_CREDIT: :no_credit

                # Passenger transport ancillary purchase cancellation
                PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                # Airline ticket and passenger transport ancillary purchase cancellation
                AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                # Airline ticket cancellation
                AIRLINE_TICKET_CANCELLATION: :airline_ticket_cancellation

                # Other
                OTHER: :other

                # Partial refund of airline ticket
                PARTIAL_REFUND_OF_AIRLINE_TICKET: :partial_refund_of_airline_ticket

                def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator]
              end

              type restricted_ticket_indicator =
                :no_restrictions | :restricted_non_refundable_ticket

              module RestrictedTicketIndicator
                extend Increase::Internal::Type::Enum

                # No restrictions
                NO_RESTRICTIONS: :no_restrictions

                # Restricted non-refundable ticket
                RESTRICTED_NON_REFUNDABLE_TICKET: :restricted_non_refundable_ticket

                def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator]
              end

              type ticket_change_indicator =
                :none | :change_to_existing_ticket | :new_ticket

              module TicketChangeIndicator
                extend Increase::Internal::Type::Enum

                # None
                NONE: :none

                # Change to existing ticket
                CHANGE_TO_EXISTING_TICKET: :change_to_existing_ticket

                # New ticket
                NEW_TICKET: :new_ticket

                def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator]
              end

              type trip_leg =
                {
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code?
                }

              class TripLeg < Increase::Internal::Type::BaseModel
                attr_accessor carrier_code: String?

                attr_accessor destination_city_airport_code: String?

                attr_accessor fare_basis_code: String?

                attr_accessor flight_number: String?

                attr_accessor service_class: String?

                attr_accessor stop_over_code: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code?

                def initialize: (
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code?
                ) -> void

                def to_hash: -> ::Hash[Symbol, top]

                type stop_over_code =
                  :none | :stop_over_allowed | :stop_over_not_allowed

                module StopOverCode
                  extend Increase::Internal::Type::Enum

                  # None
                  NONE: :none

                  # Stop over allowed
                  STOP_OVER_ALLOWED: :stop_over_allowed

                  # Stop over not allowed
                  STOP_OVER_NOT_ALLOWED: :stop_over_not_allowed

                  def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code]
                end
              end
            end
          end

          type type_ = :card_settlement

          module Type
            extend Increase::Internal::Type::Enum

            CARD_SETTLEMENT: :card_settlement

            def self?.values: -> ::Array[Increase::Transaction::Source::CardSettlement::type_]
          end
        end

        type cashback_payment =
          {
            accrued_on_card_id: String?,
            amount: Integer,
            currency: Increase::Transaction::Source::CashbackPayment::currency,
            period_end: Time,
            period_start: Time
          }

        class CashbackPayment < Increase::Internal::Type::BaseModel
          attr_accessor accrued_on_card_id: String?

          attr_accessor amount: Integer

          attr_accessor currency: Increase::Transaction::Source::CashbackPayment::currency

          attr_accessor period_end: Time

          attr_accessor period_start: Time

          def initialize: (
            accrued_on_card_id: String?,
            amount: Integer,
            currency: Increase::Transaction::Source::CashbackPayment::currency,
            period_end: Time,
            period_start: Time
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::CashbackPayment::currency]
          end
        end

        type category =
          :account_transfer_intention
          | :ach_transfer_intention
          | :ach_transfer_rejection
          | :ach_transfer_return
          | :cashback_payment
          | :card_dispute_acceptance
          | :card_dispute_loss
          | :card_refund
          | :card_settlement
          | :card_revenue_payment
          | :check_deposit_acceptance
          | :check_deposit_return
          | :check_transfer_deposit
          | :fee_payment
          | :inbound_ach_transfer
          | :inbound_ach_transfer_return_intention
          | :inbound_check_deposit_return_intention
          | :inbound_check_adjustment
          | :inbound_real_time_payments_transfer_confirmation
          | :inbound_real_time_payments_transfer_decline
          | :inbound_wire_reversal
          | :inbound_wire_transfer
          | :inbound_wire_transfer_reversal
          | :interest_payment
          | :internal_source
          | :real_time_payments_transfer_acknowledgement
          | :sample_funds
          | :wire_transfer_intention
          | :swift_transfer_intention
          | :other

        module Category
          extend Increase::Internal::Type::Enum

          # Account Transfer Intention: details will be under the `account_transfer_intention` object.
          ACCOUNT_TRANSFER_INTENTION: :account_transfer_intention

          # ACH Transfer Intention: details will be under the `ach_transfer_intention` object.
          ACH_TRANSFER_INTENTION: :ach_transfer_intention

          # ACH Transfer Rejection: details will be under the `ach_transfer_rejection` object.
          ACH_TRANSFER_REJECTION: :ach_transfer_rejection

          # ACH Transfer Return: details will be under the `ach_transfer_return` object.
          ACH_TRANSFER_RETURN: :ach_transfer_return

          # Cashback Payment: details will be under the `cashback_payment` object.
          CASHBACK_PAYMENT: :cashback_payment

          # Card Dispute Acceptance: details will be under the `card_dispute_acceptance` object.
          CARD_DISPUTE_ACCEPTANCE: :card_dispute_acceptance

          # Card Dispute Loss: details will be under the `card_dispute_loss` object.
          CARD_DISPUTE_LOSS: :card_dispute_loss

          # Card Refund: details will be under the `card_refund` object.
          CARD_REFUND: :card_refund

          # Card Settlement: details will be under the `card_settlement` object.
          CARD_SETTLEMENT: :card_settlement

          # Card Revenue Payment: details will be under the `card_revenue_payment` object.
          CARD_REVENUE_PAYMENT: :card_revenue_payment

          # Check Deposit Acceptance: details will be under the `check_deposit_acceptance` object.
          CHECK_DEPOSIT_ACCEPTANCE: :check_deposit_acceptance

          # Check Deposit Return: details will be under the `check_deposit_return` object.
          CHECK_DEPOSIT_RETURN: :check_deposit_return

          # Check Transfer Deposit: details will be under the `check_transfer_deposit` object.
          CHECK_TRANSFER_DEPOSIT: :check_transfer_deposit

          # Fee Payment: details will be under the `fee_payment` object.
          FEE_PAYMENT: :fee_payment

          # Inbound ACH Transfer Intention: details will be under the `inbound_ach_transfer` object.
          INBOUND_ACH_TRANSFER: :inbound_ach_transfer

          # Inbound ACH Transfer Return Intention: details will be under the `inbound_ach_transfer_return_intention` object.
          INBOUND_ACH_TRANSFER_RETURN_INTENTION: :inbound_ach_transfer_return_intention

          # Inbound Check Deposit Return Intention: details will be under the `inbound_check_deposit_return_intention` object.
          INBOUND_CHECK_DEPOSIT_RETURN_INTENTION: :inbound_check_deposit_return_intention

          # Inbound Check Adjustment: details will be under the `inbound_check_adjustment` object.
          INBOUND_CHECK_ADJUSTMENT: :inbound_check_adjustment

          # Inbound Real-Time Payments Transfer Confirmation: details will be under the `inbound_real_time_payments_transfer_confirmation` object.
          INBOUND_REAL_TIME_PAYMENTS_TRANSFER_CONFIRMATION: :inbound_real_time_payments_transfer_confirmation

          # Inbound Real-Time Payments Transfer Decline: details will be under the `inbound_real_time_payments_transfer_decline` object.
          INBOUND_REAL_TIME_PAYMENTS_TRANSFER_DECLINE: :inbound_real_time_payments_transfer_decline

          # Inbound Wire Reversal: details will be under the `inbound_wire_reversal` object.
          INBOUND_WIRE_REVERSAL: :inbound_wire_reversal

          # Inbound Wire Transfer Intention: details will be under the `inbound_wire_transfer` object.
          INBOUND_WIRE_TRANSFER: :inbound_wire_transfer

          # Inbound Wire Transfer Reversal Intention: details will be under the `inbound_wire_transfer_reversal` object.
          INBOUND_WIRE_TRANSFER_REVERSAL: :inbound_wire_transfer_reversal

          # Interest Payment: details will be under the `interest_payment` object.
          INTEREST_PAYMENT: :interest_payment

          # Internal Source: details will be under the `internal_source` object.
          INTERNAL_SOURCE: :internal_source

          # Real-Time Payments Transfer Acknowledgement: details will be under the `real_time_payments_transfer_acknowledgement` object.
          REAL_TIME_PAYMENTS_TRANSFER_ACKNOWLEDGEMENT: :real_time_payments_transfer_acknowledgement

          # Sample Funds: details will be under the `sample_funds` object.
          SAMPLE_FUNDS: :sample_funds

          # Wire Transfer Intention: details will be under the `wire_transfer_intention` object.
          WIRE_TRANSFER_INTENTION: :wire_transfer_intention

          # Swift Transfer Intention: details will be under the `swift_transfer_intention` object.
          SWIFT_TRANSFER_INTENTION: :swift_transfer_intention

          # The Transaction was made for an undocumented or deprecated reason.
          OTHER: :other

          def self?.values: -> ::Array[Increase::Transaction::Source::category]
        end

        type check_deposit_acceptance =
          {
            account_number: String,
            amount: Integer,
            auxiliary_on_us: String?,
            check_deposit_id: String,
            currency: Increase::Transaction::Source::CheckDepositAcceptance::currency,
            routing_number: String,
            serial_number: String?
          }

        class CheckDepositAcceptance < Increase::Internal::Type::BaseModel
          attr_accessor account_number: String

          attr_accessor amount: Integer

          attr_accessor auxiliary_on_us: String?

          attr_accessor check_deposit_id: String

          attr_accessor currency: Increase::Transaction::Source::CheckDepositAcceptance::currency

          attr_accessor routing_number: String

          attr_accessor serial_number: String?

          def initialize: (
            account_number: String,
            amount: Integer,
            auxiliary_on_us: String?,
            check_deposit_id: String,
            currency: Increase::Transaction::Source::CheckDepositAcceptance::currency,
            routing_number: String,
            serial_number: String?
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::CheckDepositAcceptance::currency]
          end
        end

        type check_deposit_return =
          {
            amount: Integer,
            check_deposit_id: String,
            currency: Increase::Transaction::Source::CheckDepositReturn::currency,
            return_reason: Increase::Transaction::Source::CheckDepositReturn::return_reason,
            returned_at: Time,
            transaction_id: String
          }

        class CheckDepositReturn < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor check_deposit_id: String

          attr_accessor currency: Increase::Transaction::Source::CheckDepositReturn::currency

          attr_accessor return_reason: Increase::Transaction::Source::CheckDepositReturn::return_reason

          attr_accessor returned_at: Time

          attr_accessor transaction_id: String

          def initialize: (
            amount: Integer,
            check_deposit_id: String,
            currency: Increase::Transaction::Source::CheckDepositReturn::currency,
            return_reason: Increase::Transaction::Source::CheckDepositReturn::return_reason,
            returned_at: Time,
            transaction_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::CheckDepositReturn::currency]
          end

          type return_reason =
            :ach_conversion_not_supported
            | :closed_account
            | :duplicate_submission
            | :insufficient_funds
            | :no_account
            | :not_authorized
            | :stale_dated
            | :stop_payment
            | :unknown_reason
            | :unmatched_details
            | :unreadable_image
            | :endorsement_irregular
            | :altered_or_fictitious_item
            | :frozen_or_blocked_account
            | :post_dated
            | :endorsement_missing
            | :signature_missing
            | :stop_payment_suspect
            | :unusable_image
            | :image_fails_security_check
            | :cannot_determine_amount
            | :signature_irregular
            | :non_cash_item
            | :unable_to_process
            | :item_exceeds_dollar_limit
            | :branch_or_account_sold

          module ReturnReason
            extend Increase::Internal::Type::Enum

            # The check doesn't allow ACH conversion.
            ACH_CONVERSION_NOT_SUPPORTED: :ach_conversion_not_supported

            # The account is closed.
            CLOSED_ACCOUNT: :closed_account

            # The check has already been deposited.
            DUPLICATE_SUBMISSION: :duplicate_submission

            # Insufficient funds
            INSUFFICIENT_FUNDS: :insufficient_funds

            # No account was found matching the check details.
            NO_ACCOUNT: :no_account

            # The check was not authorized.
            NOT_AUTHORIZED: :not_authorized

            # The check is too old.
            STALE_DATED: :stale_dated

            # The payment has been stopped by the account holder.
            STOP_PAYMENT: :stop_payment

            # The reason for the return is unknown.
            UNKNOWN_REASON: :unknown_reason

            # The image doesn't match the details submitted.
            UNMATCHED_DETAILS: :unmatched_details

            # The image could not be read.
            UNREADABLE_IMAGE: :unreadable_image

            # The check endorsement was irregular.
            ENDORSEMENT_IRREGULAR: :endorsement_irregular

            # The check present was either altered or fake.
            ALTERED_OR_FICTITIOUS_ITEM: :altered_or_fictitious_item

            # The account this check is drawn on is frozen.
            FROZEN_OR_BLOCKED_ACCOUNT: :frozen_or_blocked_account

            # The check is post dated.
            POST_DATED: :post_dated

            # The endorsement was missing.
            ENDORSEMENT_MISSING: :endorsement_missing

            # The check signature was missing.
            SIGNATURE_MISSING: :signature_missing

            # The bank suspects a stop payment will be placed.
            STOP_PAYMENT_SUSPECT: :stop_payment_suspect

            # The bank cannot read the image.
            UNUSABLE_IMAGE: :unusable_image

            # The check image fails the bank's security check.
            IMAGE_FAILS_SECURITY_CHECK: :image_fails_security_check

            # The bank cannot determine the amount.
            CANNOT_DETERMINE_AMOUNT: :cannot_determine_amount

            # The signature is inconsistent with prior signatures.
            SIGNATURE_IRREGULAR: :signature_irregular

            # The check is a non-cash item and cannot be drawn against the account.
            NON_CASH_ITEM: :non_cash_item

            # The bank is unable to process this check.
            UNABLE_TO_PROCESS: :unable_to_process

            # The check exceeds the bank or customer's limit.
            ITEM_EXCEEDS_DOLLAR_LIMIT: :item_exceeds_dollar_limit

            # The bank sold this account and no longer services this customer.
            BRANCH_OR_ACCOUNT_SOLD: :branch_or_account_sold

            def self?.values: -> ::Array[Increase::Transaction::Source::CheckDepositReturn::return_reason]
          end
        end

        type check_transfer_deposit =
          {
            back_image_file_id: String?,
            bank_of_first_deposit_routing_number: String?,
            deposited_at: Time,
            front_image_file_id: String?,
            inbound_check_deposit_id: String?,
            transaction_id: String?,
            transfer_id: String?,
            type: Increase::Transaction::Source::CheckTransferDeposit::type_
          }

        class CheckTransferDeposit < Increase::Internal::Type::BaseModel
          attr_accessor back_image_file_id: String?

          attr_accessor bank_of_first_deposit_routing_number: String?

          attr_accessor deposited_at: Time

          attr_accessor front_image_file_id: String?

          attr_accessor inbound_check_deposit_id: String?

          attr_accessor transaction_id: String?

          attr_accessor transfer_id: String?

          attr_accessor type: Increase::Transaction::Source::CheckTransferDeposit::type_

          def initialize: (
            back_image_file_id: String?,
            bank_of_first_deposit_routing_number: String?,
            deposited_at: Time,
            front_image_file_id: String?,
            inbound_check_deposit_id: String?,
            transaction_id: String?,
            transfer_id: String?,
            type: Increase::Transaction::Source::CheckTransferDeposit::type_
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type type_ = :check_transfer_deposit

          module Type
            extend Increase::Internal::Type::Enum

            CHECK_TRANSFER_DEPOSIT: :check_transfer_deposit

            def self?.values: -> ::Array[Increase::Transaction::Source::CheckTransferDeposit::type_]
          end
        end

        type fee_payment =
          {
            amount: Integer,
            currency: Increase::Transaction::Source::FeePayment::currency,
            fee_period_start: Date,
            program_id: String?
          }

        class FeePayment < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor currency: Increase::Transaction::Source::FeePayment::currency

          attr_accessor fee_period_start: Date

          attr_accessor program_id: String?

          def initialize: (
            amount: Integer,
            currency: Increase::Transaction::Source::FeePayment::currency,
            fee_period_start: Date,
            program_id: String?
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::FeePayment::currency]
          end
        end

        type inbound_ach_transfer =
          {
            addenda: Increase::Transaction::Source::InboundACHTransfer::Addenda?,
            amount: Integer,
            originator_company_descriptive_date: String?,
            originator_company_discretionary_data: String?,
            originator_company_entry_description: String,
            originator_company_id: String,
            originator_company_name: String,
            receiver_id_number: String?,
            receiver_name: String?,
            trace_number: String,
            transfer_id: String
          }

        class InboundACHTransfer < Increase::Internal::Type::BaseModel
          attr_accessor addenda: Increase::Transaction::Source::InboundACHTransfer::Addenda?

          attr_accessor amount: Integer

          attr_accessor originator_company_descriptive_date: String?

          attr_accessor originator_company_discretionary_data: String?

          attr_accessor originator_company_entry_description: String

          attr_accessor originator_company_id: String

          attr_accessor originator_company_name: String

          attr_accessor receiver_id_number: String?

          attr_accessor receiver_name: String?

          attr_accessor trace_number: String

          attr_accessor transfer_id: String

          def initialize: (
            addenda: Increase::Transaction::Source::InboundACHTransfer::Addenda?,
            amount: Integer,
            originator_company_descriptive_date: String?,
            originator_company_discretionary_data: String?,
            originator_company_entry_description: String,
            originator_company_id: String,
            originator_company_name: String,
            receiver_id_number: String?,
            receiver_name: String?,
            trace_number: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type addenda =
            {
              category: Increase::Transaction::Source::InboundACHTransfer::Addenda::category,
              freeform: Increase::Transaction::Source::InboundACHTransfer::Addenda::Freeform?
            }

          class Addenda < Increase::Internal::Type::BaseModel
            attr_accessor category: Increase::Transaction::Source::InboundACHTransfer::Addenda::category

            attr_accessor freeform: Increase::Transaction::Source::InboundACHTransfer::Addenda::Freeform?

            def initialize: (
              category: Increase::Transaction::Source::InboundACHTransfer::Addenda::category,
              freeform: Increase::Transaction::Source::InboundACHTransfer::Addenda::Freeform?
            ) -> void

            def to_hash: -> ::Hash[Symbol, top]

            type category = :freeform

            module Category
              extend Increase::Internal::Type::Enum

              # Unstructured addendum.
              FREEFORM: :freeform

              def self?.values: -> ::Array[Increase::Transaction::Source::InboundACHTransfer::Addenda::category]
            end

            type freeform =
              {
                entries: ::Array[Increase::Transaction::Source::InboundACHTransfer::Addenda::Freeform::Entry]
              }

            class Freeform < Increase::Internal::Type::BaseModel
              attr_accessor entries: ::Array[Increase::Transaction::Source::InboundACHTransfer::Addenda::Freeform::Entry]

              def initialize: (
                entries: ::Array[Increase::Transaction::Source::InboundACHTransfer::Addenda::Freeform::Entry]
              ) -> void

              def to_hash: -> ::Hash[Symbol, top]

              type entry = { payment_related_information: String }

              class Entry < Increase::Internal::Type::BaseModel
                attr_accessor payment_related_information: String

                def initialize: (payment_related_information: String) -> void

                def to_hash: -> ::Hash[Symbol, top]
              end
            end
          end
        end

        type inbound_ach_transfer_return_intention =
          { inbound_ach_transfer_id: String }

        class InboundACHTransferReturnIntention < Increase::Internal::Type::BaseModel
          attr_accessor inbound_ach_transfer_id: String

          def initialize: (inbound_ach_transfer_id: String) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type inbound_check_adjustment =
          {
            adjusted_transaction_id: String,
            amount: Integer,
            reason: Increase::Transaction::Source::InboundCheckAdjustment::reason
          }

        class InboundCheckAdjustment < Increase::Internal::Type::BaseModel
          attr_accessor adjusted_transaction_id: String

          attr_accessor amount: Integer

          attr_accessor reason: Increase::Transaction::Source::InboundCheckAdjustment::reason

          def initialize: (
            adjusted_transaction_id: String,
            amount: Integer,
            reason: Increase::Transaction::Source::InboundCheckAdjustment::reason
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type reason =
            :late_return
            | :wrong_payee_credit
            | :adjusted_amount
            | :non_conforming_item

          module Reason
            extend Increase::Internal::Type::Enum

            # The return was initiated too late and the receiving institution has responded with a Late Return Claim.
            LATE_RETURN: :late_return

            # The check was deposited to the wrong payee and the depositing institution has reimbursed the funds with a Wrong Payee Credit.
            WRONG_PAYEE_CREDIT: :wrong_payee_credit

            # The check was deposited with a different amount than what was written on the check.
            ADJUSTED_AMOUNT: :adjusted_amount

            # The recipient was not able to process the check. This usually happens for e.g., low quality images.
            NON_CONFORMING_ITEM: :non_conforming_item

            def self?.values: -> ::Array[Increase::Transaction::Source::InboundCheckAdjustment::reason]
          end
        end

        type inbound_check_deposit_return_intention =
          { inbound_check_deposit_id: String, transfer_id: String? }

        class InboundCheckDepositReturnIntention < Increase::Internal::Type::BaseModel
          attr_accessor inbound_check_deposit_id: String

          attr_accessor transfer_id: String?

          def initialize: (
            inbound_check_deposit_id: String,
            transfer_id: String?
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type inbound_real_time_payments_transfer_confirmation =
          {
            amount: Integer,
            creditor_name: String,
            currency: Increase::Transaction::Source::InboundRealTimePaymentsTransferConfirmation::currency,
            debtor_account_number: String,
            debtor_name: String,
            debtor_routing_number: String,
            remittance_information: String?,
            transaction_identification: String,
            transfer_id: String
          }

        class InboundRealTimePaymentsTransferConfirmation < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor creditor_name: String

          attr_accessor currency: Increase::Transaction::Source::InboundRealTimePaymentsTransferConfirmation::currency

          attr_accessor debtor_account_number: String

          attr_accessor debtor_name: String

          attr_accessor debtor_routing_number: String

          attr_accessor remittance_information: String?

          attr_accessor transaction_identification: String

          attr_accessor transfer_id: String

          def initialize: (
            amount: Integer,
            creditor_name: String,
            currency: Increase::Transaction::Source::InboundRealTimePaymentsTransferConfirmation::currency,
            debtor_account_number: String,
            debtor_name: String,
            debtor_routing_number: String,
            remittance_information: String?,
            transaction_identification: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::InboundRealTimePaymentsTransferConfirmation::currency]
          end
        end

        type inbound_real_time_payments_transfer_decline =
          {
            amount: Integer,
            creditor_name: String,
            currency: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::currency,
            debtor_account_number: String,
            debtor_name: String,
            debtor_routing_number: String,
            reason: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::reason,
            remittance_information: String?,
            transaction_identification: String,
            transfer_id: String
          }

        class InboundRealTimePaymentsTransferDecline < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor creditor_name: String

          attr_accessor currency: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::currency

          attr_accessor debtor_account_number: String

          attr_accessor debtor_name: String

          attr_accessor debtor_routing_number: String

          attr_accessor reason: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::reason

          attr_accessor remittance_information: String?

          attr_accessor transaction_identification: String

          attr_accessor transfer_id: String

          def initialize: (
            amount: Integer,
            creditor_name: String,
            currency: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::currency,
            debtor_account_number: String,
            debtor_name: String,
            debtor_routing_number: String,
            reason: Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::reason,
            remittance_information: String?,
            transaction_identification: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::currency]
          end

          type reason =
            :account_number_canceled
            | :account_number_disabled
            | :account_restricted
            | :group_locked
            | :entity_not_active
            | :real_time_payments_not_enabled

          module Reason
            extend Increase::Internal::Type::Enum

            # The account number is canceled.
            ACCOUNT_NUMBER_CANCELED: :account_number_canceled

            # The account number is disabled.
            ACCOUNT_NUMBER_DISABLED: :account_number_disabled

            # Your account is restricted.
            ACCOUNT_RESTRICTED: :account_restricted

            # Your account is inactive.
            GROUP_LOCKED: :group_locked

            # The account's entity is not active.
            ENTITY_NOT_ACTIVE: :entity_not_active

            # Your account is not enabled to receive Real-Time Payments transfers.
            REAL_TIME_PAYMENTS_NOT_ENABLED: :real_time_payments_not_enabled

            def self?.values: -> ::Array[Increase::Transaction::Source::InboundRealTimePaymentsTransferDecline::reason]
          end
        end

        type inbound_wire_reversal =
          {
            amount: Integer,
            created_at: Time,
            description: String,
            financial_institution_to_financial_institution_information: String?,
            input_cycle_date: Date,
            input_message_accountability_data: String,
            input_sequence_number: String,
            input_source: String,
            originator_routing_number: String?,
            previous_message_input_cycle_date: Date,
            previous_message_input_message_accountability_data: String,
            previous_message_input_sequence_number: String,
            previous_message_input_source: String,
            receiver_financial_institution_information: String?,
            sender_reference: String?,
            transaction_id: String,
            wire_transfer_id: String
          }

        class InboundWireReversal < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor created_at: Time

          attr_accessor description: String

          attr_accessor financial_institution_to_financial_institution_information: String?

          attr_accessor input_cycle_date: Date

          attr_accessor input_message_accountability_data: String

          attr_accessor input_sequence_number: String

          attr_accessor input_source: String

          attr_accessor originator_routing_number: String?

          attr_accessor previous_message_input_cycle_date: Date

          attr_accessor previous_message_input_message_accountability_data: String

          attr_accessor previous_message_input_sequence_number: String

          attr_accessor previous_message_input_source: String

          attr_accessor receiver_financial_institution_information: String?

          attr_accessor sender_reference: String?

          attr_accessor transaction_id: String

          attr_accessor wire_transfer_id: String

          def initialize: (
            amount: Integer,
            created_at: Time,
            description: String,
            financial_institution_to_financial_institution_information: String?,
            input_cycle_date: Date,
            input_message_accountability_data: String,
            input_sequence_number: String,
            input_source: String,
            originator_routing_number: String?,
            previous_message_input_cycle_date: Date,
            previous_message_input_message_accountability_data: String,
            previous_message_input_sequence_number: String,
            previous_message_input_source: String,
            receiver_financial_institution_information: String?,
            sender_reference: String?,
            transaction_id: String,
            wire_transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type inbound_wire_transfer =
          {
            amount: Integer,
            :beneficiary_address_line1 => String?,
            :beneficiary_address_line2 => String?,
            :beneficiary_address_line3 => String?,
            beneficiary_name: String?,
            beneficiary_reference: String?,
            description: String,
            input_message_accountability_data: String?,
            :originator_address_line1 => String?,
            :originator_address_line2 => String?,
            :originator_address_line3 => String?,
            originator_name: String?,
            originator_routing_number: String?,
            originator_to_beneficiary_information: String?,
            :originator_to_beneficiary_information_line1 => String?,
            :originator_to_beneficiary_information_line2 => String?,
            :originator_to_beneficiary_information_line3 => String?,
            :originator_to_beneficiary_information_line4 => String?,
            transfer_id: String
          }

        class InboundWireTransfer < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor beneficiary_address_line1: String?

          attr_accessor beneficiary_address_line2: String?

          attr_accessor beneficiary_address_line3: String?

          attr_accessor beneficiary_name: String?

          attr_accessor beneficiary_reference: String?

          attr_accessor description: String

          attr_accessor input_message_accountability_data: String?

          attr_accessor originator_address_line1: String?

          attr_accessor originator_address_line2: String?

          attr_accessor originator_address_line3: String?

          attr_accessor originator_name: String?

          attr_accessor originator_routing_number: String?

          attr_accessor originator_to_beneficiary_information: String?

          attr_accessor originator_to_beneficiary_information_line1: String?

          attr_accessor originator_to_beneficiary_information_line2: String?

          attr_accessor originator_to_beneficiary_information_line3: String?

          attr_accessor originator_to_beneficiary_information_line4: String?

          attr_accessor transfer_id: String

          def initialize: (
            amount: Integer,
            beneficiary_address_line1: String?,
            beneficiary_address_line2: String?,
            beneficiary_address_line3: String?,
            beneficiary_name: String?,
            beneficiary_reference: String?,
            description: String,
            input_message_accountability_data: String?,
            originator_address_line1: String?,
            originator_address_line2: String?,
            originator_address_line3: String?,
            originator_name: String?,
            originator_routing_number: String?,
            originator_to_beneficiary_information: String?,
            originator_to_beneficiary_information_line1: String?,
            originator_to_beneficiary_information_line2: String?,
            originator_to_beneficiary_information_line3: String?,
            originator_to_beneficiary_information_line4: String?,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type inbound_wire_transfer_reversal =
          { inbound_wire_transfer_id: String }

        class InboundWireTransferReversal < Increase::Internal::Type::BaseModel
          attr_accessor inbound_wire_transfer_id: String

          def initialize: (inbound_wire_transfer_id: String) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type interest_payment =
          {
            accrued_on_account_id: String,
            amount: Integer,
            currency: Increase::Transaction::Source::InterestPayment::currency,
            period_end: Time,
            period_start: Time
          }

        class InterestPayment < Increase::Internal::Type::BaseModel
          attr_accessor accrued_on_account_id: String

          attr_accessor amount: Integer

          attr_accessor currency: Increase::Transaction::Source::InterestPayment::currency

          attr_accessor period_end: Time

          attr_accessor period_start: Time

          def initialize: (
            accrued_on_account_id: String,
            amount: Integer,
            currency: Increase::Transaction::Source::InterestPayment::currency,
            period_end: Time,
            period_start: Time
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::InterestPayment::currency]
          end
        end

        type internal_source =
          {
            amount: Integer,
            currency: Increase::Transaction::Source::InternalSource::currency,
            reason: Increase::Transaction::Source::InternalSource::reason
          }

        class InternalSource < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor currency: Increase::Transaction::Source::InternalSource::currency

          attr_accessor reason: Increase::Transaction::Source::InternalSource::reason

          def initialize: (
            amount: Integer,
            currency: Increase::Transaction::Source::InternalSource::currency,
            reason: Increase::Transaction::Source::InternalSource::reason
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Transaction::Source::InternalSource::currency]
          end

          type reason =
            :account_closure
            | :bank_drawn_check
            | :bank_drawn_check_credit
            | :bank_migration
            | :check_adjustment
            | :collection_payment
            | :collection_receivable
            | :empyreal_adjustment
            | :error
            | :error_correction
            | :fees
            | :interest
            | :negative_balance_forgiveness
            | :sample_funds
            | :sample_funds_return

          module Reason
            extend Increase::Internal::Type::Enum

            # Account closure
            ACCOUNT_CLOSURE: :account_closure

            # Bank-drawn check
            BANK_DRAWN_CHECK: :bank_drawn_check

            # Bank-drawn check credit
            BANK_DRAWN_CHECK_CREDIT: :bank_drawn_check_credit

            # Bank migration
            BANK_MIGRATION: :bank_migration

            # Check adjustment
            CHECK_ADJUSTMENT: :check_adjustment

            # Collection payment
            COLLECTION_PAYMENT: :collection_payment

            # Collection receivable
            COLLECTION_RECEIVABLE: :collection_receivable

            # Empyreal adjustment
            EMPYREAL_ADJUSTMENT: :empyreal_adjustment

            # Error
            ERROR: :error

            # Error correction
            ERROR_CORRECTION: :error_correction

            # Fees
            FEES: :fees

            # Interest
            INTEREST: :interest

            # Negative balance forgiveness
            NEGATIVE_BALANCE_FORGIVENESS: :negative_balance_forgiveness

            # Sample funds
            SAMPLE_FUNDS: :sample_funds

            # Sample funds return
            SAMPLE_FUNDS_RETURN: :sample_funds_return

            def self?.values: -> ::Array[Increase::Transaction::Source::InternalSource::reason]
          end
        end

        type real_time_payments_transfer_acknowledgement =
          {
            amount: Integer,
            destination_account_number: String,
            destination_routing_number: String,
            remittance_information: String,
            transfer_id: String
          }

        class RealTimePaymentsTransferAcknowledgement < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor destination_account_number: String

          attr_accessor destination_routing_number: String

          attr_accessor remittance_information: String

          attr_accessor transfer_id: String

          def initialize: (
            amount: Integer,
            destination_account_number: String,
            destination_routing_number: String,
            remittance_information: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type sample_funds = { originator: String }

        class SampleFunds < Increase::Internal::Type::BaseModel
          attr_accessor originator: String

          def initialize: (originator: String) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type swift_transfer_intention = { transfer_id: String }

        class SwiftTransferIntention < Increase::Internal::Type::BaseModel
          attr_accessor transfer_id: String

          def initialize: (transfer_id: String) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type wire_transfer_intention =
          {
            account_number: String,
            amount: Integer,
            message_to_recipient: String,
            routing_number: String,
            transfer_id: String
          }

        class WireTransferIntention < Increase::Internal::Type::BaseModel
          attr_accessor account_number: String

          attr_accessor amount: Integer

          attr_accessor message_to_recipient: String

          attr_accessor routing_number: String

          attr_accessor transfer_id: String

          def initialize: (
            account_number: String,
            amount: Integer,
            message_to_recipient: String,
            routing_number: String,
            transfer_id: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end
      end

      type type_ = :transaction

      module Type
        extend Increase::Internal::Type::Enum

        TRANSACTION: :transaction

        def self?.values: -> ::Array[Increase::Transaction::type_]
      end
    end
  end
end
