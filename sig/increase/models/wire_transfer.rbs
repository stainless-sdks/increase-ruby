module Increase
  module Models
    type wire_transfer =
      {
        id: String,
        account_id: String,
        account_number: String,
        amount: Integer,
        approval: Increase::Models::WireTransfer::Approval?,
        :beneficiary_address_line1 => String?,
        :beneficiary_address_line2 => String?,
        :beneficiary_address_line3 => String?,
        beneficiary_name: String?,
        cancellation: Increase::Models::WireTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::Models::WireTransfer::CreatedBy?,
        currency: Increase::Models::WireTransfer::currency,
        external_account_id: String?,
        idempotency_key: String?,
        message_to_recipient: String?,
        network: Increase::Models::WireTransfer::network,
        :originator_address_line1 => String?,
        :originator_address_line2 => String?,
        :originator_address_line3 => String?,
        originator_name: String?,
        pending_transaction_id: String?,
        reversal: Increase::Models::WireTransfer::Reversal?,
        routing_number: String,
        source_account_number_id: String?,
        status: Increase::Models::WireTransfer::status,
        submission: Increase::Models::WireTransfer::Submission?,
        transaction_id: String?,
        type: Increase::Models::WireTransfer::type_
      }

    class WireTransfer < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor account_number: String

      attr_accessor amount: Integer

      attr_accessor approval: Increase::Models::WireTransfer::Approval?

      attr_accessor beneficiary_address_line1: String?

      attr_accessor beneficiary_address_line2: String?

      attr_accessor beneficiary_address_line3: String?

      attr_accessor beneficiary_name: String?

      attr_accessor cancellation: Increase::Models::WireTransfer::Cancellation?

      attr_accessor created_at: Time

      attr_accessor created_by: Increase::Models::WireTransfer::CreatedBy?

      attr_accessor currency: Increase::Models::WireTransfer::currency

      attr_accessor external_account_id: String?

      attr_accessor idempotency_key: String?

      attr_accessor message_to_recipient: String?

      attr_accessor network: Increase::Models::WireTransfer::network

      attr_accessor originator_address_line1: String?

      attr_accessor originator_address_line2: String?

      attr_accessor originator_address_line3: String?

      attr_accessor originator_name: String?

      attr_accessor pending_transaction_id: String?

      attr_accessor reversal: Increase::Models::WireTransfer::Reversal?

      attr_accessor routing_number: String

      attr_accessor source_account_number_id: String?

      attr_accessor status: Increase::Models::WireTransfer::status

      attr_accessor submission: Increase::Models::WireTransfer::Submission?

      attr_accessor transaction_id: String?

      attr_accessor type: Increase::Models::WireTransfer::type_

      def initialize: (
        id: String,
        account_id: String,
        account_number: String,
        amount: Integer,
        approval: Increase::Models::WireTransfer::Approval?,
        beneficiary_address_line1: String?,
        beneficiary_address_line2: String?,
        beneficiary_address_line3: String?,
        beneficiary_name: String?,
        cancellation: Increase::Models::WireTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::Models::WireTransfer::CreatedBy?,
        currency: Increase::Models::WireTransfer::currency,
        external_account_id: String?,
        idempotency_key: String?,
        message_to_recipient: String?,
        network: Increase::Models::WireTransfer::network,
        originator_address_line1: String?,
        originator_address_line2: String?,
        originator_address_line3: String?,
        originator_name: String?,
        pending_transaction_id: String?,
        reversal: Increase::Models::WireTransfer::Reversal?,
        routing_number: String,
        source_account_number_id: String?,
        status: Increase::Models::WireTransfer::status,
        submission: Increase::Models::WireTransfer::Submission?,
        transaction_id: String?,
        type: Increase::Models::WireTransfer::type_
      ) -> void

      def to_hash: -> Increase::Models::wire_transfer

      type approval = { approved_at: Time, approved_by: String? }

      class Approval < Increase::Internal::Type::BaseModel
        attr_accessor approved_at: Time

        attr_accessor approved_by: String?

        def initialize: (approved_at: Time, approved_by: String?) -> void

        def to_hash: -> Increase::Models::WireTransfer::approval
      end

      type cancellation = { canceled_at: Time, canceled_by: String? }

      class Cancellation < Increase::Internal::Type::BaseModel
        attr_accessor canceled_at: Time

        attr_accessor canceled_by: String?

        def initialize: (canceled_at: Time, canceled_by: String?) -> void

        def to_hash: -> Increase::Models::WireTransfer::cancellation
      end

      type created_by =
        {
          api_key: Increase::Models::WireTransfer::CreatedBy::APIKey?,
          category: Increase::Models::WireTransfer::CreatedBy::category,
          oauth_application: Increase::Models::WireTransfer::CreatedBy::OAuthApplication?,
          user: Increase::Models::WireTransfer::CreatedBy::User?
        }

      class CreatedBy < Increase::Internal::Type::BaseModel
        attr_accessor api_key: Increase::Models::WireTransfer::CreatedBy::APIKey?

        attr_accessor category: Increase::Models::WireTransfer::CreatedBy::category

        attr_accessor oauth_application: Increase::Models::WireTransfer::CreatedBy::OAuthApplication?

        attr_accessor user: Increase::Models::WireTransfer::CreatedBy::User?

        def initialize: (
          api_key: Increase::Models::WireTransfer::CreatedBy::APIKey?,
          category: Increase::Models::WireTransfer::CreatedBy::category,
          oauth_application: Increase::Models::WireTransfer::CreatedBy::OAuthApplication?,
          user: Increase::Models::WireTransfer::CreatedBy::User?
        ) -> void

        def to_hash: -> Increase::Models::WireTransfer::created_by

        type api_key = { description: String? }

        class APIKey < Increase::Internal::Type::BaseModel
          attr_accessor description: String?

          def initialize: (description: String?) -> void

          def to_hash: -> Increase::Models::WireTransfer::CreatedBy::api_key
        end

        type category = :api_key | :oauth_application | :user

        module Category
          extend Increase::Internal::Type::Enum

          # An API key. Details will be under the `api_key` object.
          API_KEY: :api_key

          # An OAuth application you connected to Increase. Details will be under the `oauth_application` object.
          OAUTH_APPLICATION: :oauth_application

          # A User in the Increase dashboard. Details will be under the `user` object.
          USER: :user

          def self?.values: -> ::Array[Increase::Models::WireTransfer::CreatedBy::category]
        end

        type oauth_application = { name: String }

        class OAuthApplication < Increase::Internal::Type::BaseModel
          attr_accessor name: String

          def initialize: (name: String) -> void

          def to_hash: -> Increase::Models::WireTransfer::CreatedBy::oauth_application
        end

        type user = { email: String }

        class User < Increase::Internal::Type::BaseModel
          attr_accessor email: String

          def initialize: (email: String) -> void

          def to_hash: -> Increase::Models::WireTransfer::CreatedBy::user
        end
      end

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: -> ::Array[Increase::Models::WireTransfer::currency]
      end

      type network = :wire

      module Network
        extend Increase::Internal::Type::Enum

        WIRE: :wire

        def self?.values: -> ::Array[Increase::Models::WireTransfer::network]
      end

      type reversal =
        {
          amount: Integer,
          created_at: Time,
          description: String,
          financial_institution_to_financial_institution_information: String?,
          input_cycle_date: Date,
          input_message_accountability_data: String,
          input_sequence_number: String,
          input_source: String,
          originator_routing_number: String?,
          previous_message_input_cycle_date: Date,
          previous_message_input_message_accountability_data: String,
          previous_message_input_sequence_number: String,
          previous_message_input_source: String,
          receiver_financial_institution_information: String?,
          sender_reference: String?,
          transaction_id: String,
          wire_transfer_id: String
        }

      class Reversal < Increase::Internal::Type::BaseModel
        attr_accessor amount: Integer

        attr_accessor created_at: Time

        attr_accessor description: String

        attr_accessor financial_institution_to_financial_institution_information: String?

        attr_accessor input_cycle_date: Date

        attr_accessor input_message_accountability_data: String

        attr_accessor input_sequence_number: String

        attr_accessor input_source: String

        attr_accessor originator_routing_number: String?

        attr_accessor previous_message_input_cycle_date: Date

        attr_accessor previous_message_input_message_accountability_data: String

        attr_accessor previous_message_input_sequence_number: String

        attr_accessor previous_message_input_source: String

        attr_accessor receiver_financial_institution_information: String?

        attr_accessor sender_reference: String?

        attr_accessor transaction_id: String

        attr_accessor wire_transfer_id: String

        def initialize: (
          amount: Integer,
          created_at: Time,
          description: String,
          financial_institution_to_financial_institution_information: String?,
          input_cycle_date: Date,
          input_message_accountability_data: String,
          input_sequence_number: String,
          input_source: String,
          originator_routing_number: String?,
          previous_message_input_cycle_date: Date,
          previous_message_input_message_accountability_data: String,
          previous_message_input_sequence_number: String,
          previous_message_input_source: String,
          receiver_financial_institution_information: String?,
          sender_reference: String?,
          transaction_id: String,
          wire_transfer_id: String
        ) -> void

        def to_hash: -> Increase::Models::WireTransfer::reversal
      end

      type status =
        :pending_approval
        | :canceled
        | :pending_reviewing
        | :rejected
        | :requires_attention
        | :pending_creating
        | :reversed
        | :submitted
        | :complete

      module Status
        extend Increase::Internal::Type::Enum

        # The transfer is pending approval.
        PENDING_APPROVAL: :pending_approval

        # The transfer has been canceled.
        CANCELED: :canceled

        # The transfer is pending review by Increase.
        PENDING_REVIEWING: :pending_reviewing

        # The transfer has been rejected by Increase.
        REJECTED: :rejected

        # The transfer requires attention from an Increase operator.
        REQUIRES_ATTENTION: :requires_attention

        # The transfer is pending creation.
        PENDING_CREATING: :pending_creating

        # The transfer has been reversed.
        REVERSED: :reversed

        # The transfer has been submitted to Fedwire.
        SUBMITTED: :submitted

        # The transfer has been acknowledged by Fedwire and can be considered complete.
        COMPLETE: :complete

        def self?.values: -> ::Array[Increase::Models::WireTransfer::status]
      end

      type submission =
        { input_message_accountability_data: String, submitted_at: Time }

      class Submission < Increase::Internal::Type::BaseModel
        attr_accessor input_message_accountability_data: String

        attr_accessor submitted_at: Time

        def initialize: (
          input_message_accountability_data: String,
          submitted_at: Time
        ) -> void

        def to_hash: -> Increase::Models::WireTransfer::submission
      end

      type type_ = :wire_transfer

      module Type
        extend Increase::Internal::Type::Enum

        WIRE_TRANSFER: :wire_transfer

        def self?.values: -> ::Array[Increase::Models::WireTransfer::type_]
      end
    end
  end
end
