module Increase
  module Models
    type pending_transaction_list_params =
      {
        account_id: String,
        category: Increase::Models::PendingTransactionListParams::Category,
        created_at: Increase::Models::PendingTransactionListParams::CreatedAt,
        cursor: String,
        limit: Integer,
        route_id: String,
        status: Increase::Models::PendingTransactionListParams::Status
      }
      & Increase::request_parameters

    class PendingTransactionListParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_reader account_id: String?

      def account_id=: (String) -> String

      attr_reader category: Increase::Models::PendingTransactionListParams::Category?

      def category=: (
        Increase::Models::PendingTransactionListParams::Category
      ) -> Increase::Models::PendingTransactionListParams::Category

      attr_reader created_at: Increase::Models::PendingTransactionListParams::CreatedAt?

      def created_at=: (
        Increase::Models::PendingTransactionListParams::CreatedAt
      ) -> Increase::Models::PendingTransactionListParams::CreatedAt

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader route_id: String?

      def route_id=: (String) -> String

      attr_reader status: Increase::Models::PendingTransactionListParams::Status?

      def status=: (
        Increase::Models::PendingTransactionListParams::Status
      ) -> Increase::Models::PendingTransactionListParams::Status

      def initialize:
        (
          ?account_id: String,
          ?category: Increase::Models::PendingTransactionListParams::Category,
          ?created_at: Increase::Models::PendingTransactionListParams::CreatedAt,
          ?cursor: String,
          ?limit: Integer,
          ?route_id: String,
          ?status: Increase::Models::PendingTransactionListParams::Status,
          ?request_options: Increase::request_opts
        ) -> void
        | (
          ?Increase::Models::pending_transaction_list_params
          | Increase::BaseModel data
        ) -> void

      def to_hash: -> Increase::Models::pending_transaction_list_params

      type category =
        {
          in_: ::Array[Increase::Models::PendingTransactionListParams::Category::in_]
        }

      class Category < Increase::BaseModel
        attr_reader in_: ::Array[Increase::Models::PendingTransactionListParams::Category::in_]?

        def in_=: (
          ::Array[Increase::Models::PendingTransactionListParams::Category::in_]
        ) -> ::Array[Increase::Models::PendingTransactionListParams::Category::in_]

        def initialize:
          (
            ?in_: ::Array[Increase::Models::PendingTransactionListParams::Category::in_]
          ) -> void
          | (
            ?Increase::Models::PendingTransactionListParams::category
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::PendingTransactionListParams::category

        type in_ =
          :account_transfer_instruction
          | :ach_transfer_instruction
          | :card_authorization
          | :check_deposit_instruction
          | :check_transfer_instruction
          | :inbound_funds_hold
          | :real_time_payments_transfer_instruction
          | :wire_transfer_instruction
          | :inbound_wire_transfer_reversal
          | :other

        class In < Increase::Enum
          # Account Transfer Instruction: details will be under the `account_transfer_instruction` object.
          ACCOUNT_TRANSFER_INSTRUCTION: :account_transfer_instruction

          # ACH Transfer Instruction: details will be under the `ach_transfer_instruction` object.
          ACH_TRANSFER_INSTRUCTION: :ach_transfer_instruction

          # Card Authorization: details will be under the `card_authorization` object.
          CARD_AUTHORIZATION: :card_authorization

          # Check Deposit Instruction: details will be under the `check_deposit_instruction` object.
          CHECK_DEPOSIT_INSTRUCTION: :check_deposit_instruction

          # Check Transfer Instruction: details will be under the `check_transfer_instruction` object.
          CHECK_TRANSFER_INSTRUCTION: :check_transfer_instruction

          # Inbound Funds Hold: details will be under the `inbound_funds_hold` object.
          INBOUND_FUNDS_HOLD: :inbound_funds_hold

          # Real-Time Payments Transfer Instruction: details will be under the `real_time_payments_transfer_instruction` object.
          REAL_TIME_PAYMENTS_TRANSFER_INSTRUCTION: :real_time_payments_transfer_instruction

          # Wire Transfer Instruction: details will be under the `wire_transfer_instruction` object.
          WIRE_TRANSFER_INSTRUCTION: :wire_transfer_instruction

          # Inbound Wire Transfer Reversal: details will be under the `inbound_wire_transfer_reversal` object.
          INBOUND_WIRE_TRANSFER_REVERSAL: :inbound_wire_transfer_reversal

          # The Pending Transaction was made for an undocumented or deprecated reason.
          OTHER: :other

          def self.values: -> ::Array[Increase::Models::PendingTransactionListParams::Category::in_]
        end
      end

      type created_at =
        { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

      class CreatedAt < Increase::BaseModel
        attr_reader after: Time?

        def after=: (Time) -> Time

        attr_reader before: Time?

        def before=: (Time) -> Time

        attr_reader on_or_after: Time?

        def on_or_after=: (Time) -> Time

        attr_reader on_or_before: Time?

        def on_or_before=: (Time) -> Time

        def initialize:
          (
            ?after: Time,
            ?before: Time,
            ?on_or_after: Time,
            ?on_or_before: Time
          ) -> void
          | (
            ?Increase::Models::PendingTransactionListParams::created_at
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::PendingTransactionListParams::created_at
      end

      type status =
        {
          in_: ::Array[Increase::Models::PendingTransactionListParams::Status::in_]
        }

      class Status < Increase::BaseModel
        attr_reader in_: ::Array[Increase::Models::PendingTransactionListParams::Status::in_]?

        def in_=: (
          ::Array[Increase::Models::PendingTransactionListParams::Status::in_]
        ) -> ::Array[Increase::Models::PendingTransactionListParams::Status::in_]

        def initialize:
          (
            ?in_: ::Array[Increase::Models::PendingTransactionListParams::Status::in_]
          ) -> void
          | (
            ?Increase::Models::PendingTransactionListParams::status
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::PendingTransactionListParams::status

        type in_ = :pending | :complete

        class In < Increase::Enum
          # The Pending Transaction is still awaiting confirmation.
          PENDING: :pending

          # The Pending Transaction is confirmed. An associated Transaction exists for this object. The Pending Transaction will no longer count against your balance and can generally be hidden from UIs, etc.
          COMPLETE: :complete

          def self.values: -> ::Array[Increase::Models::PendingTransactionListParams::Status::in_]
        end
      end
    end
  end
end
