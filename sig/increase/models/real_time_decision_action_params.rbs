module Increase
  module Models
    type real_time_decision_action_params =
      {
        card_authentication: Increase::RealTimeDecisionActionParams::CardAuthentication,
        card_authentication_challenge: Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge,
        card_authorization: Increase::RealTimeDecisionActionParams::CardAuthorization,
        digital_wallet_authentication: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication,
        digital_wallet_token: Increase::RealTimeDecisionActionParams::DigitalWalletToken
      }
      & Increase::Internal::Type::request_parameters

    class RealTimeDecisionActionParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_reader card_authentication: Increase::RealTimeDecisionActionParams::CardAuthentication?

      def card_authentication=: (
        Increase::RealTimeDecisionActionParams::CardAuthentication
      ) -> Increase::RealTimeDecisionActionParams::CardAuthentication

      attr_reader card_authentication_challenge: Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge?

      def card_authentication_challenge=: (
        Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge
      ) -> Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge

      attr_reader card_authorization: Increase::RealTimeDecisionActionParams::CardAuthorization?

      def card_authorization=: (
        Increase::RealTimeDecisionActionParams::CardAuthorization
      ) -> Increase::RealTimeDecisionActionParams::CardAuthorization

      attr_reader digital_wallet_authentication: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication?

      def digital_wallet_authentication=: (
        Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication
      ) -> Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication

      attr_reader digital_wallet_token: Increase::RealTimeDecisionActionParams::DigitalWalletToken?

      def digital_wallet_token=: (
        Increase::RealTimeDecisionActionParams::DigitalWalletToken
      ) -> Increase::RealTimeDecisionActionParams::DigitalWalletToken

      def initialize: (
        ?card_authentication: Increase::RealTimeDecisionActionParams::CardAuthentication,
        ?card_authentication_challenge: Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge,
        ?card_authorization: Increase::RealTimeDecisionActionParams::CardAuthorization,
        ?digital_wallet_authentication: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication,
        ?digital_wallet_token: Increase::RealTimeDecisionActionParams::DigitalWalletToken,
        ?request_options: Increase::request_opts
      ) -> void

      type card_authentication =
        {
          decision: Increase::RealTimeDecisionActionParams::CardAuthentication::decision
        }

      class CardAuthentication < Increase::Internal::Type::BaseModel
        attr_accessor decision: Increase::RealTimeDecisionActionParams::CardAuthentication::decision

        def initialize: (
          decision: Increase::RealTimeDecisionActionParams::CardAuthentication::decision
        ) -> void

        type decision = :approve | :challenge | :deny

        module Decision
          extend Increase::Internal::Type::Enum

          # Approve the authentication attempt without triggering a challenge.
          APPROVE: :approve

          # Request further validation before approving the authentication attempt.
          CHALLENGE: :challenge

          # Deny the authentication attempt.
          DENY: :deny

          def self?.values: -> ::Array[Increase::RealTimeDecisionActionParams::CardAuthentication::decision]
        end
      end

      type card_authentication_challenge =
        {
          result: Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge::result
        }

      class CardAuthenticationChallenge < Increase::Internal::Type::BaseModel
        attr_accessor result: Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge::result

        def initialize: (
          result: Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge::result
        ) -> void

        type result = :success | :failure

        module Result
          extend Increase::Internal::Type::Enum

          # Your application successfully delivered the one-time code to the cardholder.
          SUCCESS: :success

          # Your application was unable to deliver the one-time code to the cardholder.
          FAILURE: :failure

          def self?.values: -> ::Array[Increase::RealTimeDecisionActionParams::CardAuthenticationChallenge::result]
        end
      end

      type card_authorization =
        {
          decision: Increase::RealTimeDecisionActionParams::CardAuthorization::decision,
          decline_reason: Increase::RealTimeDecisionActionParams::CardAuthorization::decline_reason
        }

      class CardAuthorization < Increase::Internal::Type::BaseModel
        attr_accessor decision: Increase::RealTimeDecisionActionParams::CardAuthorization::decision

        attr_reader decline_reason: Increase::RealTimeDecisionActionParams::CardAuthorization::decline_reason?

        def decline_reason=: (
          Increase::RealTimeDecisionActionParams::CardAuthorization::decline_reason
        ) -> Increase::RealTimeDecisionActionParams::CardAuthorization::decline_reason

        def initialize: (
          decision: Increase::RealTimeDecisionActionParams::CardAuthorization::decision,
          ?decline_reason: Increase::RealTimeDecisionActionParams::CardAuthorization::decline_reason
        ) -> void

        type decision = :approve | :decline

        module Decision
          extend Increase::Internal::Type::Enum

          # Approve the authorization.
          APPROVE: :approve

          # Decline the authorization.
          DECLINE: :decline

          def self?.values: -> ::Array[Increase::RealTimeDecisionActionParams::CardAuthorization::decision]
        end

        type decline_reason =
          :insufficient_funds
          | :transaction_never_allowed
          | :exceeds_approval_limit
          | :card_temporarily_disabled
          | :suspected_fraud
          | :other

        module DeclineReason
          extend Increase::Internal::Type::Enum

          # The cardholder does not have sufficient funds to cover the transaction. The merchant may attempt to process the transaction again.
          INSUFFICIENT_FUNDS: :insufficient_funds

          # This type of transaction is not allowed for this card. This transaction should not be retried.
          TRANSACTION_NEVER_ALLOWED: :transaction_never_allowed

          # The transaction amount exceeds the cardholder's approval limit. The merchant may attempt to process the transaction again.
          EXCEEDS_APPROVAL_LIMIT: :exceeds_approval_limit

          # The card has been temporarily disabled or not yet activated. The merchant may attempt to process the transaction again.
          CARD_TEMPORARILY_DISABLED: :card_temporarily_disabled

          # The transaction is suspected to be fraudulent. The merchant may attempt to process the transaction again.
          SUSPECTED_FRAUD: :suspected_fraud

          # The transaction was declined for another reason. The merchant may attempt to process the transaction again. This should be used sparingly.
          OTHER: :other

          def self?.values: -> ::Array[Increase::RealTimeDecisionActionParams::CardAuthorization::decline_reason]
        end
      end

      type digital_wallet_authentication =
        {
          result: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::result,
          success: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::Success
        }

      class DigitalWalletAuthentication < Increase::Internal::Type::BaseModel
        attr_accessor result: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::result

        attr_reader success: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::Success?

        def success=: (
          Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::Success
        ) -> Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::Success

        def initialize: (
          result: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::result,
          ?success: Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::Success
        ) -> void

        type result = :success | :failure

        module Result
          extend Increase::Internal::Type::Enum

          # Your application successfully delivered the one-time passcode to the cardholder.
          SUCCESS: :success

          # Your application failed to deliver the one-time passcode to the cardholder.
          FAILURE: :failure

          def self?.values: -> ::Array[Increase::RealTimeDecisionActionParams::DigitalWalletAuthentication::result]
        end

        type success = { email: String, phone: String }

        class Success < Increase::Internal::Type::BaseModel
          attr_reader email: String?

          def email=: (String) -> String

          attr_reader phone: String?

          def phone=: (String) -> String

          def initialize: (?email: String, ?phone: String) -> void
        end
      end

      type digital_wallet_token =
        {
          approval: Increase::RealTimeDecisionActionParams::DigitalWalletToken::Approval,
          decline: Increase::RealTimeDecisionActionParams::DigitalWalletToken::Decline
        }

      class DigitalWalletToken < Increase::Internal::Type::BaseModel
        attr_reader approval: Increase::RealTimeDecisionActionParams::DigitalWalletToken::Approval?

        def approval=: (
          Increase::RealTimeDecisionActionParams::DigitalWalletToken::Approval
        ) -> Increase::RealTimeDecisionActionParams::DigitalWalletToken::Approval

        attr_reader decline: Increase::RealTimeDecisionActionParams::DigitalWalletToken::Decline?

        def decline=: (
          Increase::RealTimeDecisionActionParams::DigitalWalletToken::Decline
        ) -> Increase::RealTimeDecisionActionParams::DigitalWalletToken::Decline

        def initialize: (
          ?approval: Increase::RealTimeDecisionActionParams::DigitalWalletToken::Approval,
          ?decline: Increase::RealTimeDecisionActionParams::DigitalWalletToken::Decline
        ) -> void

        type approval = { email: String, phone: String }

        class Approval < Increase::Internal::Type::BaseModel
          attr_reader email: String?

          def email=: (String) -> String

          attr_reader phone: String?

          def phone=: (String) -> String

          def initialize: (?email: String, ?phone: String) -> void
        end

        type decline = { reason: String }

        class Decline < Increase::Internal::Type::BaseModel
          attr_reader reason: String?

          def reason=: (String) -> String

          def initialize: (?reason: String) -> void
        end
      end
    end
  end
end
