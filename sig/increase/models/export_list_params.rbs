module Increase
  module Models
    type export_list_params =
      {
        category: Increase::ExportListParams::Category,
        created_at: Increase::ExportListParams::CreatedAt,
        cursor: String,
        idempotency_key: String,
        limit: Integer,
        status: Increase::ExportListParams::Status
      }
      & Increase::Internal::Type::request_parameters

    class ExportListParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_reader category: Increase::ExportListParams::Category?

      def category=: (
        Increase::ExportListParams::Category
      ) -> Increase::ExportListParams::Category

      attr_reader created_at: Increase::ExportListParams::CreatedAt?

      def created_at=: (
        Increase::ExportListParams::CreatedAt
      ) -> Increase::ExportListParams::CreatedAt

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader idempotency_key: String?

      def idempotency_key=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader status: Increase::ExportListParams::Status?

      def status=: (
        Increase::ExportListParams::Status
      ) -> Increase::ExportListParams::Status

      def initialize: (
        ?category: Increase::ExportListParams::Category,
        ?created_at: Increase::ExportListParams::CreatedAt,
        ?cursor: String,
        ?idempotency_key: String,
        ?limit: Integer,
        ?status: Increase::ExportListParams::Status,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> {
        category: Increase::ExportListParams::Category,
        created_at: Increase::ExportListParams::CreatedAt,
        cursor: String,
        idempotency_key: String,
        limit: Integer,
        status: Increase::ExportListParams::Status,
        request_options: Increase::RequestOptions
      }

      type category =
        { in_: ::Array[Increase::Models::ExportListParams::Category::in_] }

      class Category < Increase::Internal::Type::BaseModel
        attr_reader in_: ::Array[Increase::Models::ExportListParams::Category::in_]?

        def in_=: (
          ::Array[Increase::Models::ExportListParams::Category::in_]
        ) -> ::Array[Increase::Models::ExportListParams::Category::in_]

        def initialize: (
          ?in_: ::Array[Increase::Models::ExportListParams::Category::in_]
        ) -> void

        def to_hash: -> {
          in_: ::Array[Increase::Models::ExportListParams::Category::in_]
        }

        type in_ =
          :account_statement_ofx
          | :transaction_csv
          | :balance_csv
          | :bookkeeping_account_balance_csv
          | :entity_csv
          | :vendor_csv
          | :dashboard_table_csv

        module In
          extend Increase::Internal::Type::Enum

          # Export an Open Financial Exchange (OFX) file of transactions and balances for a given time range and Account.
          ACCOUNT_STATEMENT_OFX: :account_statement_ofx

          # Export a CSV of all transactions for a given time range.
          TRANSACTION_CSV: :transaction_csv

          # Export a CSV of account balances for the dates in a given range.
          BALANCE_CSV: :balance_csv

          # Export a CSV of bookkeeping account balances for the dates in a given range.
          BOOKKEEPING_ACCOUNT_BALANCE_CSV: :bookkeeping_account_balance_csv

          # Export a CSV of entities with a given status.
          ENTITY_CSV: :entity_csv

          # Export a CSV of vendors added to the third-party risk management dashboard.
          VENDOR_CSV: :vendor_csv

          # Certain dashboard tables are available as CSV exports. This export cannot be created via the API.
          DASHBOARD_TABLE_CSV: :dashboard_table_csv

          def self?.values: -> ::Array[Increase::Models::ExportListParams::Category::in_]
        end
      end

      type created_at =
        { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

      class CreatedAt < Increase::Internal::Type::BaseModel
        attr_reader after: Time?

        def after=: (Time) -> Time

        attr_reader before: Time?

        def before=: (Time) -> Time

        attr_reader on_or_after: Time?

        def on_or_after=: (Time) -> Time

        attr_reader on_or_before: Time?

        def on_or_before=: (Time) -> Time

        def initialize: (
          ?after: Time,
          ?before: Time,
          ?on_or_after: Time,
          ?on_or_before: Time
        ) -> void

        def to_hash: -> {
          after: Time,
          before: Time,
          on_or_after: Time,
          on_or_before: Time
        }
      end

      type status =
        { in_: ::Array[Increase::Models::ExportListParams::Status::in_] }

      class Status < Increase::Internal::Type::BaseModel
        attr_reader in_: ::Array[Increase::Models::ExportListParams::Status::in_]?

        def in_=: (
          ::Array[Increase::Models::ExportListParams::Status::in_]
        ) -> ::Array[Increase::Models::ExportListParams::Status::in_]

        def initialize: (
          ?in_: ::Array[Increase::Models::ExportListParams::Status::in_]
        ) -> void

        def to_hash: -> {
          in_: ::Array[Increase::Models::ExportListParams::Status::in_]
        }

        type in_ = :pending | :complete | :failed

        module In
          extend Increase::Internal::Type::Enum

          # Increase is generating the export.
          PENDING: :pending

          # The export has been successfully generated.
          COMPLETE: :complete

          # The export failed to generate. Increase will reach out to you to resolve the issue.
          FAILED: :failed

          def self?.values: -> ::Array[Increase::Models::ExportListParams::Status::in_]
        end
      end
    end
  end
end
