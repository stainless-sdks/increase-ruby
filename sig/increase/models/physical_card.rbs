module Increase
  module Models
    type physical_card = {
      id: String,
      card_id: String,
      cardholder: Increase::PhysicalCard::Cardholder,
      created_at: Time,
      idempotency_key: String?,
      physical_card_profile_id: String?,
      shipment: Increase::PhysicalCard::Shipment,
      status: Increase::Models::PhysicalCard::status,
      type: Increase::Models::PhysicalCard::type_
    }

    class PhysicalCard < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor card_id: String

      attr_accessor cardholder: Increase::PhysicalCard::Cardholder

      attr_accessor created_at: Time

      attr_accessor idempotency_key: String?

      attr_accessor physical_card_profile_id: String?

      attr_accessor shipment: Increase::PhysicalCard::Shipment

      attr_accessor status: Increase::Models::PhysicalCard::status

      attr_accessor type: Increase::Models::PhysicalCard::type_

      def initialize: (id: String, card_id: String, cardholder: Increase::PhysicalCard::Cardholder, created_at: Time, idempotency_key: String?, physical_card_profile_id: String?, shipment: Increase::PhysicalCard::Shipment, status: Increase::Models::PhysicalCard::status, type: Increase::Models::PhysicalCard::type_) -> void

      def to_hash: () -> {
        id: String,
        card_id: String,
        cardholder: Increase::PhysicalCard::Cardholder,
        created_at: Time,
        idempotency_key: String?,
        physical_card_profile_id: String?,
        shipment: Increase::PhysicalCard::Shipment,
        status: Increase::Models::PhysicalCard::status,
        type: Increase::Models::PhysicalCard::type_
      }

      type cardholder = {first_name: String, last_name: String}

      class Cardholder < Increase::Internal::Type::BaseModel
        attr_accessor first_name: String

        attr_accessor last_name: String

        def initialize: (first_name: String, last_name: String) -> void

        def to_hash: () -> {first_name: String, last_name: String}
      end

      type shipment = {
        address: Increase::PhysicalCard::Shipment::Address,
        method_: Increase::Models::PhysicalCard::Shipment::method_,
        schedule: Increase::Models::PhysicalCard::Shipment::schedule,
        status: Increase::Models::PhysicalCard::Shipment::status,
        tracking: Increase::PhysicalCard::Shipment::Tracking?
      }

      class Shipment < Increase::Internal::Type::BaseModel
        attr_accessor address: Increase::PhysicalCard::Shipment::Address

        attr_accessor method_: Increase::Models::PhysicalCard::Shipment::method_

        attr_accessor schedule: Increase::Models::PhysicalCard::Shipment::schedule

        attr_accessor status: Increase::Models::PhysicalCard::Shipment::status

        attr_accessor tracking: Increase::PhysicalCard::Shipment::Tracking?

        def initialize: (address: Increase::PhysicalCard::Shipment::Address, method_: Increase::Models::PhysicalCard::Shipment::method_, schedule: Increase::Models::PhysicalCard::Shipment::schedule, status: Increase::Models::PhysicalCard::Shipment::status, tracking: Increase::PhysicalCard::Shipment::Tracking?) -> void

        def to_hash: () -> {
          address: Increase::PhysicalCard::Shipment::Address,
          method_: Increase::Models::PhysicalCard::Shipment::method_,
          schedule: Increase::Models::PhysicalCard::Shipment::schedule,
          status: Increase::Models::PhysicalCard::Shipment::status,
          tracking: Increase::PhysicalCard::Shipment::Tracking?
        }

        type address = {
          city: String,
          country: String,
          line1: String,
          line2: String?,
          line3: String?,
          name: String,
          postal_code: String,
          state: String
        }

        class Address < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor country: String

          attr_accessor line1: String

          attr_accessor line2: String?

          attr_accessor line3: String?

          attr_accessor name: String

          attr_accessor postal_code: String

          attr_accessor state: String

          def initialize: (city: String, country: String, line1: String, line2: String?, line3: String?, name: String, postal_code: String, state: String) -> void

          def to_hash: () -> {
            city: String,
            country: String,
            line1: String,
            line2: String?,
            line3: String?,
            name: String,
            postal_code: String,
            state: String
          }
        end

        type method_ = (:usps | :fedex_priority_overnight | :fedex_2_day | :dhl_worldwide_express)

        module Method
          extend Increase::Internal::Type::Enum

          # USPS Post.
          USPS: :usps

          # FedEx Priority Overnight, no signature.
          FEDEX_PRIORITY_OVERNIGHT: :fedex_priority_overnight

          # FedEx 2-day.
          FEDEX_2_DAY: :fedex_2_day

          # DHL Worldwide Express, international shipping only.
          DHL_WORLDWIDE_EXPRESS: :dhl_worldwide_express

          def self?.values: () -> ::Array[Increase::Models::PhysicalCard::Shipment::method_]
        end

        type schedule = (:next_day | :same_day)

        module Schedule
          extend Increase::Internal::Type::Enum

          # The physical card will be shipped one business day after the order is received by the card printer. A card that is submitted to Increase on a Monday evening (Pacific Time) will ship out on Wednesday.
          NEXT_DAY: :next_day

          # The physical card will be shipped on the same business day that the order is received by the card printer. A card that is submitted to Increase on a Monday evening (Pacific Time) will ship out on Tuesday.
          SAME_DAY: :same_day

          def self?.values: () -> ::Array[Increase::Models::PhysicalCard::Shipment::schedule]
        end

        type status = (:pending | :canceled | :submitted | :acknowledged | :rejected | :shipped | :returned | :requires_attention)

        module Status
          extend Increase::Internal::Type::Enum

          # The physical card has not yet been shipped.
          PENDING: :pending

          # The physical card shipment was canceled prior to submission.
          CANCELED: :canceled

          # The physical card shipment has been submitted to the card fulfillment provider.
          SUBMITTED: :submitted

          # The physical card shipment has been acknowledged by the card fulfillment provider and will be processed in their next batch.
          ACKNOWLEDGED: :acknowledged

          # The physical card shipment was rejected by the card printer due to an error.
          REJECTED: :rejected

          # The physical card has been shipped.
          SHIPPED: :shipped

          # The physical card shipment was returned to the sender and destroyed by the production facility.
          RETURNED: :returned

          # The physical card shipment requires attention from Increase before progressing.
          REQUIRES_ATTENTION: :requires_attention

          def self?.values: () -> ::Array[Increase::Models::PhysicalCard::Shipment::status]
        end

        type tracking = {
          number: String,
          return_number: String?,
          return_reason: String?,
          shipped_at: Time,
          updates: ::Array[Increase::PhysicalCard::Shipment::Tracking::Update]
        }

        class Tracking < Increase::Internal::Type::BaseModel
          attr_accessor number: String

          attr_accessor return_number: String?

          attr_accessor return_reason: String?

          attr_accessor shipped_at: Time

          attr_accessor updates: ::Array[Increase::PhysicalCard::Shipment::Tracking::Update]

          def initialize: (number: String, return_number: String?, return_reason: String?, shipped_at: Time, updates: ::Array[Increase::PhysicalCard::Shipment::Tracking::Update]) -> void

          def to_hash: () -> {
            number: String,
            return_number: String?,
            return_reason: String?,
            shipped_at: Time,
            updates: ::Array[Increase::PhysicalCard::Shipment::Tracking::Update]
          }

          type update = {
            carrier_estimated_delivery_at: Time?,
            category: Increase::Models::PhysicalCard::Shipment::Tracking::Update::category,
            city: String?,
            created_at: Time,
            postal_code: String?,
            state: String?
          }

          class Update < Increase::Internal::Type::BaseModel
            attr_accessor carrier_estimated_delivery_at: Time?

            attr_accessor category: Increase::Models::PhysicalCard::Shipment::Tracking::Update::category

            attr_accessor city: String?

            attr_accessor created_at: Time

            attr_accessor postal_code: String?

            attr_accessor state: String?

            def initialize: (carrier_estimated_delivery_at: Time?, category: Increase::Models::PhysicalCard::Shipment::Tracking::Update::category, city: String?, created_at: Time, postal_code: String?, state: String?) -> void

            def to_hash: () -> {
              carrier_estimated_delivery_at: Time?,
              category: Increase::Models::PhysicalCard::Shipment::Tracking::Update::category,
              city: String?,
              created_at: Time,
              postal_code: String?,
              state: String?
            }

            type category = (:in_transit | :processed_for_delivery | :delivered | :returned_to_sender)

            module Category
              extend Increase::Internal::Type::Enum

              # The physical card is in transit.
              IN_TRANSIT: :in_transit

              # The physical card has been processed for delivery.
              PROCESSED_FOR_DELIVERY: :processed_for_delivery

              # The physical card has been delivered.
              DELIVERED: :delivered

              # Delivery failed and the physical card was returned to sender.
              RETURNED_TO_SENDER: :returned_to_sender

              def self?.values: () -> ::Array[Increase::Models::PhysicalCard::Shipment::Tracking::Update::category]
            end
          end
        end
      end

      type status = (:active | :disabled | :canceled)

      module Status
        extend Increase::Internal::Type::Enum

        # The physical card is active.
        ACTIVE: :active

        # The physical card is temporarily disabled.
        DISABLED: :disabled

        # The physical card is permanently canceled.
        CANCELED: :canceled

        def self?.values: () -> ::Array[Increase::Models::PhysicalCard::status]
      end

      type type_ = :physical_card

      module Type
        extend Increase::Internal::Type::Enum

        PHYSICAL_CARD: :physical_card

        def self?.values: () -> ::Array[Increase::Models::PhysicalCard::type_]
      end
    end
  end
end
