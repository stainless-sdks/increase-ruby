module Increase
  module Models
    type inbound_check_deposit =
      {
        id: String,
        accepted_at: Time?,
        account_id: String,
        account_number_id: String?,
        adjustments: ::Array[Increase::Models::InboundCheckDeposit::Adjustment],
        amount: Integer,
        back_image_file_id: String?,
        bank_of_first_deposit_routing_number: String?,
        check_number: String?,
        check_transfer_id: String?,
        created_at: Time,
        currency: Increase::Models::InboundCheckDeposit::currency,
        declined_at: Time?,
        declined_transaction_id: String?,
        deposit_return: Increase::Models::InboundCheckDeposit::DepositReturn?,
        front_image_file_id: String?,
        payee_name_analysis: Increase::Models::InboundCheckDeposit::payee_name_analysis,
        status: Increase::Models::InboundCheckDeposit::status,
        transaction_id: String?,
        type: Increase::Models::InboundCheckDeposit::type_
      }

    class InboundCheckDeposit < Increase::BaseModel
      attr_accessor id: String

      attr_accessor accepted_at: Time?

      attr_accessor account_id: String

      attr_accessor account_number_id: String?

      attr_accessor adjustments: ::Array[Increase::Models::InboundCheckDeposit::Adjustment]

      attr_accessor amount: Integer

      attr_accessor back_image_file_id: String?

      attr_accessor bank_of_first_deposit_routing_number: String?

      attr_accessor check_number: String?

      attr_accessor check_transfer_id: String?

      attr_accessor created_at: Time

      attr_accessor currency: Increase::Models::InboundCheckDeposit::currency

      attr_accessor declined_at: Time?

      attr_accessor declined_transaction_id: String?

      attr_accessor deposit_return: Increase::Models::InboundCheckDeposit::DepositReturn?

      attr_accessor front_image_file_id: String?

      attr_accessor payee_name_analysis: Increase::Models::InboundCheckDeposit::payee_name_analysis

      attr_accessor status: Increase::Models::InboundCheckDeposit::status

      attr_accessor transaction_id: String?

      attr_accessor type: Increase::Models::InboundCheckDeposit::type_

      def initialize: (
        id: String,
        accepted_at: Time?,
        account_id: String,
        account_number_id: String?,
        adjustments: ::Array[Increase::Models::InboundCheckDeposit::Adjustment],
        amount: Integer,
        back_image_file_id: String?,
        bank_of_first_deposit_routing_number: String?,
        check_number: String?,
        check_transfer_id: String?,
        created_at: Time,
        currency: Increase::Models::InboundCheckDeposit::currency,
        declined_at: Time?,
        declined_transaction_id: String?,
        deposit_return: Increase::Models::InboundCheckDeposit::DepositReturn?,
        front_image_file_id: String?,
        payee_name_analysis: Increase::Models::InboundCheckDeposit::payee_name_analysis,
        status: Increase::Models::InboundCheckDeposit::status,
        transaction_id: String?,
        type: Increase::Models::InboundCheckDeposit::type_
      ) -> void

      def to_hash: -> Increase::Models::inbound_check_deposit

      type adjustment =
        {
          adjusted_at: Time,
          amount: Integer,
          reason: Increase::Models::InboundCheckDeposit::Adjustment::reason,
          transaction_id: String
        }

      class Adjustment < Increase::BaseModel
        attr_accessor adjusted_at: Time

        attr_accessor amount: Integer

        attr_accessor reason: Increase::Models::InboundCheckDeposit::Adjustment::reason

        attr_accessor transaction_id: String

        def initialize: (
          adjusted_at: Time,
          amount: Integer,
          reason: Increase::Models::InboundCheckDeposit::Adjustment::reason,
          transaction_id: String
        ) -> void

        def to_hash: -> Increase::Models::InboundCheckDeposit::adjustment

        type reason =
          :late_return
          | :wrong_payee_credit
          | :adjusted_amount
          | :non_conforming_item

        module Reason
          extend Increase::Enum

          # The return was initiated too late and the receiving institution has responded with a Late Return Claim.
          LATE_RETURN: :late_return

          # The check was deposited to the wrong payee and the depositing institution has reimbursed the funds with a Wrong Payee Credit.
          WRONG_PAYEE_CREDIT: :wrong_payee_credit

          # The check was deposited with a different amount than what was written on the check.
          ADJUSTED_AMOUNT: :adjusted_amount

          # The recipient was not able to process the check. This usually happens for e.g., low quality images.
          NON_CONFORMING_ITEM: :non_conforming_item

          def self.values: -> ::Array[Increase::Models::InboundCheckDeposit::Adjustment::reason]
        end
      end

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self.values: -> ::Array[Increase::Models::InboundCheckDeposit::currency]
      end

      type deposit_return =
        {
          reason: Increase::Models::InboundCheckDeposit::DepositReturn::reason,
          returned_at: Time,
          transaction_id: String
        }

      class DepositReturn < Increase::BaseModel
        attr_accessor reason: Increase::Models::InboundCheckDeposit::DepositReturn::reason

        attr_accessor returned_at: Time

        attr_accessor transaction_id: String

        def initialize: (
          reason: Increase::Models::InboundCheckDeposit::DepositReturn::reason,
          returned_at: Time,
          transaction_id: String
        ) -> void

        def to_hash: -> Increase::Models::InboundCheckDeposit::deposit_return

        type reason =
          :altered_or_fictitious
          | :not_authorized
          | :duplicate_presentment
          | :endorsement_missing
          | :endorsement_irregular

        module Reason
          extend Increase::Enum

          # The check was altered or fictitious.
          ALTERED_OR_FICTITIOUS: :altered_or_fictitious

          # The check was not authorized.
          NOT_AUTHORIZED: :not_authorized

          # The check was a duplicate presentment.
          DUPLICATE_PRESENTMENT: :duplicate_presentment

          # The check was not endorsed.
          ENDORSEMENT_MISSING: :endorsement_missing

          # The check was not endorsed by the payee.
          ENDORSEMENT_IRREGULAR: :endorsement_irregular

          def self.values: -> ::Array[Increase::Models::InboundCheckDeposit::DepositReturn::reason]
        end
      end

      type payee_name_analysis =
        :name_matches | :does_not_match | :not_evaluated

      module PayeeNameAnalysis
        extend Increase::Enum

        # The details on the check match the recipient name of the check transfer.
        NAME_MATCHES: :name_matches

        # The details on the check do not match the recipient name of the check transfer.
        DOES_NOT_MATCH: :does_not_match

        # The payee name analysis was not evaluated.
        NOT_EVALUATED: :not_evaluated

        def self.values: -> ::Array[Increase::Models::InboundCheckDeposit::payee_name_analysis]
      end

      type status =
        :pending | :accepted | :declined | :returned | :requires_attention

      module Status
        extend Increase::Enum

        # The Inbound Check Deposit is pending.
        PENDING: :pending

        # The Inbound Check Deposit was accepted.
        ACCEPTED: :accepted

        # The Inbound Check Deposit was rejected.
        DECLINED: :declined

        # The Inbound Check Deposit was returned.
        RETURNED: :returned

        # The Inbound Check Deposit requires attention from an Increase operator.
        REQUIRES_ATTENTION: :requires_attention

        def self.values: -> ::Array[Increase::Models::InboundCheckDeposit::status]
      end

      type type_ = :inbound_check_deposit

      module Type
        extend Increase::Enum

        INBOUND_CHECK_DEPOSIT: :inbound_check_deposit

        def self.values: -> ::Array[Increase::Models::InboundCheckDeposit::type_]
      end
    end
  end
end
