module Increase
  module Models
    type inbound_ach_transfer =
      {
        id: String,
        acceptance: Increase::Models::InboundACHTransfer::Acceptance?,
        account_id: String,
        account_number_id: String,
        addenda: Increase::Models::InboundACHTransfer::Addenda?,
        amount: Integer,
        automatically_resolves_at: Time,
        created_at: Time,
        decline: Increase::Models::InboundACHTransfer::Decline?,
        direction: Increase::Models::InboundACHTransfer::direction,
        effective_date: Date,
        expected_settlement_schedule: Increase::Models::InboundACHTransfer::expected_settlement_schedule,
        international_addenda: Increase::Models::InboundACHTransfer::InternationalAddenda?,
        notification_of_change: Increase::Models::InboundACHTransfer::NotificationOfChange?,
        originator_company_descriptive_date: String?,
        originator_company_discretionary_data: String?,
        originator_company_entry_description: String,
        originator_company_id: String,
        originator_company_name: String,
        originator_routing_number: String,
        receiver_id_number: String?,
        receiver_name: String?,
        standard_entry_class_code: Increase::Models::InboundACHTransfer::standard_entry_class_code,
        status: Increase::Models::InboundACHTransfer::status,
        trace_number: String,
        transfer_return: Increase::Models::InboundACHTransfer::TransferReturn?,
        type: Increase::Models::InboundACHTransfer::type_
      }

    class InboundACHTransfer < Increase::BaseModel
      attr_accessor id: String

      attr_accessor acceptance: Increase::Models::InboundACHTransfer::Acceptance?

      attr_accessor account_id: String

      attr_accessor account_number_id: String

      attr_accessor addenda: Increase::Models::InboundACHTransfer::Addenda?

      attr_accessor amount: Integer

      attr_accessor automatically_resolves_at: Time

      attr_accessor created_at: Time

      attr_accessor decline: Increase::Models::InboundACHTransfer::Decline?

      attr_accessor direction: Increase::Models::InboundACHTransfer::direction

      attr_accessor effective_date: Date

      attr_accessor expected_settlement_schedule: Increase::Models::InboundACHTransfer::expected_settlement_schedule

      attr_accessor international_addenda: Increase::Models::InboundACHTransfer::InternationalAddenda?

      attr_accessor notification_of_change: Increase::Models::InboundACHTransfer::NotificationOfChange?

      attr_accessor originator_company_descriptive_date: String?

      attr_accessor originator_company_discretionary_data: String?

      attr_accessor originator_company_entry_description: String

      attr_accessor originator_company_id: String

      attr_accessor originator_company_name: String

      attr_accessor originator_routing_number: String

      attr_accessor receiver_id_number: String?

      attr_accessor receiver_name: String?

      attr_accessor standard_entry_class_code: Increase::Models::InboundACHTransfer::standard_entry_class_code

      attr_accessor status: Increase::Models::InboundACHTransfer::status

      attr_accessor trace_number: String

      attr_accessor transfer_return: Increase::Models::InboundACHTransfer::TransferReturn?

      attr_accessor type: Increase::Models::InboundACHTransfer::type_

      def initialize: (
        id: String,
        acceptance: Increase::Models::InboundACHTransfer::Acceptance?,
        account_id: String,
        account_number_id: String,
        addenda: Increase::Models::InboundACHTransfer::Addenda?,
        amount: Integer,
        automatically_resolves_at: Time,
        created_at: Time,
        decline: Increase::Models::InboundACHTransfer::Decline?,
        direction: Increase::Models::InboundACHTransfer::direction,
        effective_date: Date,
        expected_settlement_schedule: Increase::Models::InboundACHTransfer::expected_settlement_schedule,
        international_addenda: Increase::Models::InboundACHTransfer::InternationalAddenda?,
        notification_of_change: Increase::Models::InboundACHTransfer::NotificationOfChange?,
        originator_company_descriptive_date: String?,
        originator_company_discretionary_data: String?,
        originator_company_entry_description: String,
        originator_company_id: String,
        originator_company_name: String,
        originator_routing_number: String,
        receiver_id_number: String?,
        receiver_name: String?,
        standard_entry_class_code: Increase::Models::InboundACHTransfer::standard_entry_class_code,
        status: Increase::Models::InboundACHTransfer::status,
        trace_number: String,
        transfer_return: Increase::Models::InboundACHTransfer::TransferReturn?,
        type: Increase::Models::InboundACHTransfer::type_
      ) -> void

      def to_hash: -> Increase::Models::inbound_ach_transfer

      type acceptance = { accepted_at: Time, transaction_id: String }

      class Acceptance < Increase::BaseModel
        attr_accessor accepted_at: Time

        attr_accessor transaction_id: String

        def initialize: (accepted_at: Time, transaction_id: String) -> void

        def to_hash: -> Increase::Models::InboundACHTransfer::acceptance
      end

      type addenda =
        {
          category: Increase::Models::InboundACHTransfer::Addenda::category,
          freeform: Increase::Models::InboundACHTransfer::Addenda::Freeform?
        }

      class Addenda < Increase::BaseModel
        attr_accessor category: Increase::Models::InboundACHTransfer::Addenda::category

        attr_accessor freeform: Increase::Models::InboundACHTransfer::Addenda::Freeform?

        def initialize: (
          category: Increase::Models::InboundACHTransfer::Addenda::category,
          freeform: Increase::Models::InboundACHTransfer::Addenda::Freeform?
        ) -> void

        def to_hash: -> Increase::Models::InboundACHTransfer::addenda

        type category = :freeform

        module Category
          extend Increase::Enum

          # Unstructured addendum.
          FREEFORM: :freeform

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::Addenda::category]
        end

        type freeform =
          {
            entries: ::Array[Increase::Models::InboundACHTransfer::Addenda::Freeform::Entry]
          }

        class Freeform < Increase::BaseModel
          attr_accessor entries: ::Array[Increase::Models::InboundACHTransfer::Addenda::Freeform::Entry]

          def initialize: (
            entries: ::Array[Increase::Models::InboundACHTransfer::Addenda::Freeform::Entry]
          ) -> void

          def to_hash: -> Increase::Models::InboundACHTransfer::Addenda::freeform

          type entry = { payment_related_information: String }

          class Entry < Increase::BaseModel
            attr_accessor payment_related_information: String

            def initialize: (payment_related_information: String) -> void

            def to_hash: -> Increase::Models::InboundACHTransfer::Addenda::Freeform::entry
          end
        end
      end

      type decline =
        {
          declined_at: Time,
          declined_transaction_id: String,
          reason: Increase::Models::InboundACHTransfer::Decline::reason
        }

      class Decline < Increase::BaseModel
        attr_accessor declined_at: Time

        attr_accessor declined_transaction_id: String

        attr_accessor reason: Increase::Models::InboundACHTransfer::Decline::reason

        def initialize: (
          declined_at: Time,
          declined_transaction_id: String,
          reason: Increase::Models::InboundACHTransfer::Decline::reason
        ) -> void

        def to_hash: -> Increase::Models::InboundACHTransfer::decline

        type reason =
          :ach_route_canceled
          | :ach_route_disabled
          | :breaches_limit
          | :entity_not_active
          | :group_locked
          | :transaction_not_allowed
          | :user_initiated
          | :insufficient_funds
          | :returned_per_odfi_request
          | :authorization_revoked_by_customer
          | :payment_stopped
          | :customer_advised_unauthorized_improper_ineligible_or_incomplete
          | :representative_payee_deceased_or_unable_to_continue_in_that_capacity
          | :beneficiary_or_account_holder_deceased
          | :credit_entry_refused_by_receiver
          | :duplicate_entry
          | :corporate_customer_advised_not_authorized

        module Reason
          extend Increase::Enum

          # The account number is canceled.
          ACH_ROUTE_CANCELED: :ach_route_canceled

          # The account number is disabled.
          ACH_ROUTE_DISABLED: :ach_route_disabled

          # The transaction would cause an Increase limit to be exceeded.
          BREACHES_LIMIT: :breaches_limit

          # The account's entity is not active.
          ENTITY_NOT_ACTIVE: :entity_not_active

          # Your account is inactive.
          GROUP_LOCKED: :group_locked

          # The transaction is not allowed per Increase's terms.
          TRANSACTION_NOT_ALLOWED: :transaction_not_allowed

          # Your integration declined this transfer via the API.
          USER_INITIATED: :user_initiated

          # Your account contains insufficient funds.
          INSUFFICIENT_FUNDS: :insufficient_funds

          # The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.
          RETURNED_PER_ODFI_REQUEST: :returned_per_odfi_request

          # The customer no longer authorizes this transaction.
          AUTHORIZATION_REVOKED_BY_CUSTOMER: :authorization_revoked_by_customer

          # The customer asked for the payment to be stopped.
          PAYMENT_STOPPED: :payment_stopped

          # The customer advises that the debit was unauthorized.
          CUSTOMER_ADVISED_UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE: :customer_advised_unauthorized_improper_ineligible_or_incomplete

          # The payee is deceased.
          REPRESENTATIVE_PAYEE_DECEASED_OR_UNABLE_TO_CONTINUE_IN_THAT_CAPACITY: :representative_payee_deceased_or_unable_to_continue_in_that_capacity

          # The account holder is deceased.
          BENEFICIARY_OR_ACCOUNT_HOLDER_DECEASED: :beneficiary_or_account_holder_deceased

          # The customer refused a credit entry.
          CREDIT_ENTRY_REFUSED_BY_RECEIVER: :credit_entry_refused_by_receiver

          # The account holder identified this transaction as a duplicate.
          DUPLICATE_ENTRY: :duplicate_entry

          # The corporate customer no longer authorizes this transaction.
          CORPORATE_CUSTOMER_ADVISED_NOT_AUTHORIZED: :corporate_customer_advised_not_authorized

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::Decline::reason]
        end
      end

      type direction = :credit | :debit

      module Direction
        extend Increase::Enum

        # Credit
        CREDIT: :credit

        # Debit
        DEBIT: :debit

        def self.values: -> ::Array[Increase::Models::InboundACHTransfer::direction]
      end

      type expected_settlement_schedule = :same_day | :future_dated

      module ExpectedSettlementSchedule
        extend Increase::Enum

        # The transfer is expected to settle same-day.
        SAME_DAY: :same_day

        # The transfer is expected to settle on a future date.
        FUTURE_DATED: :future_dated

        def self.values: -> ::Array[Increase::Models::InboundACHTransfer::expected_settlement_schedule]
      end

      type international_addenda =
        {
          destination_country_code: String,
          destination_currency_code: String,
          foreign_exchange_indicator: Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_indicator,
          foreign_exchange_reference: String?,
          foreign_exchange_reference_indicator: Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_reference_indicator,
          foreign_payment_amount: Integer,
          foreign_trace_number: String?,
          international_transaction_type_code: Increase::Models::InboundACHTransfer::InternationalAddenda::international_transaction_type_code,
          originating_currency_code: String,
          originating_depository_financial_institution_branch_country: String,
          originating_depository_financial_institution_id: String,
          originating_depository_financial_institution_id_qualifier: Increase::Models::InboundACHTransfer::InternationalAddenda::originating_depository_financial_institution_id_qualifier,
          originating_depository_financial_institution_name: String,
          originator_city: String,
          originator_country: String,
          originator_identification: String,
          originator_name: String,
          originator_postal_code: String?,
          originator_state_or_province: String?,
          originator_street_address: String,
          payment_related_information: String?,
          :payment_related_information2 => String?,
          receiver_city: String,
          receiver_country: String,
          receiver_identification_number: String?,
          receiver_postal_code: String?,
          receiver_state_or_province: String?,
          receiver_street_address: String,
          receiving_company_or_individual_name: String,
          receiving_depository_financial_institution_country: String,
          receiving_depository_financial_institution_id: String,
          receiving_depository_financial_institution_id_qualifier: Increase::Models::InboundACHTransfer::InternationalAddenda::receiving_depository_financial_institution_id_qualifier,
          receiving_depository_financial_institution_name: String
        }

      class InternationalAddenda < Increase::BaseModel
        attr_accessor destination_country_code: String

        attr_accessor destination_currency_code: String

        attr_accessor foreign_exchange_indicator: Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_indicator

        attr_accessor foreign_exchange_reference: String?

        attr_accessor foreign_exchange_reference_indicator: Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_reference_indicator

        attr_accessor foreign_payment_amount: Integer

        attr_accessor foreign_trace_number: String?

        attr_accessor international_transaction_type_code: Increase::Models::InboundACHTransfer::InternationalAddenda::international_transaction_type_code

        attr_accessor originating_currency_code: String

        attr_accessor originating_depository_financial_institution_branch_country: String

        attr_accessor originating_depository_financial_institution_id: String

        attr_accessor originating_depository_financial_institution_id_qualifier: Increase::Models::InboundACHTransfer::InternationalAddenda::originating_depository_financial_institution_id_qualifier

        attr_accessor originating_depository_financial_institution_name: String

        attr_accessor originator_city: String

        attr_accessor originator_country: String

        attr_accessor originator_identification: String

        attr_accessor originator_name: String

        attr_accessor originator_postal_code: String?

        attr_accessor originator_state_or_province: String?

        attr_accessor originator_street_address: String

        attr_accessor payment_related_information: String?

        attr_accessor payment_related_information2: String?

        attr_accessor receiver_city: String

        attr_accessor receiver_country: String

        attr_accessor receiver_identification_number: String?

        attr_accessor receiver_postal_code: String?

        attr_accessor receiver_state_or_province: String?

        attr_accessor receiver_street_address: String

        attr_accessor receiving_company_or_individual_name: String

        attr_accessor receiving_depository_financial_institution_country: String

        attr_accessor receiving_depository_financial_institution_id: String

        attr_accessor receiving_depository_financial_institution_id_qualifier: Increase::Models::InboundACHTransfer::InternationalAddenda::receiving_depository_financial_institution_id_qualifier

        attr_accessor receiving_depository_financial_institution_name: String

        def initialize: (
          destination_country_code: String,
          destination_currency_code: String,
          foreign_exchange_indicator: Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_indicator,
          foreign_exchange_reference: String?,
          foreign_exchange_reference_indicator: Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_reference_indicator,
          foreign_payment_amount: Integer,
          foreign_trace_number: String?,
          international_transaction_type_code: Increase::Models::InboundACHTransfer::InternationalAddenda::international_transaction_type_code,
          originating_currency_code: String,
          originating_depository_financial_institution_branch_country: String,
          originating_depository_financial_institution_id: String,
          originating_depository_financial_institution_id_qualifier: Increase::Models::InboundACHTransfer::InternationalAddenda::originating_depository_financial_institution_id_qualifier,
          originating_depository_financial_institution_name: String,
          originator_city: String,
          originator_country: String,
          originator_identification: String,
          originator_name: String,
          originator_postal_code: String?,
          originator_state_or_province: String?,
          originator_street_address: String,
          payment_related_information: String?,
          payment_related_information2: String?,
          receiver_city: String,
          receiver_country: String,
          receiver_identification_number: String?,
          receiver_postal_code: String?,
          receiver_state_or_province: String?,
          receiver_street_address: String,
          receiving_company_or_individual_name: String,
          receiving_depository_financial_institution_country: String,
          receiving_depository_financial_institution_id: String,
          receiving_depository_financial_institution_id_qualifier: Increase::Models::InboundACHTransfer::InternationalAddenda::receiving_depository_financial_institution_id_qualifier,
          receiving_depository_financial_institution_name: String
        ) -> void

        def to_hash: -> Increase::Models::InboundACHTransfer::international_addenda

        type foreign_exchange_indicator =
          :fixed_to_variable | :variable_to_fixed | :fixed_to_fixed

        module ForeignExchangeIndicator
          extend Increase::Enum

          # The originator chose an amount in their own currency. The settled amount in USD was converted using the exchange rate.
          FIXED_TO_VARIABLE: :fixed_to_variable

          # The originator chose an amount to settle in USD. The originator's amount was variable; known only after the foreign exchange conversion.
          VARIABLE_TO_FIXED: :variable_to_fixed

          # The amount was originated and settled as a fixed amount in USD. There is no foreign exchange conversion.
          FIXED_TO_FIXED: :fixed_to_fixed

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_indicator]
        end

        type foreign_exchange_reference_indicator =
          :foreign_exchange_rate | :foreign_exchange_reference_number | :blank

        module ForeignExchangeReferenceIndicator
          extend Increase::Enum

          # The ACH file contains a foreign exchange rate.
          FOREIGN_EXCHANGE_RATE: :foreign_exchange_rate

          # The ACH file contains a reference to a well-known foreign exchange rate.
          FOREIGN_EXCHANGE_REFERENCE_NUMBER: :foreign_exchange_reference_number

          # There is no foreign exchange for this transfer, so the `foreign_exchange_reference` field is blank.
          BLANK: :blank

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::InternationalAddenda::foreign_exchange_reference_indicator]
        end

        type international_transaction_type_code =
          :annuity
          | :business_or_commercial
          | :deposit
          | :loan
          | :miscellaneous
          | :mortgage
          | :pension
          | :remittance
          | :rent_or_lease
          | :salary_or_payroll
          | :tax
          | :accounts_receivable
          | :back_office_conversion
          | :machine_transfer
          | :point_of_purchase
          | :point_of_sale
          | :represented_check
          | :shared_network_transaction
          | :telphone_initiated
          | :internet_initiated

        module InternationalTransactionTypeCode
          extend Increase::Enum

          # Sent as `ANN` in the Nacha file.
          ANNUITY: :annuity

          # Sent as `BUS` in the Nacha file.
          BUSINESS_OR_COMMERCIAL: :business_or_commercial

          # Sent as `DEP` in the Nacha file.
          DEPOSIT: :deposit

          # Sent as `LOA` in the Nacha file.
          LOAN: :loan

          # Sent as `MIS` in the Nacha file.
          MISCELLANEOUS: :miscellaneous

          # Sent as `MOR` in the Nacha file.
          MORTGAGE: :mortgage

          # Sent as `PEN` in the Nacha file.
          PENSION: :pension

          # Sent as `REM` in the Nacha file.
          REMITTANCE: :remittance

          # Sent as `RLS` in the Nacha file.
          RENT_OR_LEASE: :rent_or_lease

          # Sent as `SAL` in the Nacha file.
          SALARY_OR_PAYROLL: :salary_or_payroll

          # Sent as `TAX` in the Nacha file.
          TAX: :tax

          # Sent as `ARC` in the Nacha file.
          ACCOUNTS_RECEIVABLE: :accounts_receivable

          # Sent as `BOC` in the Nacha file.
          BACK_OFFICE_CONVERSION: :back_office_conversion

          # Sent as `MTE` in the Nacha file.
          MACHINE_TRANSFER: :machine_transfer

          # Sent as `POP` in the Nacha file.
          POINT_OF_PURCHASE: :point_of_purchase

          # Sent as `POS` in the Nacha file.
          POINT_OF_SALE: :point_of_sale

          # Sent as `RCK` in the Nacha file.
          REPRESENTED_CHECK: :represented_check

          # Sent as `SHR` in the Nacha file.
          SHARED_NETWORK_TRANSACTION: :shared_network_transaction

          # Sent as `TEL` in the Nacha file.
          TELPHONE_INITIATED: :telphone_initiated

          # Sent as `WEB` in the Nacha file.
          INTERNET_INITIATED: :internet_initiated

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::InternationalAddenda::international_transaction_type_code]
        end

        type originating_depository_financial_institution_id_qualifier =
          :national_clearing_system_number | :bic_code | :iban

        module OriginatingDepositoryFinancialInstitutionIDQualifier
          extend Increase::Enum

          # A domestic clearing system number. In the US, for example, this is the American Banking Association (ABA) routing number.
          NATIONAL_CLEARING_SYSTEM_NUMBER: :national_clearing_system_number

          # The SWIFT Bank Identifier Code (BIC) of the bank.
          BIC_CODE: :bic_code

          # An International Bank Account Number.
          IBAN: :iban

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::InternationalAddenda::originating_depository_financial_institution_id_qualifier]
        end

        type receiving_depository_financial_institution_id_qualifier =
          :national_clearing_system_number | :bic_code | :iban

        module ReceivingDepositoryFinancialInstitutionIDQualifier
          extend Increase::Enum

          # A domestic clearing system number. In the US, for example, this is the American Banking Association (ABA) routing number.
          NATIONAL_CLEARING_SYSTEM_NUMBER: :national_clearing_system_number

          # The SWIFT Bank Identifier Code (BIC) of the bank.
          BIC_CODE: :bic_code

          # An International Bank Account Number.
          IBAN: :iban

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::InternationalAddenda::receiving_depository_financial_institution_id_qualifier]
        end
      end

      type notification_of_change =
        { updated_account_number: String?, updated_routing_number: String? }

      class NotificationOfChange < Increase::BaseModel
        attr_accessor updated_account_number: String?

        attr_accessor updated_routing_number: String?

        def initialize: (
          updated_account_number: String?,
          updated_routing_number: String?
        ) -> void

        def to_hash: -> Increase::Models::InboundACHTransfer::notification_of_change
      end

      type standard_entry_class_code =
        :corporate_credit_or_debit
        | :corporate_trade_exchange
        | :prearranged_payments_and_deposit
        | :internet_initiated
        | :point_of_sale
        | :telephone_initiated
        | :customer_initiated
        | :accounts_receivable
        | :machine_transfer
        | :shared_network_transaction
        | :represented_check
        | :back_office_conversion
        | :point_of_purchase
        | :check_truncation
        | :destroyed_check
        | :international_ach_transaction

      module StandardEntryClassCode
        extend Increase::Enum

        # Corporate Credit and Debit (CCD).
        CORPORATE_CREDIT_OR_DEBIT: :corporate_credit_or_debit

        # Corporate Trade Exchange (CTX).
        CORPORATE_TRADE_EXCHANGE: :corporate_trade_exchange

        # Prearranged Payments and Deposits (PPD).
        PREARRANGED_PAYMENTS_AND_DEPOSIT: :prearranged_payments_and_deposit

        # Internet Initiated (WEB).
        INTERNET_INITIATED: :internet_initiated

        # Point of Sale (POS).
        POINT_OF_SALE: :point_of_sale

        # Telephone Initiated (TEL).
        TELEPHONE_INITIATED: :telephone_initiated

        # Customer Initiated (CIE).
        CUSTOMER_INITIATED: :customer_initiated

        # Accounts Receivable (ARC).
        ACCOUNTS_RECEIVABLE: :accounts_receivable

        # Machine Transfer (MTE).
        MACHINE_TRANSFER: :machine_transfer

        # Shared Network Transaction (SHR).
        SHARED_NETWORK_TRANSACTION: :shared_network_transaction

        # Represented Check (RCK).
        REPRESENTED_CHECK: :represented_check

        # Back Office Conversion (BOC).
        BACK_OFFICE_CONVERSION: :back_office_conversion

        # Point of Purchase (POP).
        POINT_OF_PURCHASE: :point_of_purchase

        # Check Truncation (TRC).
        CHECK_TRUNCATION: :check_truncation

        # Destroyed Check (XCK).
        DESTROYED_CHECK: :destroyed_check

        # International ACH Transaction (IAT).
        INTERNATIONAL_ACH_TRANSACTION: :international_ach_transaction

        def self.values: -> ::Array[Increase::Models::InboundACHTransfer::standard_entry_class_code]
      end

      type status = :pending | :declined | :accepted | :returned

      module Status
        extend Increase::Enum

        # The Inbound ACH Transfer is awaiting action, will transition automatically if no action is taken.
        PENDING: :pending

        # The Inbound ACH Transfer has been declined.
        DECLINED: :declined

        # The Inbound ACH Transfer is accepted.
        ACCEPTED: :accepted

        # The Inbound ACH Transfer has been returned.
        RETURNED: :returned

        def self.values: -> ::Array[Increase::Models::InboundACHTransfer::status]
      end

      type transfer_return =
        {
          reason: Increase::Models::InboundACHTransfer::TransferReturn::reason,
          returned_at: Time,
          transaction_id: String
        }

      class TransferReturn < Increase::BaseModel
        attr_accessor reason: Increase::Models::InboundACHTransfer::TransferReturn::reason

        attr_accessor returned_at: Time

        attr_accessor transaction_id: String

        def initialize: (
          reason: Increase::Models::InboundACHTransfer::TransferReturn::reason,
          returned_at: Time,
          transaction_id: String
        ) -> void

        def to_hash: -> Increase::Models::InboundACHTransfer::transfer_return

        type reason =
          :insufficient_funds
          | :returned_per_odfi_request
          | :authorization_revoked_by_customer
          | :payment_stopped
          | :customer_advised_unauthorized_improper_ineligible_or_incomplete
          | :representative_payee_deceased_or_unable_to_continue_in_that_capacity
          | :beneficiary_or_account_holder_deceased
          | :credit_entry_refused_by_receiver
          | :duplicate_entry
          | :corporate_customer_advised_not_authorized

        module Reason
          extend Increase::Enum

          # The customer's account has insufficient funds. This reason is only allowed for debits. The Nacha return code is R01.
          INSUFFICIENT_FUNDS: :insufficient_funds

          # The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request. The Nacha return code is R06.
          RETURNED_PER_ODFI_REQUEST: :returned_per_odfi_request

          # The customer no longer authorizes this transaction. The Nacha return code is R07.
          AUTHORIZATION_REVOKED_BY_CUSTOMER: :authorization_revoked_by_customer

          # The customer asked for the payment to be stopped. This reason is only allowed for debits. The Nacha return code is R08.
          PAYMENT_STOPPED: :payment_stopped

          # The customer advises that the debit was unauthorized. The Nacha return code is R10.
          CUSTOMER_ADVISED_UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE: :customer_advised_unauthorized_improper_ineligible_or_incomplete

          # The payee is deceased. The Nacha return code is R14.
          REPRESENTATIVE_PAYEE_DECEASED_OR_UNABLE_TO_CONTINUE_IN_THAT_CAPACITY: :representative_payee_deceased_or_unable_to_continue_in_that_capacity

          # The account holder is deceased. The Nacha return code is R15.
          BENEFICIARY_OR_ACCOUNT_HOLDER_DECEASED: :beneficiary_or_account_holder_deceased

          # The customer refused a credit entry. This reason is only allowed for credits. The Nacha return code is R23.
          CREDIT_ENTRY_REFUSED_BY_RECEIVER: :credit_entry_refused_by_receiver

          # The account holder identified this transaction as a duplicate. The Nacha return code is R24.
          DUPLICATE_ENTRY: :duplicate_entry

          # The corporate customer no longer authorizes this transaction. The Nacha return code is R29.
          CORPORATE_CUSTOMER_ADVISED_NOT_AUTHORIZED: :corporate_customer_advised_not_authorized

          def self.values: -> ::Array[Increase::Models::InboundACHTransfer::TransferReturn::reason]
        end
      end

      type type_ = :inbound_ach_transfer

      module Type
        extend Increase::Enum

        INBOUND_ACH_TRANSFER: :inbound_ach_transfer

        def self.values: -> ::Array[Increase::Models::InboundACHTransfer::type_]
      end
    end
  end
end
