module Increase
  module Models
    type wire_drawdown_request_list_params = ({
      cursor: String,
      idempotency_key: String,
      limit: Integer,
      status: Increase::Models::WireDrawdownRequestListParams::status
    } & Increase::request_parameters)

    class WireDrawdownRequestListParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader idempotency_key: String?

      def idempotency_key=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader status: Increase::Models::WireDrawdownRequestListParams::status?

      def status=: (Increase::Models::WireDrawdownRequestListParams::status) -> Increase::Models::WireDrawdownRequestListParams::status

      def initialize: (cursor: String, idempotency_key: String, limit: Integer, status: Increase::Models::WireDrawdownRequestListParams::status, request_options: Increase::request_opts) -> void
                    | (?(Increase::Models::wire_drawdown_request_list_params | Increase::BaseModel) data) -> void

      def to_hash: () -> Increase::Models::wire_drawdown_request_list_params

      type status = (:pending_submission | :pending_response | :fulfilled | :refused)

      class Status < Increase::Enum
        # The drawdown request is queued to be submitted to Fedwire.
        PENDING_SUBMISSION: :pending_submission

        # The drawdown request has been sent and the recipient should respond in some way.
        PENDING_RESPONSE: :pending_response

        # The drawdown request has been fulfilled by the recipient.
        FULFILLED: :fulfilled

        # The drawdown request has been refused by the recipient.
        REFUSED: :refused

        def self.values: () -> ::Array[Increase::Models::WireDrawdownRequestListParams::status]
      end
    end
  end
end
