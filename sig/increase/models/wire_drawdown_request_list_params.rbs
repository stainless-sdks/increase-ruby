module Increase
  module Models
    type wire_drawdown_request_list_params =
      {
        cursor: String,
        idempotency_key: String,
        limit: Integer,
        status: Increase::WireDrawdownRequestListParams::Status
      }
      & Increase::Internal::Type::request_parameters

    class WireDrawdownRequestListParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader idempotency_key: String?

      def idempotency_key=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader status: Increase::WireDrawdownRequestListParams::Status?

      def status=: (
        Increase::WireDrawdownRequestListParams::Status
      ) -> Increase::WireDrawdownRequestListParams::Status

      def initialize: (
        ?cursor: String,
        ?idempotency_key: String,
        ?limit: Integer,
        ?status: Increase::WireDrawdownRequestListParams::Status,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> ::Hash[Symbol, top]

      type status =
        { in_: ::Array[Increase::WireDrawdownRequestListParams::Status::in_] }

      class Status < Increase::Internal::Type::BaseModel
        attr_reader in_: ::Array[Increase::WireDrawdownRequestListParams::Status::in_]?

        def in_=: (
          ::Array[Increase::WireDrawdownRequestListParams::Status::in_]
        ) -> ::Array[Increase::WireDrawdownRequestListParams::Status::in_]

        def initialize: (
          ?in_: ::Array[Increase::WireDrawdownRequestListParams::Status::in_]
        ) -> void

        def to_hash: -> ::Hash[Symbol, top]

        type in_ =
          :pending_submission | :pending_response | :fulfilled | :refused

        module In
          extend Increase::Internal::Type::Enum

          # The drawdown request is queued to be submitted to Fedwire.
          PENDING_SUBMISSION: :pending_submission

          # The drawdown request has been sent and the recipient should respond in some way.
          PENDING_RESPONSE: :pending_response

          # The drawdown request has been fulfilled by the recipient.
          FULFILLED: :fulfilled

          # The drawdown request has been refused by the recipient.
          REFUSED: :refused

          def self?.values: -> ::Array[Increase::WireDrawdownRequestListParams::Status::in_]
        end
      end
    end
  end
end
