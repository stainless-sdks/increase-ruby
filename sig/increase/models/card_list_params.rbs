module Increase
  module Models
    type card_list_params =
      {
        account_id: String,
        created_at: Increase::Models::CardListParams::CreatedAt,
        cursor: String,
        idempotency_key: String,
        limit: Integer,
        status: Increase::Models::CardListParams::Status
      }
      & Increase::request_parameters

    class CardListParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_reader account_id: String?

      def account_id=: (String) -> String

      attr_reader created_at: Increase::Models::CardListParams::CreatedAt?

      def created_at=: (
        Increase::Models::CardListParams::CreatedAt
      ) -> Increase::Models::CardListParams::CreatedAt

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader idempotency_key: String?

      def idempotency_key=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader status: Increase::Models::CardListParams::Status?

      def status=: (
        Increase::Models::CardListParams::Status
      ) -> Increase::Models::CardListParams::Status

      def initialize: (
        ?account_id: String,
        ?created_at: Increase::Models::CardListParams::CreatedAt,
        ?cursor: String,
        ?idempotency_key: String,
        ?limit: Integer,
        ?status: Increase::Models::CardListParams::Status,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> Increase::Models::card_list_params

      type created_at =
        { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

      class CreatedAt < Increase::BaseModel
        attr_reader after: Time?

        def after=: (Time) -> Time

        attr_reader before: Time?

        def before=: (Time) -> Time

        attr_reader on_or_after: Time?

        def on_or_after=: (Time) -> Time

        attr_reader on_or_before: Time?

        def on_or_before=: (Time) -> Time

        def initialize: (
          ?after: Time,
          ?before: Time,
          ?on_or_after: Time,
          ?on_or_before: Time
        ) -> void

        def to_hash: -> Increase::Models::CardListParams::created_at
      end

      type status =
        { in_: ::Array[Increase::Models::CardListParams::Status::in_] }

      class Status < Increase::BaseModel
        attr_reader in_: ::Array[Increase::Models::CardListParams::Status::in_]?

        def in_=: (
          ::Array[Increase::Models::CardListParams::Status::in_]
        ) -> ::Array[Increase::Models::CardListParams::Status::in_]

        def initialize: (
          ?in_: ::Array[Increase::Models::CardListParams::Status::in_]
        ) -> void

        def to_hash: -> Increase::Models::CardListParams::status

        type in_ = :active | :disabled | :canceled

        class In < Increase::Enum
          # The card is active.
          ACTIVE: :active

          # The card is temporarily disabled.
          DISABLED: :disabled

          # The card is permanently canceled.
          CANCELED: :canceled

          def self.values: -> ::Array[Increase::Models::CardListParams::Status::in_]
        end
      end
    end
  end
end
