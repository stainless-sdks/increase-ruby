module Increase
  module Models
    type account_number =
      {
        id: String,
        account_id: String,
        account_number: String,
        created_at: Time,
        idempotency_key: String?,
        inbound_ach: Increase::AccountNumber::InboundACH,
        inbound_checks: Increase::AccountNumber::InboundChecks,
        name: String,
        routing_number: String,
        status: Increase::Models::AccountNumber::status,
        type: Increase::Models::AccountNumber::type_
      }

    class AccountNumber < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor account_number: String

      attr_accessor created_at: Time

      attr_accessor idempotency_key: String?

      attr_accessor inbound_ach: Increase::AccountNumber::InboundACH

      attr_accessor inbound_checks: Increase::AccountNumber::InboundChecks

      attr_accessor name: String

      attr_accessor routing_number: String

      attr_accessor status: Increase::Models::AccountNumber::status

      attr_accessor type: Increase::Models::AccountNumber::type_

      def initialize: (
        id: String,
        account_id: String,
        account_number: String,
        created_at: Time,
        idempotency_key: String?,
        inbound_ach: Increase::AccountNumber::InboundACH,
        inbound_checks: Increase::AccountNumber::InboundChecks,
        name: String,
        routing_number: String,
        status: Increase::Models::AccountNumber::status,
        type: Increase::Models::AccountNumber::type_
      ) -> void

      def to_hash: -> {
        id: String,
        account_id: String,
        account_number: String,
        created_at: Time,
        idempotency_key: String?,
        inbound_ach: Increase::AccountNumber::InboundACH,
        inbound_checks: Increase::AccountNumber::InboundChecks,
        name: String,
        routing_number: String,
        status: Increase::Models::AccountNumber::status,
        type: Increase::Models::AccountNumber::type_
      }

      type inbound_ach =
        {
          debit_status: Increase::Models::AccountNumber::InboundACH::debit_status
        }

      class InboundACH < Increase::Internal::Type::BaseModel
        attr_accessor debit_status: Increase::Models::AccountNumber::InboundACH::debit_status

        def initialize: (
          debit_status: Increase::Models::AccountNumber::InboundACH::debit_status
        ) -> void

        def to_hash: -> {
          debit_status: Increase::Models::AccountNumber::InboundACH::debit_status
        }

        type debit_status = :allowed | :blocked

        module DebitStatus
          extend Increase::Internal::Type::Enum

          # ACH Debits are allowed.
          ALLOWED: :allowed

          # ACH Debits are blocked.
          BLOCKED: :blocked

          def self?.values: -> ::Array[Increase::Models::AccountNumber::InboundACH::debit_status]
        end
      end

      type inbound_checks =
        { status: Increase::Models::AccountNumber::InboundChecks::status }

      class InboundChecks < Increase::Internal::Type::BaseModel
        attr_accessor status: Increase::Models::AccountNumber::InboundChecks::status

        def initialize: (
          status: Increase::Models::AccountNumber::InboundChecks::status
        ) -> void

        def to_hash: -> {
          status: Increase::Models::AccountNumber::InboundChecks::status
        }

        type status = :allowed | :check_transfers_only

        module Status
          extend Increase::Internal::Type::Enum

          # Checks with this Account Number will be processed even if they are not associated with a Check Transfer.
          ALLOWED: :allowed

          # Checks with this Account Number will be processed only if they can be matched to an existing Check Transfer.
          CHECK_TRANSFERS_ONLY: :check_transfers_only

          def self?.values: -> ::Array[Increase::Models::AccountNumber::InboundChecks::status]
        end
      end

      type status = :active | :disabled | :canceled

      module Status
        extend Increase::Internal::Type::Enum

        # The account number is active.
        ACTIVE: :active

        # The account number is temporarily disabled.
        DISABLED: :disabled

        # The account number is permanently disabled.
        CANCELED: :canceled

        def self?.values: -> ::Array[Increase::Models::AccountNumber::status]
      end

      type type_ = :account_number

      module Type
        extend Increase::Internal::Type::Enum

        ACCOUNT_NUMBER: :account_number

        def self?.values: -> ::Array[Increase::Models::AccountNumber::type_]
      end
    end
  end
end
