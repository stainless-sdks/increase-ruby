module Increase
  module Models
    type intrafi_exclusion = {
      id: String,
      bank_name: String,
      created_at: Time,
      entity_id: String,
      excluded_at: Time?,
      fdic_certificate_number: String?,
      idempotency_key: String?,
      status: Increase::Models::IntrafiExclusion::status,
      submitted_at: Time?,
      type: Increase::Models::IntrafiExclusion::type_
    }

    class IntrafiExclusion < Increase::BaseModel
      attr_accessor id: String

      attr_accessor bank_name: String

      attr_accessor created_at: Time

      attr_accessor entity_id: String

      attr_accessor excluded_at: Time?

      attr_accessor fdic_certificate_number: String?

      attr_accessor idempotency_key: String?

      attr_accessor status: Increase::Models::IntrafiExclusion::status

      attr_accessor submitted_at: Time?

      attr_accessor type: Increase::Models::IntrafiExclusion::type_

      def initialize: (id: String, bank_name: String, created_at: Time, entity_id: String, excluded_at: Time?, fdic_certificate_number: String?, idempotency_key: String?, status: Increase::Models::IntrafiExclusion::status, submitted_at: Time?, type: Increase::Models::IntrafiExclusion::type_) -> void
                    | (?(Increase::Models::intrafi_exclusion | Increase::BaseModel) data) -> void

      def to_hash: () -> Increase::Models::intrafi_exclusion

      type status = (:pending | :completed | :archived)

      class Status < Increase::Enum
        # The exclusion is being added to the IntraFi network.
        PENDING: :pending

        # The exclusion has been added to the IntraFi network.
        COMPLETED: :completed

        # The exclusion has been removed from the IntraFi network.
        ARCHIVED: :archived

        def self.values: () -> ::Array[Increase::Models::IntrafiExclusion::status]
      end

      type type_ = :intrafi_exclusion

      class Type < Increase::Enum
        INTRAFI_EXCLUSION: :intrafi_exclusion

        def self.values: () -> ::Array[Increase::Models::IntrafiExclusion::type_]
      end
    end
  end
end
