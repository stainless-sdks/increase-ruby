module Increase
  module Models
    type card =
      {
        id: String,
        account_id: String,
        billing_address: Increase::Models::Card::BillingAddress,
        created_at: Time,
        description: String?,
        digital_wallet: Increase::Models::Card::DigitalWallet?,
        entity_id: String?,
        expiration_month: Integer,
        expiration_year: Integer,
        idempotency_key: String?,
        :last4 => String,
        status: Increase::Models::Card::status,
        type: Increase::Models::Card::type_
      }

    class Card < Increase::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor billing_address: Increase::Models::Card::BillingAddress

      attr_accessor created_at: Time

      attr_accessor description: String?

      attr_accessor digital_wallet: Increase::Models::Card::DigitalWallet?

      attr_accessor entity_id: String?

      attr_accessor expiration_month: Integer

      attr_accessor expiration_year: Integer

      attr_accessor idempotency_key: String?

      attr_accessor last4: String

      attr_accessor status: Increase::Models::Card::status

      attr_accessor type: Increase::Models::Card::type_

      def initialize: (
        id: String,
        account_id: String,
        billing_address: Increase::Models::Card::BillingAddress,
        created_at: Time,
        description: String?,
        digital_wallet: Increase::Models::Card::DigitalWallet?,
        entity_id: String?,
        expiration_month: Integer,
        expiration_year: Integer,
        idempotency_key: String?,
        last4: String,
        status: Increase::Models::Card::status,
        type: Increase::Models::Card::type_
      ) -> void

      def to_hash: -> Increase::Models::card

      type billing_address =
        {
          city: String?,
          :line1 => String?,
          :line2 => String?,
          postal_code: String?,
          state: String?
        }

      class BillingAddress < Increase::BaseModel
        attr_accessor city: String?

        attr_accessor line1: String?

        attr_accessor line2: String?

        attr_accessor postal_code: String?

        attr_accessor state: String?

        def initialize: (
          city: String?,
          line1: String?,
          line2: String?,
          postal_code: String?,
          state: String?
        ) -> void

        def to_hash: -> Increase::Models::Card::billing_address
      end

      type digital_wallet =
        { digital_card_profile_id: String?, email: String?, phone: String? }

      class DigitalWallet < Increase::BaseModel
        attr_accessor digital_card_profile_id: String?

        attr_accessor email: String?

        attr_accessor phone: String?

        def initialize: (
          digital_card_profile_id: String?,
          email: String?,
          phone: String?
        ) -> void

        def to_hash: -> Increase::Models::Card::digital_wallet
      end

      type status = :active | :disabled | :canceled

      module Status
        extend Increase::Enum

        # The card is active.
        ACTIVE: :active

        # The card is temporarily disabled.
        DISABLED: :disabled

        # The card is permanently canceled.
        CANCELED: :canceled

        def self?.values: -> ::Array[Increase::Models::Card::status]
      end

      type type_ = :card

      module Type
        extend Increase::Enum

        CARD: :card

        def self?.values: -> ::Array[Increase::Models::Card::type_]
      end
    end
  end
end
