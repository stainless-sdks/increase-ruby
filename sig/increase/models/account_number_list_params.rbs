module Increase
  module Models
    type account_number_list_params =
      {
        account_id: String,
        ach_debit_status: Increase::Models::AccountNumberListParams::ACHDebitStatus,
        created_at: Increase::Models::AccountNumberListParams::CreatedAt,
        cursor: String,
        idempotency_key: String,
        limit: Integer,
        status: Increase::Models::AccountNumberListParams::Status
      }
      & Increase::Internal::Type::request_parameters

    class AccountNumberListParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_reader account_id: String?

      def account_id=: (String) -> String

      attr_reader ach_debit_status: Increase::Models::AccountNumberListParams::ACHDebitStatus?

      def ach_debit_status=: (
        Increase::Models::AccountNumberListParams::ACHDebitStatus
      ) -> Increase::Models::AccountNumberListParams::ACHDebitStatus

      attr_reader created_at: Increase::Models::AccountNumberListParams::CreatedAt?

      def created_at=: (
        Increase::Models::AccountNumberListParams::CreatedAt
      ) -> Increase::Models::AccountNumberListParams::CreatedAt

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader idempotency_key: String?

      def idempotency_key=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader status: Increase::Models::AccountNumberListParams::Status?

      def status=: (
        Increase::Models::AccountNumberListParams::Status
      ) -> Increase::Models::AccountNumberListParams::Status

      def initialize: (
        ?account_id: String,
        ?ach_debit_status: Increase::Models::AccountNumberListParams::ACHDebitStatus,
        ?created_at: Increase::Models::AccountNumberListParams::CreatedAt,
        ?cursor: String,
        ?idempotency_key: String,
        ?limit: Integer,
        ?status: Increase::Models::AccountNumberListParams::Status,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> Increase::Models::account_number_list_params

      type ach_debit_status =
        {
          in_: ::Array[Increase::Models::AccountNumberListParams::ACHDebitStatus::in_]
        }

      class ACHDebitStatus < Increase::Internal::Type::BaseModel
        attr_reader in_: ::Array[Increase::Models::AccountNumberListParams::ACHDebitStatus::in_]?

        def in_=: (
          ::Array[Increase::Models::AccountNumberListParams::ACHDebitStatus::in_]
        ) -> ::Array[Increase::Models::AccountNumberListParams::ACHDebitStatus::in_]

        def initialize: (
          ?in_: ::Array[Increase::Models::AccountNumberListParams::ACHDebitStatus::in_]
        ) -> void

        def to_hash: -> Increase::Models::AccountNumberListParams::ach_debit_status

        type in_ = :allowed | :blocked

        module In
          extend Increase::Internal::Type::Enum

          # ACH Debits are allowed.
          ALLOWED: :allowed

          # ACH Debits are blocked.
          BLOCKED: :blocked

          def self?.values: -> ::Array[Increase::Models::AccountNumberListParams::ACHDebitStatus::in_]
        end
      end

      type created_at =
        { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

      class CreatedAt < Increase::Internal::Type::BaseModel
        attr_reader after: Time?

        def after=: (Time) -> Time

        attr_reader before: Time?

        def before=: (Time) -> Time

        attr_reader on_or_after: Time?

        def on_or_after=: (Time) -> Time

        attr_reader on_or_before: Time?

        def on_or_before=: (Time) -> Time

        def initialize: (
          ?after: Time,
          ?before: Time,
          ?on_or_after: Time,
          ?on_or_before: Time
        ) -> void

        def to_hash: -> Increase::Models::AccountNumberListParams::created_at
      end

      type status =
        { in_: ::Array[Increase::Models::AccountNumberListParams::Status::in_] }

      class Status < Increase::Internal::Type::BaseModel
        attr_reader in_: ::Array[Increase::Models::AccountNumberListParams::Status::in_]?

        def in_=: (
          ::Array[Increase::Models::AccountNumberListParams::Status::in_]
        ) -> ::Array[Increase::Models::AccountNumberListParams::Status::in_]

        def initialize: (
          ?in_: ::Array[Increase::Models::AccountNumberListParams::Status::in_]
        ) -> void

        def to_hash: -> Increase::Models::AccountNumberListParams::status

        type in_ = :active | :disabled | :canceled

        module In
          extend Increase::Internal::Type::Enum

          # The account number is active.
          ACTIVE: :active

          # The account number is temporarily disabled.
          DISABLED: :disabled

          # The account number is permanently disabled.
          CANCELED: :canceled

          def self?.values: -> ::Array[Increase::Models::AccountNumberListParams::Status::in_]
        end
      end
    end
  end
end
