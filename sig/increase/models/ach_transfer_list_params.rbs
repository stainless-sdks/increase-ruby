module Increase
  module Models
    type ach_transfer_list_params = ({
      account_id: String,
      created_at: Increase::ACHTransferListParams::CreatedAt,
      cursor: String,
      external_account_id: String,
      idempotency_key: String,
      limit: Integer,
      status: Increase::ACHTransferListParams::Status
    } & Increase::Internal::Type::request_parameters)

    class ACHTransferListParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_reader account_id: String?

      def account_id=: (String) -> String

      attr_reader created_at: Increase::ACHTransferListParams::CreatedAt?

      def created_at=: (Increase::ACHTransferListParams::CreatedAt) -> Increase::ACHTransferListParams::CreatedAt

      attr_reader cursor: String?

      def cursor=: (String) -> String

      attr_reader external_account_id: String?

      def external_account_id=: (String) -> String

      attr_reader idempotency_key: String?

      def idempotency_key=: (String) -> String

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader status: Increase::ACHTransferListParams::Status?

      def status=: (Increase::ACHTransferListParams::Status) -> Increase::ACHTransferListParams::Status

      def initialize: (?account_id: String, ?created_at: Increase::ACHTransferListParams::CreatedAt, ?cursor: String, ?external_account_id: String, ?idempotency_key: String, ?limit: Integer, ?status: Increase::ACHTransferListParams::Status, ?request_options: Increase::request_opts) -> void

      def to_hash: () -> {
        account_id: String,
        created_at: Increase::ACHTransferListParams::CreatedAt,
        cursor: String,
        external_account_id: String,
        idempotency_key: String,
        limit: Integer,
        status: Increase::ACHTransferListParams::Status,
        request_options: Increase::RequestOptions
      }

      type created_at = {after: Time, before: Time, on_or_after: Time, on_or_before: Time}

      class CreatedAt < Increase::Internal::Type::BaseModel
        attr_reader after: Time?

        def after=: (Time) -> Time

        attr_reader before: Time?

        def before=: (Time) -> Time

        attr_reader on_or_after: Time?

        def on_or_after=: (Time) -> Time

        attr_reader on_or_before: Time?

        def on_or_before=: (Time) -> Time

        def initialize: (?after: Time, ?before: Time, ?on_or_after: Time, ?on_or_before: Time) -> void

        def to_hash: () -> {after: Time, before: Time, on_or_after: Time, on_or_before: Time}
      end

      type status = {in_: ::Array[Increase::Models::ACHTransferListParams::Status::in_]}

      class Status < Increase::Internal::Type::BaseModel
        attr_reader in_: ::Array[Increase::Models::ACHTransferListParams::Status::in_]?

        def in_=: (::Array[Increase::Models::ACHTransferListParams::Status::in_]) -> ::Array[Increase::Models::ACHTransferListParams::Status::in_]

        def initialize: (?in_: ::Array[Increase::Models::ACHTransferListParams::Status::in_]) -> void

        def to_hash: () -> {in_: ::Array[Increase::Models::ACHTransferListParams::Status::in_]}

        type in_ = (:pending_approval | :pending_transfer_session_confirmation | :canceled | :pending_submission | :pending_reviewing | :requires_attention | :rejected | :submitted | :returned)

        module In
          extend Increase::Internal::Type::Enum

          # The transfer is pending approval.
          PENDING_APPROVAL: :pending_approval

          # The transfer belongs to a Transfer Session that is pending confirmation.
          PENDING_TRANSFER_SESSION_CONFIRMATION: :pending_transfer_session_confirmation

          # The transfer has been canceled.
          CANCELED: :canceled

          # The transfer is pending submission to the Federal Reserve.
          PENDING_SUBMISSION: :pending_submission

          # The transfer is pending review by Increase.
          PENDING_REVIEWING: :pending_reviewing

          # The transfer requires attention from an Increase operator.
          REQUIRES_ATTENTION: :requires_attention

          # The transfer has been rejected.
          REJECTED: :rejected

          # The transfer is complete.
          SUBMITTED: :submitted

          # The transfer has been returned.
          RETURNED: :returned

          def self?.values: () -> ::Array[Increase::Models::ACHTransferListParams::Status::in_]
        end
      end
    end
  end
end
