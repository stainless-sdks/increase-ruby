module Increase
  module Models
    type event_subscription_update_params =
      { status: Increase::Models::EventSubscriptionUpdateParams::status }
      & Increase::request_parameters

    class EventSubscriptionUpdateParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_reader status: Increase::Models::EventSubscriptionUpdateParams::status?

      def status=: (
        Increase::Models::EventSubscriptionUpdateParams::status
      ) -> Increase::Models::EventSubscriptionUpdateParams::status

      def initialize:
        (
          status: Increase::Models::EventSubscriptionUpdateParams::status,
          request_options: Increase::request_opts
        ) -> void
        | (
          ?Increase::Models::event_subscription_update_params
          | Increase::BaseModel data
        ) -> void

      def to_hash: -> Increase::Models::event_subscription_update_params

      type status = :active | :disabled | :deleted

      class Status < Increase::Enum
        # The subscription is active and Events will be delivered normally.
        ACTIVE: :active

        # The subscription is temporarily disabled and Events will not be delivered.
        DISABLED: :disabled

        # The subscription is permanently disabled and Events will not be delivered.
        DELETED: :deleted

        def self.values: -> ::Array[Increase::Models::EventSubscriptionUpdateParams::status]
      end
    end
  end
end
