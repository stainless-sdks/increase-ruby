module Increase
  module Models
    type check_transfer_create_params =
      {
        account_id: String,
        amount: Integer,
        fulfillment_method: Increase::Models::CheckTransferCreateParams::fulfillment_method,
        source_account_number_id: String,
        check_number: String,
        physical_check: Increase::CheckTransferCreateParams::PhysicalCheck,
        require_approval: bool,
        third_party: Increase::CheckTransferCreateParams::ThirdParty
      }
      & Increase::Internal::Type::request_parameters

    class CheckTransferCreateParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor fulfillment_method: Increase::Models::CheckTransferCreateParams::fulfillment_method

      attr_accessor source_account_number_id: String

      attr_reader check_number: String?

      def check_number=: (String) -> String

      attr_reader physical_check: Increase::CheckTransferCreateParams::PhysicalCheck?

      def physical_check=: (
        Increase::CheckTransferCreateParams::PhysicalCheck
      ) -> Increase::CheckTransferCreateParams::PhysicalCheck

      attr_reader require_approval: bool?

      def require_approval=: (bool) -> bool

      attr_reader third_party: Increase::CheckTransferCreateParams::ThirdParty?

      def third_party=: (
        Increase::CheckTransferCreateParams::ThirdParty
      ) -> Increase::CheckTransferCreateParams::ThirdParty

      def initialize: (
        account_id: String,
        amount: Integer,
        fulfillment_method: Increase::Models::CheckTransferCreateParams::fulfillment_method,
        source_account_number_id: String,
        ?check_number: String,
        ?physical_check: Increase::CheckTransferCreateParams::PhysicalCheck,
        ?require_approval: bool,
        ?third_party: Increase::CheckTransferCreateParams::ThirdParty,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> ::Hash[Symbol, top]

      type fulfillment_method = :physical_check | :third_party

      module FulfillmentMethod
        extend Increase::Internal::Type::Enum

        # Increase will print and mail a physical check.
        PHYSICAL_CHECK: :physical_check

        # Increase will not print a check; you are responsible for printing and mailing a check with the provided account number, routing number, check number, and amount.
        THIRD_PARTY: :third_party

        def self?.values: -> ::Array[Increase::Models::CheckTransferCreateParams::fulfillment_method]
      end

      type physical_check =
        {
          mailing_address: Increase::CheckTransferCreateParams::PhysicalCheck::MailingAddress,
          memo: String,
          recipient_name: String,
          attachment_file_id: String,
          note: String,
          return_address: Increase::CheckTransferCreateParams::PhysicalCheck::ReturnAddress,
          shipping_method: Increase::CheckTransferCreateParams::PhysicalCheck::shipping_method,
          signature_text: String
        }

      class PhysicalCheck < Increase::Internal::Type::BaseModel
        attr_accessor mailing_address: Increase::CheckTransferCreateParams::PhysicalCheck::MailingAddress

        attr_accessor memo: String

        attr_accessor recipient_name: String

        attr_reader attachment_file_id: String?

        def attachment_file_id=: (String) -> String

        attr_reader note: String?

        def note=: (String) -> String

        attr_reader return_address: Increase::CheckTransferCreateParams::PhysicalCheck::ReturnAddress?

        def return_address=: (
          Increase::CheckTransferCreateParams::PhysicalCheck::ReturnAddress
        ) -> Increase::CheckTransferCreateParams::PhysicalCheck::ReturnAddress

        attr_reader shipping_method: Increase::CheckTransferCreateParams::PhysicalCheck::shipping_method?

        def shipping_method=: (
          Increase::CheckTransferCreateParams::PhysicalCheck::shipping_method
        ) -> Increase::CheckTransferCreateParams::PhysicalCheck::shipping_method

        attr_reader signature_text: String?

        def signature_text=: (String) -> String

        def initialize: (
          mailing_address: Increase::CheckTransferCreateParams::PhysicalCheck::MailingAddress,
          memo: String,
          recipient_name: String,
          ?attachment_file_id: String,
          ?note: String,
          ?return_address: Increase::CheckTransferCreateParams::PhysicalCheck::ReturnAddress,
          ?shipping_method: Increase::CheckTransferCreateParams::PhysicalCheck::shipping_method,
          ?signature_text: String
        ) -> void

        def to_hash: -> ::Hash[Symbol, top]

        type mailing_address =
          {
            city: String,
            :line1 => String,
            postal_code: String,
            state: String,
            :line2 => String
          }

        class MailingAddress < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor postal_code: String

          attr_accessor state: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize: (
            city: String,
            line1: String,
            postal_code: String,
            state: String,
            ?line2: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type return_address =
          {
            city: String,
            :line1 => String,
            name: String,
            postal_code: String,
            state: String,
            :line2 => String
          }

        class ReturnAddress < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor name: String

          attr_accessor postal_code: String

          attr_accessor state: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize: (
            city: String,
            line1: String,
            name: String,
            postal_code: String,
            state: String,
            ?line2: String
          ) -> void

          def to_hash: -> ::Hash[Symbol, top]
        end

        type shipping_method = :usps_first_class | :fedex_overnight

        module ShippingMethod
          extend Increase::Internal::Type::Enum

          # USPS First Class
          USPS_FIRST_CLASS: :usps_first_class

          # FedEx Overnight
          FEDEX_OVERNIGHT: :fedex_overnight

          def self?.values: -> ::Array[Increase::CheckTransferCreateParams::PhysicalCheck::shipping_method]
        end
      end

      type third_party = { recipient_name: String }

      class ThirdParty < Increase::Internal::Type::BaseModel
        attr_reader recipient_name: String?

        def recipient_name=: (String) -> String

        def initialize: (?recipient_name: String) -> void

        def to_hash: -> ::Hash[Symbol, top]
      end
    end
  end
end
