module Increase
  module Models
    type check_deposit =
      {
        id: String,
        account_id: String,
        amount: Integer,
        back_image_file_id: String?,
        created_at: Time,
        deposit_acceptance: Increase::Models::CheckDeposit::DepositAcceptance?,
        deposit_rejection: Increase::Models::CheckDeposit::DepositRejection?,
        deposit_return: Increase::Models::CheckDeposit::DepositReturn?,
        deposit_submission: Increase::Models::CheckDeposit::DepositSubmission?,
        description: String?,
        front_image_file_id: String,
        idempotency_key: String?,
        inbound_funds_hold: Increase::Models::CheckDeposit::InboundFundsHold?,
        inbound_mail_item_id: String?,
        lockbox_id: String?,
        status: Increase::Models::CheckDeposit::status,
        transaction_id: String?,
        type: Increase::Models::CheckDeposit::type_
      }

    class CheckDeposit < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor back_image_file_id: String?

      attr_accessor created_at: Time

      attr_accessor deposit_acceptance: Increase::Models::CheckDeposit::DepositAcceptance?

      attr_accessor deposit_rejection: Increase::Models::CheckDeposit::DepositRejection?

      attr_accessor deposit_return: Increase::Models::CheckDeposit::DepositReturn?

      attr_accessor deposit_submission: Increase::Models::CheckDeposit::DepositSubmission?

      attr_accessor description: String?

      attr_accessor front_image_file_id: String

      attr_accessor idempotency_key: String?

      attr_accessor inbound_funds_hold: Increase::Models::CheckDeposit::InboundFundsHold?

      attr_accessor inbound_mail_item_id: String?

      attr_accessor lockbox_id: String?

      attr_accessor status: Increase::Models::CheckDeposit::status

      attr_accessor transaction_id: String?

      attr_accessor type: Increase::Models::CheckDeposit::type_

      def initialize: (
        id: String,
        account_id: String,
        amount: Integer,
        back_image_file_id: String?,
        created_at: Time,
        deposit_acceptance: Increase::Models::CheckDeposit::DepositAcceptance?,
        deposit_rejection: Increase::Models::CheckDeposit::DepositRejection?,
        deposit_return: Increase::Models::CheckDeposit::DepositReturn?,
        deposit_submission: Increase::Models::CheckDeposit::DepositSubmission?,
        description: String?,
        front_image_file_id: String,
        idempotency_key: String?,
        inbound_funds_hold: Increase::Models::CheckDeposit::InboundFundsHold?,
        inbound_mail_item_id: String?,
        lockbox_id: String?,
        status: Increase::Models::CheckDeposit::status,
        transaction_id: String?,
        type: Increase::Models::CheckDeposit::type_
      ) -> void

      def to_hash: -> Increase::Models::check_deposit

      type deposit_acceptance =
        {
          account_number: String,
          amount: Integer,
          auxiliary_on_us: String?,
          check_deposit_id: String,
          currency: Increase::Models::CheckDeposit::DepositAcceptance::currency,
          routing_number: String,
          serial_number: String?
        }

      class DepositAcceptance < Increase::Internal::Type::BaseModel
        attr_accessor account_number: String

        attr_accessor amount: Integer

        attr_accessor auxiliary_on_us: String?

        attr_accessor check_deposit_id: String

        attr_accessor currency: Increase::Models::CheckDeposit::DepositAcceptance::currency

        attr_accessor routing_number: String

        attr_accessor serial_number: String?

        def initialize: (
          account_number: String,
          amount: Integer,
          auxiliary_on_us: String?,
          check_deposit_id: String,
          currency: Increase::Models::CheckDeposit::DepositAcceptance::currency,
          routing_number: String,
          serial_number: String?
        ) -> void

        def to_hash: -> Increase::Models::CheckDeposit::deposit_acceptance

        type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

        module Currency
          extend Increase::Internal::Type::Enum

          # Canadian Dollar (CAD)
          CAD: :CAD

          # Swiss Franc (CHF)
          CHF: :CHF

          # Euro (EUR)
          EUR: :EUR

          # British Pound (GBP)
          GBP: :GBP

          # Japanese Yen (JPY)
          JPY: :JPY

          # US Dollar (USD)
          USD: :USD

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::DepositAcceptance::currency]
        end
      end

      type deposit_rejection =
        {
          amount: Integer,
          check_deposit_id: String,
          currency: Increase::Models::CheckDeposit::DepositRejection::currency,
          declined_transaction_id: String,
          reason: Increase::Models::CheckDeposit::DepositRejection::reason,
          rejected_at: Time
        }

      class DepositRejection < Increase::Internal::Type::BaseModel
        attr_accessor amount: Integer

        attr_accessor check_deposit_id: String

        attr_accessor currency: Increase::Models::CheckDeposit::DepositRejection::currency

        attr_accessor declined_transaction_id: String

        attr_accessor reason: Increase::Models::CheckDeposit::DepositRejection::reason

        attr_accessor rejected_at: Time

        def initialize: (
          amount: Integer,
          check_deposit_id: String,
          currency: Increase::Models::CheckDeposit::DepositRejection::currency,
          declined_transaction_id: String,
          reason: Increase::Models::CheckDeposit::DepositRejection::reason,
          rejected_at: Time
        ) -> void

        def to_hash: -> Increase::Models::CheckDeposit::deposit_rejection

        type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

        module Currency
          extend Increase::Internal::Type::Enum

          # Canadian Dollar (CAD)
          CAD: :CAD

          # Swiss Franc (CHF)
          CHF: :CHF

          # Euro (EUR)
          EUR: :EUR

          # British Pound (GBP)
          GBP: :GBP

          # Japanese Yen (JPY)
          JPY: :JPY

          # US Dollar (USD)
          USD: :USD

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::DepositRejection::currency]
        end

        type reason =
          :incomplete_image
          | :duplicate
          | :poor_image_quality
          | :incorrect_amount
          | :incorrect_recipient
          | :not_eligible_for_mobile_deposit
          | :missing_required_data_elements
          | :suspected_fraud
          | :deposit_window_expired
          | :requested_by_user
          | :unknown

        module Reason
          extend Increase::Internal::Type::Enum

          # The check's image is incomplete.
          INCOMPLETE_IMAGE: :incomplete_image

          # This is a duplicate check submission.
          DUPLICATE: :duplicate

          # This check has poor image quality.
          POOR_IMAGE_QUALITY: :poor_image_quality

          # The check was deposited with the incorrect amount.
          INCORRECT_AMOUNT: :incorrect_amount

          # The check is made out to someone other than the account holder.
          INCORRECT_RECIPIENT: :incorrect_recipient

          # This check was not eligible for mobile deposit.
          NOT_ELIGIBLE_FOR_MOBILE_DEPOSIT: :not_eligible_for_mobile_deposit

          # This check is missing at least one required field.
          MISSING_REQUIRED_DATA_ELEMENTS: :missing_required_data_elements

          # This check is suspected to be fraudulent.
          SUSPECTED_FRAUD: :suspected_fraud

          # This check's deposit window has expired.
          DEPOSIT_WINDOW_EXPIRED: :deposit_window_expired

          # The check was rejected at the user's request.
          REQUESTED_BY_USER: :requested_by_user

          # The check was rejected for an unknown reason.
          UNKNOWN: :unknown

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::DepositRejection::reason]
        end
      end

      type deposit_return =
        {
          amount: Integer,
          check_deposit_id: String,
          currency: Increase::Models::CheckDeposit::DepositReturn::currency,
          return_reason: Increase::Models::CheckDeposit::DepositReturn::return_reason,
          returned_at: Time,
          transaction_id: String
        }

      class DepositReturn < Increase::Internal::Type::BaseModel
        attr_accessor amount: Integer

        attr_accessor check_deposit_id: String

        attr_accessor currency: Increase::Models::CheckDeposit::DepositReturn::currency

        attr_accessor return_reason: Increase::Models::CheckDeposit::DepositReturn::return_reason

        attr_accessor returned_at: Time

        attr_accessor transaction_id: String

        def initialize: (
          amount: Integer,
          check_deposit_id: String,
          currency: Increase::Models::CheckDeposit::DepositReturn::currency,
          return_reason: Increase::Models::CheckDeposit::DepositReturn::return_reason,
          returned_at: Time,
          transaction_id: String
        ) -> void

        def to_hash: -> Increase::Models::CheckDeposit::deposit_return

        type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

        module Currency
          extend Increase::Internal::Type::Enum

          # Canadian Dollar (CAD)
          CAD: :CAD

          # Swiss Franc (CHF)
          CHF: :CHF

          # Euro (EUR)
          EUR: :EUR

          # British Pound (GBP)
          GBP: :GBP

          # Japanese Yen (JPY)
          JPY: :JPY

          # US Dollar (USD)
          USD: :USD

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::DepositReturn::currency]
        end

        type return_reason =
          :ach_conversion_not_supported
          | :closed_account
          | :duplicate_submission
          | :insufficient_funds
          | :no_account
          | :not_authorized
          | :stale_dated
          | :stop_payment
          | :unknown_reason
          | :unmatched_details
          | :unreadable_image
          | :endorsement_irregular
          | :altered_or_fictitious_item
          | :frozen_or_blocked_account
          | :post_dated
          | :endorsement_missing
          | :signature_missing
          | :stop_payment_suspect
          | :unusable_image
          | :image_fails_security_check
          | :cannot_determine_amount
          | :signature_irregular
          | :non_cash_item
          | :unable_to_process
          | :item_exceeds_dollar_limit
          | :branch_or_account_sold

        module ReturnReason
          extend Increase::Internal::Type::Enum

          # The check doesn't allow ACH conversion.
          ACH_CONVERSION_NOT_SUPPORTED: :ach_conversion_not_supported

          # The account is closed.
          CLOSED_ACCOUNT: :closed_account

          # The check has already been deposited.
          DUPLICATE_SUBMISSION: :duplicate_submission

          # Insufficient funds
          INSUFFICIENT_FUNDS: :insufficient_funds

          # No account was found matching the check details.
          NO_ACCOUNT: :no_account

          # The check was not authorized.
          NOT_AUTHORIZED: :not_authorized

          # The check is too old.
          STALE_DATED: :stale_dated

          # The payment has been stopped by the account holder.
          STOP_PAYMENT: :stop_payment

          # The reason for the return is unknown.
          UNKNOWN_REASON: :unknown_reason

          # The image doesn't match the details submitted.
          UNMATCHED_DETAILS: :unmatched_details

          # The image could not be read.
          UNREADABLE_IMAGE: :unreadable_image

          # The check endorsement was irregular.
          ENDORSEMENT_IRREGULAR: :endorsement_irregular

          # The check present was either altered or fake.
          ALTERED_OR_FICTITIOUS_ITEM: :altered_or_fictitious_item

          # The account this check is drawn on is frozen.
          FROZEN_OR_BLOCKED_ACCOUNT: :frozen_or_blocked_account

          # The check is post dated.
          POST_DATED: :post_dated

          # The endorsement was missing.
          ENDORSEMENT_MISSING: :endorsement_missing

          # The check signature was missing.
          SIGNATURE_MISSING: :signature_missing

          # The bank suspects a stop payment will be placed.
          STOP_PAYMENT_SUSPECT: :stop_payment_suspect

          # The bank cannot read the image.
          UNUSABLE_IMAGE: :unusable_image

          # The check image fails the bank's security check.
          IMAGE_FAILS_SECURITY_CHECK: :image_fails_security_check

          # The bank cannot determine the amount.
          CANNOT_DETERMINE_AMOUNT: :cannot_determine_amount

          # The signature is inconsistent with prior signatures.
          SIGNATURE_IRREGULAR: :signature_irregular

          # The check is a non-cash item and cannot be drawn against the account.
          NON_CASH_ITEM: :non_cash_item

          # The bank is unable to process this check.
          UNABLE_TO_PROCESS: :unable_to_process

          # The check exceeds the bank or customer's limit.
          ITEM_EXCEEDS_DOLLAR_LIMIT: :item_exceeds_dollar_limit

          # The bank sold this account and no longer services this customer.
          BRANCH_OR_ACCOUNT_SOLD: :branch_or_account_sold

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::DepositReturn::return_reason]
        end
      end

      type deposit_submission =
        { back_file_id: String, front_file_id: String, submitted_at: Time }

      class DepositSubmission < Increase::Internal::Type::BaseModel
        attr_accessor back_file_id: String

        attr_accessor front_file_id: String

        attr_accessor submitted_at: Time

        def initialize: (
          back_file_id: String,
          front_file_id: String,
          submitted_at: Time
        ) -> void

        def to_hash: -> Increase::Models::CheckDeposit::deposit_submission
      end

      type inbound_funds_hold =
        {
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::CheckDeposit::InboundFundsHold::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::CheckDeposit::InboundFundsHold::status,
          type: Increase::Models::CheckDeposit::InboundFundsHold::type_
        }

      class InboundFundsHold < Increase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor amount: Integer

        attr_accessor automatically_releases_at: Time

        attr_accessor created_at: Time

        attr_accessor currency: Increase::Models::CheckDeposit::InboundFundsHold::currency

        attr_accessor held_transaction_id: String?

        attr_accessor pending_transaction_id: String?

        attr_accessor released_at: Time?

        attr_accessor status: Increase::Models::CheckDeposit::InboundFundsHold::status

        attr_accessor type: Increase::Models::CheckDeposit::InboundFundsHold::type_

        def initialize: (
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::CheckDeposit::InboundFundsHold::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::CheckDeposit::InboundFundsHold::status,
          type: Increase::Models::CheckDeposit::InboundFundsHold::type_
        ) -> void

        def to_hash: -> Increase::Models::CheckDeposit::inbound_funds_hold

        type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

        module Currency
          extend Increase::Internal::Type::Enum

          # Canadian Dollar (CAD)
          CAD: :CAD

          # Swiss Franc (CHF)
          CHF: :CHF

          # Euro (EUR)
          EUR: :EUR

          # British Pound (GBP)
          GBP: :GBP

          # Japanese Yen (JPY)
          JPY: :JPY

          # US Dollar (USD)
          USD: :USD

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::InboundFundsHold::currency]
        end

        type status = :held | :complete

        module Status
          extend Increase::Internal::Type::Enum

          # Funds are still being held.
          HELD: :held

          # Funds have been released.
          COMPLETE: :complete

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::InboundFundsHold::status]
        end

        type type_ = :inbound_funds_hold

        module Type
          extend Increase::Internal::Type::Enum

          INBOUND_FUNDS_HOLD: :inbound_funds_hold

          def self?.values: -> ::Array[Increase::Models::CheckDeposit::InboundFundsHold::type_]
        end
      end

      type status = :pending | :submitted | :rejected | :returned

      module Status
        extend Increase::Internal::Type::Enum

        # The Check Deposit is pending review.
        PENDING: :pending

        # The Check Deposit has been deposited.
        SUBMITTED: :submitted

        # The Check Deposit has been rejected.
        REJECTED: :rejected

        # The Check Deposit has been returned.
        RETURNED: :returned

        def self?.values: -> ::Array[Increase::Models::CheckDeposit::status]
      end

      type type_ = :check_deposit

      module Type
        extend Increase::Internal::Type::Enum

        CHECK_DEPOSIT: :check_deposit

        def self?.values: -> ::Array[Increase::Models::CheckDeposit::type_]
      end
    end
  end
end
