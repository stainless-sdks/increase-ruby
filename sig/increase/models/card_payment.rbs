module Increase
  module Models
    type card_payment =
      {
        id: String,
        account_id: String,
        card_id: String,
        created_at: Time,
        digital_wallet_token_id: String?,
        elements: ::Array[Increase::CardPayment::Element],
        physical_card_id: String?,
        state: Increase::CardPayment::State,
        type: Increase::Models::CardPayment::type_
      }

    class CardPayment < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor card_id: String

      attr_accessor created_at: Time

      attr_accessor digital_wallet_token_id: String?

      attr_accessor elements: ::Array[Increase::CardPayment::Element]

      attr_accessor physical_card_id: String?

      attr_accessor state: Increase::CardPayment::State

      attr_accessor type: Increase::Models::CardPayment::type_

      def initialize: (
        id: String,
        account_id: String,
        card_id: String,
        created_at: Time,
        digital_wallet_token_id: String?,
        elements: ::Array[Increase::CardPayment::Element],
        physical_card_id: String?,
        state: Increase::CardPayment::State,
        type: Increase::Models::CardPayment::type_
      ) -> void

      def to_hash: -> {
        id: String,
        account_id: String,
        card_id: String,
        created_at: Time,
        digital_wallet_token_id: String?,
        elements: ::Array[Increase::CardPayment::Element],
        physical_card_id: String?,
        state: Increase::CardPayment::State,
        type: Increase::Models::CardPayment::type_
      }

      type element =
        {
          card_authentication: Increase::CardPayment::Element::CardAuthentication?,
          card_authorization: Increase::CardPayment::Element::CardAuthorization?,
          card_authorization_expiration: Increase::CardPayment::Element::CardAuthorizationExpiration?,
          card_decline: Increase::CardPayment::Element::CardDecline?,
          card_fuel_confirmation: Increase::CardPayment::Element::CardFuelConfirmation?,
          card_increment: Increase::CardPayment::Element::CardIncrement?,
          card_refund: Increase::CardPayment::Element::CardRefund?,
          card_reversal: Increase::CardPayment::Element::CardReversal?,
          card_settlement: Increase::CardPayment::Element::CardSettlement?,
          card_validation: Increase::CardPayment::Element::CardValidation?,
          category: Increase::Models::CardPayment::Element::category,
          created_at: Time,
          other: top?
        }

      class Element < Increase::Internal::Type::BaseModel
        attr_accessor card_authentication: Increase::CardPayment::Element::CardAuthentication?

        attr_accessor card_authorization: Increase::CardPayment::Element::CardAuthorization?

        attr_accessor card_authorization_expiration: Increase::CardPayment::Element::CardAuthorizationExpiration?

        attr_accessor card_decline: Increase::CardPayment::Element::CardDecline?

        attr_accessor card_fuel_confirmation: Increase::CardPayment::Element::CardFuelConfirmation?

        attr_accessor card_increment: Increase::CardPayment::Element::CardIncrement?

        attr_accessor card_refund: Increase::CardPayment::Element::CardRefund?

        attr_accessor card_reversal: Increase::CardPayment::Element::CardReversal?

        attr_accessor card_settlement: Increase::CardPayment::Element::CardSettlement?

        attr_accessor card_validation: Increase::CardPayment::Element::CardValidation?

        attr_accessor category: Increase::Models::CardPayment::Element::category

        attr_accessor created_at: Time

        attr_accessor other: top?

        def initialize: (
          card_authentication: Increase::CardPayment::Element::CardAuthentication?,
          card_authorization: Increase::CardPayment::Element::CardAuthorization?,
          card_authorization_expiration: Increase::CardPayment::Element::CardAuthorizationExpiration?,
          card_decline: Increase::CardPayment::Element::CardDecline?,
          card_fuel_confirmation: Increase::CardPayment::Element::CardFuelConfirmation?,
          card_increment: Increase::CardPayment::Element::CardIncrement?,
          card_refund: Increase::CardPayment::Element::CardRefund?,
          card_reversal: Increase::CardPayment::Element::CardReversal?,
          card_settlement: Increase::CardPayment::Element::CardSettlement?,
          card_validation: Increase::CardPayment::Element::CardValidation?,
          category: Increase::Models::CardPayment::Element::category,
          created_at: Time,
          other: top?
        ) -> void

        def to_hash: -> {
          card_authentication: Increase::CardPayment::Element::CardAuthentication?,
          card_authorization: Increase::CardPayment::Element::CardAuthorization?,
          card_authorization_expiration: Increase::CardPayment::Element::CardAuthorizationExpiration?,
          card_decline: Increase::CardPayment::Element::CardDecline?,
          card_fuel_confirmation: Increase::CardPayment::Element::CardFuelConfirmation?,
          card_increment: Increase::CardPayment::Element::CardIncrement?,
          card_refund: Increase::CardPayment::Element::CardRefund?,
          card_reversal: Increase::CardPayment::Element::CardReversal?,
          card_settlement: Increase::CardPayment::Element::CardSettlement?,
          card_validation: Increase::CardPayment::Element::CardValidation?,
          category: Increase::Models::CardPayment::Element::category,
          created_at: Time,
          other: top?
        }

        type card_authentication =
          {
            id: String,
            card_id: String,
            card_payment_id: String,
            category: Increase::Models::CardPayment::Element::CardAuthentication::category?,
            challenge: Increase::CardPayment::Element::CardAuthentication::Challenge?,
            created_at: Time,
            deny_reason: Increase::Models::CardPayment::Element::CardAuthentication::deny_reason?,
            device_channel: Increase::Models::CardPayment::Element::CardAuthentication::device_channel?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_country: String,
            merchant_name: String,
            purchase_amount: Integer?,
            purchase_currency: String?,
            real_time_decision_id: String?,
            status: Increase::Models::CardPayment::Element::CardAuthentication::status,
            type: Increase::Models::CardPayment::Element::CardAuthentication::type_
          }

        class CardAuthentication < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor card_id: String

          attr_accessor card_payment_id: String

          attr_accessor category: Increase::Models::CardPayment::Element::CardAuthentication::category?

          attr_accessor challenge: Increase::CardPayment::Element::CardAuthentication::Challenge?

          attr_accessor created_at: Time

          attr_accessor deny_reason: Increase::Models::CardPayment::Element::CardAuthentication::deny_reason?

          attr_accessor device_channel: Increase::Models::CardPayment::Element::CardAuthentication::device_channel?

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_country: String

          attr_accessor merchant_name: String

          attr_accessor purchase_amount: Integer?

          attr_accessor purchase_currency: String?

          attr_accessor real_time_decision_id: String?

          attr_accessor status: Increase::Models::CardPayment::Element::CardAuthentication::status

          attr_accessor type: Increase::Models::CardPayment::Element::CardAuthentication::type_

          def initialize: (
            id: String,
            card_id: String,
            card_payment_id: String,
            category: Increase::Models::CardPayment::Element::CardAuthentication::category?,
            challenge: Increase::CardPayment::Element::CardAuthentication::Challenge?,
            created_at: Time,
            deny_reason: Increase::Models::CardPayment::Element::CardAuthentication::deny_reason?,
            device_channel: Increase::Models::CardPayment::Element::CardAuthentication::device_channel?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_country: String,
            merchant_name: String,
            purchase_amount: Integer?,
            purchase_currency: String?,
            real_time_decision_id: String?,
            status: Increase::Models::CardPayment::Element::CardAuthentication::status,
            type: Increase::Models::CardPayment::Element::CardAuthentication::type_
          ) -> void

          def to_hash: -> {
            id: String,
            card_id: String,
            card_payment_id: String,
            category: Increase::Models::CardPayment::Element::CardAuthentication::category?,
            challenge: Increase::CardPayment::Element::CardAuthentication::Challenge?,
            created_at: Time,
            deny_reason: Increase::Models::CardPayment::Element::CardAuthentication::deny_reason?,
            device_channel: Increase::Models::CardPayment::Element::CardAuthentication::device_channel?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_country: String,
            merchant_name: String,
            purchase_amount: Integer?,
            purchase_currency: String?,
            real_time_decision_id: String?,
            status: Increase::Models::CardPayment::Element::CardAuthentication::status,
            type: Increase::Models::CardPayment::Element::CardAuthentication::type_
          }

          type category = :payment_authentication | :non_payment_authentication

          module Category
            extend Increase::Internal::Type::Enum

            # The authentication attempt is for a payment.
            PAYMENT_AUTHENTICATION: :payment_authentication

            # The authentication attempt is not for a payment.
            NON_PAYMENT_AUTHENTICATION: :non_payment_authentication

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthentication::category]
          end

          type challenge =
            {
              attempts: ::Array[Increase::CardPayment::Element::CardAuthentication::Challenge::Attempt],
              created_at: Time,
              one_time_code: String,
              verification_method: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::verification_method,
              verification_value: String?
            }

          class Challenge < Increase::Internal::Type::BaseModel
            attr_accessor attempts: ::Array[Increase::CardPayment::Element::CardAuthentication::Challenge::Attempt]

            attr_accessor created_at: Time

            attr_accessor one_time_code: String

            attr_accessor verification_method: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::verification_method

            attr_accessor verification_value: String?

            def initialize: (
              attempts: ::Array[Increase::CardPayment::Element::CardAuthentication::Challenge::Attempt],
              created_at: Time,
              one_time_code: String,
              verification_method: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::verification_method,
              verification_value: String?
            ) -> void

            def to_hash: -> {
              attempts: ::Array[Increase::CardPayment::Element::CardAuthentication::Challenge::Attempt],
              created_at: Time,
              one_time_code: String,
              verification_method: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::verification_method,
              verification_value: String?
            }

            type attempt =
              {
                created_at: Time,
                outcome: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::Attempt::outcome
              }

            class Attempt < Increase::Internal::Type::BaseModel
              attr_accessor created_at: Time

              attr_accessor outcome: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::Attempt::outcome

              def initialize: (
                created_at: Time,
                outcome: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::Attempt::outcome
              ) -> void

              def to_hash: -> {
                created_at: Time,
                outcome: Increase::Models::CardPayment::Element::CardAuthentication::Challenge::Attempt::outcome
              }

              type outcome = :successful | :failed

              module Outcome
                extend Increase::Internal::Type::Enum

                # The attempt was successful.
                SUCCESSFUL: :successful

                # The attempt was unsuccessful.
                FAILED: :failed

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthentication::Challenge::Attempt::outcome]
              end
            end

            type verification_method = :text_message | :email | :none_available

            module VerificationMethod
              extend Increase::Internal::Type::Enum

              # The one-time code was sent via text message.
              TEXT_MESSAGE: :text_message

              # The one-time code was sent via email.
              EMAIL: :email

              # The one-time code was not successfully delivered.
              NONE_AVAILABLE: :none_available

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthentication::Challenge::verification_method]
            end
          end

          type deny_reason =
            :group_locked
            | :card_not_active
            | :entity_not_active
            | :transaction_not_allowed
            | :webhook_denied
            | :webhook_timed_out

          module DenyReason
            extend Increase::Internal::Type::Enum

            # The group was locked.
            GROUP_LOCKED: :group_locked

            # The card was not active.
            CARD_NOT_ACTIVE: :card_not_active

            # The entity was not active.
            ENTITY_NOT_ACTIVE: :entity_not_active

            # The transaction was not allowed.
            TRANSACTION_NOT_ALLOWED: :transaction_not_allowed

            # The webhook was denied.
            WEBHOOK_DENIED: :webhook_denied

            # The webhook timed out.
            WEBHOOK_TIMED_OUT: :webhook_timed_out

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthentication::deny_reason]
          end

          type device_channel = :app | :browser | :three_ds_requestor_initiated

          module DeviceChannel
            extend Increase::Internal::Type::Enum

            # The authentication attempt was made from an app.
            APP: :app

            # The authentication attempt was made from a browser.
            BROWSER: :browser

            # The authentication attempt was initiated by the 3DS Requestor.
            THREE_DS_REQUESTOR_INITIATED: :three_ds_requestor_initiated

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthentication::device_channel]
          end

          type status =
            :denied
            | :authenticated_with_challenge
            | :authenticated_without_challenge
            | :awaiting_challenge
            | :validating_challenge
            | :canceled
            | :timed_out_awaiting_challenge
            | :errored
            | :exceeded_attempt_threshold

          module Status
            extend Increase::Internal::Type::Enum

            # The authentication attempt was denied.
            DENIED: :denied

            # The authentication attempt was authenticated with a challenge.
            AUTHENTICATED_WITH_CHALLENGE: :authenticated_with_challenge

            # The authentication attempt was authenticated without a challenge.
            AUTHENTICATED_WITHOUT_CHALLENGE: :authenticated_without_challenge

            # The authentication attempt is awaiting a challenge.
            AWAITING_CHALLENGE: :awaiting_challenge

            # The authentication attempt is validating a challenge.
            VALIDATING_CHALLENGE: :validating_challenge

            # The authentication attempt was canceled.
            CANCELED: :canceled

            # The authentication attempt timed out while awaiting a challenge.
            TIMED_OUT_AWAITING_CHALLENGE: :timed_out_awaiting_challenge

            # The authentication attempt errored.
            ERRORED: :errored

            # The authentication attempt exceeded the attempt threshold.
            EXCEEDED_ATTEMPT_THRESHOLD: :exceeded_attempt_threshold

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthentication::status]
          end

          type type_ = :card_authentication

          module Type
            extend Increase::Internal::Type::Enum

            CARD_AUTHENTICATION: :card_authentication

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthentication::type_]
          end
        end

        type card_authorization =
          {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardAuthorization::actioner,
            amount: Integer,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardAuthorization::currency,
            digital_wallet_token_id: String?,
            direction: Increase::Models::CardPayment::Element::CardAuthorization::direction,
            expires_at: Time,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardAuthorization::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardAuthorization::NetworkIdentifiers,
            network_risk_score: Integer?,
            pending_transaction_id: String?,
            physical_card_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            processing_category: Increase::Models::CardPayment::Element::CardAuthorization::processing_category,
            real_time_decision_id: String?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardAuthorization::type_,
            verification: Increase::CardPayment::Element::CardAuthorization::Verification
          }

        class CardAuthorization < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor actioner: Increase::Models::CardPayment::Element::CardAuthorization::actioner

          attr_accessor amount: Integer

          attr_accessor card_payment_id: String

          attr_accessor currency: Increase::Models::CardPayment::Element::CardAuthorization::currency

          attr_accessor digital_wallet_token_id: String?

          attr_accessor direction: Increase::Models::CardPayment::Element::CardAuthorization::direction

          attr_accessor expires_at: Time

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String?

          attr_accessor merchant_country: String

          attr_accessor merchant_descriptor: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_details: Increase::CardPayment::Element::CardAuthorization::NetworkDetails

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardAuthorization::NetworkIdentifiers

          attr_accessor network_risk_score: Integer?

          attr_accessor pending_transaction_id: String?

          attr_accessor physical_card_id: String?

          attr_accessor presentment_amount: Integer

          attr_accessor presentment_currency: String

          attr_accessor processing_category: Increase::Models::CardPayment::Element::CardAuthorization::processing_category

          attr_accessor real_time_decision_id: String?

          attr_accessor terminal_id: String?

          attr_accessor type: Increase::Models::CardPayment::Element::CardAuthorization::type_

          attr_accessor verification: Increase::CardPayment::Element::CardAuthorization::Verification

          def initialize: (
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardAuthorization::actioner,
            amount: Integer,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardAuthorization::currency,
            digital_wallet_token_id: String?,
            direction: Increase::Models::CardPayment::Element::CardAuthorization::direction,
            expires_at: Time,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardAuthorization::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardAuthorization::NetworkIdentifiers,
            network_risk_score: Integer?,
            pending_transaction_id: String?,
            physical_card_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            processing_category: Increase::Models::CardPayment::Element::CardAuthorization::processing_category,
            real_time_decision_id: String?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardAuthorization::type_,
            verification: Increase::CardPayment::Element::CardAuthorization::Verification
          ) -> void

          def to_hash: -> {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardAuthorization::actioner,
            amount: Integer,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardAuthorization::currency,
            digital_wallet_token_id: String?,
            direction: Increase::Models::CardPayment::Element::CardAuthorization::direction,
            expires_at: Time,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardAuthorization::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardAuthorization::NetworkIdentifiers,
            network_risk_score: Integer?,
            pending_transaction_id: String?,
            physical_card_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            processing_category: Increase::Models::CardPayment::Element::CardAuthorization::processing_category,
            real_time_decision_id: String?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardAuthorization::type_,
            verification: Increase::CardPayment::Element::CardAuthorization::Verification
          }

          type actioner = :user | :increase | :network

          module Actioner
            extend Increase::Internal::Type::Enum

            # This object was actioned by the user through a real-time decision.
            USER: :user

            # This object was actioned by Increase without user intervention.
            INCREASE: :increase

            # This object was actioned by the network, through stand-in processing.
            NETWORK: :network

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::actioner]
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::currency]
          end

          type direction = :settlement | :refund

          module Direction
            extend Increase::Internal::Type::Enum

            # A regular card authorization where funds are debited from the cardholder.
            SETTLEMENT: :settlement

            # A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder.
            REFUND: :refund

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::direction]
          end

          type network_details =
            {
              category: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardAuthorization::NetworkDetails::Visa?
            }

          class NetworkDetails < Increase::Internal::Type::BaseModel
            attr_accessor category: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::category

            attr_accessor visa: Increase::CardPayment::Element::CardAuthorization::NetworkDetails::Visa?

            def initialize: (
              category: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardAuthorization::NetworkDetails::Visa?
            ) -> void

            def to_hash: -> {
              category: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardAuthorization::NetworkDetails::Visa?
            }

            type category = :visa

            module Category
              extend Increase::Internal::Type::Enum

              # Visa
              VISA: :visa

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::category]
            end

            type visa =
              {
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?
              }

            class Visa < Increase::Internal::Type::BaseModel
              attr_accessor electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?

              attr_accessor point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?

              attr_accessor stand_in_processing_reason: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?

              def initialize: (
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?
              ) -> void

              def to_hash: -> {
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?
              }

              type electronic_commerce_indicator =
                :mail_phone_order
                | :recurring
                | :installment
                | :unknown_mail_phone_order
                | :secure_electronic_commerce
                | :non_authenticated_security_transaction_at_3ds_capable_merchant
                | :non_authenticated_security_transaction
                | :non_secure_transaction

              module ElectronicCommerceIndicator
                extend Increase::Internal::Type::Enum

                # Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.
                MAIL_PHONE_ORDER: :mail_phone_order

                # Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.
                RECURRING: :recurring

                # Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.
                INSTALLMENT: :installment

                # Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.
                UNKNOWN_MAIL_PHONE_ORDER: :unknown_mail_phone_order

                # Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure
                SECURE_ELECTRONIC_COMMERCE: :secure_electronic_commerce

                # Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.
                NON_AUTHENTICATED_SECURITY_TRANSACTION_AT_3DS_CAPABLE_MERCHANT: :non_authenticated_security_transaction_at_3ds_capable_merchant

                # Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.
                NON_AUTHENTICATED_SECURITY_TRANSACTION: :non_authenticated_security_transaction

                # Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection.
                NON_SECURE_TRANSACTION: :non_secure_transaction

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator]
              end

              type point_of_service_entry_mode =
                :unknown
                | :manual
                | :magnetic_stripe_no_cvv
                | :optical_code
                | :integrated_circuit_card
                | :contactless
                | :credential_on_file
                | :magnetic_stripe
                | :contactless_magnetic_stripe
                | :integrated_circuit_card_no_cvv

              module PointOfServiceEntryMode
                extend Increase::Internal::Type::Enum

                # Unknown
                UNKNOWN: :unknown

                # Manual key entry
                MANUAL: :manual

                # Magnetic stripe read, without card verification value
                MAGNETIC_STRIPE_NO_CVV: :magnetic_stripe_no_cvv

                # Optical code
                OPTICAL_CODE: :optical_code

                # Contact chip card
                INTEGRATED_CIRCUIT_CARD: :integrated_circuit_card

                # Contactless read of chip card
                CONTACTLESS: :contactless

                # Transaction initiated using a credential that has previously been stored on file
                CREDENTIAL_ON_FILE: :credential_on_file

                # Magnetic stripe read
                MAGNETIC_STRIPE: :magnetic_stripe

                # Contactless read of magnetic stripe data
                CONTACTLESS_MAGNETIC_STRIPE: :contactless_magnetic_stripe

                # Contact chip card, without card verification value
                INTEGRATED_CIRCUIT_CARD_NO_CVV: :integrated_circuit_card_no_cvv

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode]
              end

              type stand_in_processing_reason =
                :issuer_error
                | :invalid_physical_card
                | :invalid_cardholder_authentication_verification_value
                | :internal_visa_error
                | :merchant_transaction_advisory_service_authentication_required
                | :payment_fraud_disruption_acquirer_block
                | :other

              module StandInProcessingReason
                extend Increase::Internal::Type::Enum

                # Increase failed to process the authorization in a timely manner.
                ISSUER_ERROR: :issuer_error

                # The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.
                INVALID_PHYSICAL_CARD: :invalid_physical_card

                # The 3DS cardholder authentication verification value was invalid.
                INVALID_CARDHOLDER_AUTHENTICATION_VERIFICATION_VALUE: :invalid_cardholder_authentication_verification_value

                # An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.
                INTERNAL_VISA_ERROR: :internal_visa_error

                # The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.
                MERCHANT_TRANSACTION_ADVISORY_SERVICE_AUTHENTICATION_REQUIRED: :merchant_transaction_advisory_service_authentication_required

                # The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.
                PAYMENT_FRAUD_DISRUPTION_ACQUIRER_BLOCK: :payment_fraud_disruption_acquirer_block

                # An unspecific reason for stand-in processing.
                OTHER: :other

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason]
              end
            end
          end

          type network_identifiers =
            {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor retrieval_reference_number: String?

            attr_accessor trace_number: String?

            attr_accessor transaction_id: String?

            def initialize: (
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }
          end

          type processing_category =
            :account_funding
            | :automatic_fuel_dispenser
            | :bill_payment
            | :purchase
            | :quasi_cash
            | :refund

          module ProcessingCategory
            extend Increase::Internal::Type::Enum

            # Account funding transactions are transactions used to e.g., fund an account or transfer funds between accounts.
            ACCOUNT_FUNDING: :account_funding

            # Automatic fuel dispenser authorizations occur when a card is used at a gas pump, prior to the actual transaction amount being known. They are followed by an advice message that updates the amount of the pending transaction.
            AUTOMATIC_FUEL_DISPENSER: :automatic_fuel_dispenser

            # A transaction used to pay a bill.
            BILL_PAYMENT: :bill_payment

            # A regular purchase.
            PURCHASE: :purchase

            # Quasi-cash transactions represent purchases of items which may be convertible to cash.
            QUASI_CASH: :quasi_cash

            # A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder.
            REFUND: :refund

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::processing_category]
          end

          type type_ = :card_authorization

          module Type
            extend Increase::Internal::Type::Enum

            CARD_AUTHORIZATION: :card_authorization

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::type_]
          end

          type verification =
            {
              card_verification_code: Increase::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardAuthorization::Verification::CardholderAddress
            }

          class Verification < Increase::Internal::Type::BaseModel
            attr_accessor card_verification_code: Increase::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode

            attr_accessor cardholder_address: Increase::CardPayment::Element::CardAuthorization::Verification::CardholderAddress

            def initialize: (
              card_verification_code: Increase::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardAuthorization::Verification::CardholderAddress
            ) -> void

            def to_hash: -> {
              card_verification_code: Increase::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardAuthorization::Verification::CardholderAddress
            }

            type card_verification_code =
              {
                result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode::result
              }

            class CardVerificationCode < Increase::Internal::Type::BaseModel
              attr_accessor result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode::result

              def initialize: (
                result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode::result
              ) -> void

              def to_hash: -> {
                result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode::result
              }

              type result = :not_checked | :match | :no_match

              module Result
                extend Increase::Internal::Type::Enum

                # No card verification code was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # The card verification code matched the one on file.
                MATCH: :match

                # The card verification code did not match the one on file.
                NO_MATCH: :no_match

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardVerificationCode::result]
              end
            end

            type cardholder_address =
              {
                :actual_line1 => String?,
                actual_postal_code: String?,
                :provided_line1 => String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardholderAddress::result
              }

            class CardholderAddress < Increase::Internal::Type::BaseModel
              attr_accessor actual_line1: String?

              attr_accessor actual_postal_code: String?

              attr_accessor provided_line1: String?

              attr_accessor provided_postal_code: String?

              attr_accessor result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardholderAddress::result

              def initialize: (
                actual_line1: String?,
                actual_postal_code: String?,
                provided_line1: String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardholderAddress::result
              ) -> void

              def to_hash: -> {
                :actual_line1 => String?,
                actual_postal_code: String?,
                :provided_line1 => String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardholderAddress::result
              }

              type result =
                :not_checked
                | :postal_code_match_address_not_checked
                | :postal_code_match_address_no_match
                | :postal_code_no_match_address_match
                | :match
                | :no_match

              module Result
                extend Increase::Internal::Type::Enum

                # No address was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # Postal code matches, but the street address was not verified.
                POSTAL_CODE_MATCH_ADDRESS_NOT_CHECKED: :postal_code_match_address_not_checked

                # Postal code matches, but the street address does not match.
                POSTAL_CODE_MATCH_ADDRESS_NO_MATCH: :postal_code_match_address_no_match

                # Postal code does not match, but the street address matches.
                POSTAL_CODE_NO_MATCH_ADDRESS_MATCH: :postal_code_no_match_address_match

                # Postal code and street address match.
                MATCH: :match

                # Postal code and street address do not match.
                NO_MATCH: :no_match

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorization::Verification::CardholderAddress::result]
              end
            end
          end
        end

        type card_authorization_expiration =
          {
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::currency,
            expired_amount: Integer,
            network: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::network,
            type: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::type_
          }

        class CardAuthorizationExpiration < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor card_authorization_id: String

          attr_accessor currency: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::currency

          attr_accessor expired_amount: Integer

          attr_accessor network: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::network

          attr_accessor type: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::type_

          def initialize: (
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::currency,
            expired_amount: Integer,
            network: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::network,
            type: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::type_
          ) -> void

          def to_hash: -> {
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::currency,
            expired_amount: Integer,
            network: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::network,
            type: Increase::Models::CardPayment::Element::CardAuthorizationExpiration::type_
          }

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorizationExpiration::currency]
          end

          type network = :visa

          module Network
            extend Increase::Internal::Type::Enum

            # Visa
            VISA: :visa

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorizationExpiration::network]
          end

          type type_ = :card_authorization_expiration

          module Type
            extend Increase::Internal::Type::Enum

            CARD_AUTHORIZATION_EXPIRATION: :card_authorization_expiration

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardAuthorizationExpiration::type_]
          end
        end

        type card_decline =
          {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardDecline::actioner,
            amount: Integer,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardDecline::currency,
            declined_transaction_id: String,
            digital_wallet_token_id: String?,
            direction: Increase::Models::CardPayment::Element::CardDecline::direction,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardDecline::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardDecline::NetworkIdentifiers,
            network_risk_score: Integer?,
            physical_card_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            processing_category: Increase::Models::CardPayment::Element::CardDecline::processing_category,
            real_time_decision_id: String?,
            real_time_decision_reason: Increase::Models::CardPayment::Element::CardDecline::real_time_decision_reason?,
            reason: Increase::Models::CardPayment::Element::CardDecline::reason,
            terminal_id: String?,
            verification: Increase::CardPayment::Element::CardDecline::Verification
          }

        class CardDecline < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor actioner: Increase::Models::CardPayment::Element::CardDecline::actioner

          attr_accessor amount: Integer

          attr_accessor card_payment_id: String

          attr_accessor currency: Increase::Models::CardPayment::Element::CardDecline::currency

          attr_accessor declined_transaction_id: String

          attr_accessor digital_wallet_token_id: String?

          attr_accessor direction: Increase::Models::CardPayment::Element::CardDecline::direction

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String?

          attr_accessor merchant_country: String

          attr_accessor merchant_descriptor: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_details: Increase::CardPayment::Element::CardDecline::NetworkDetails

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardDecline::NetworkIdentifiers

          attr_accessor network_risk_score: Integer?

          attr_accessor physical_card_id: String?

          attr_accessor presentment_amount: Integer

          attr_accessor presentment_currency: String

          attr_accessor processing_category: Increase::Models::CardPayment::Element::CardDecline::processing_category

          attr_accessor real_time_decision_id: String?

          attr_accessor real_time_decision_reason: Increase::Models::CardPayment::Element::CardDecline::real_time_decision_reason?

          attr_accessor reason: Increase::Models::CardPayment::Element::CardDecline::reason

          attr_accessor terminal_id: String?

          attr_accessor verification: Increase::CardPayment::Element::CardDecline::Verification

          def initialize: (
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardDecline::actioner,
            amount: Integer,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardDecline::currency,
            declined_transaction_id: String,
            digital_wallet_token_id: String?,
            direction: Increase::Models::CardPayment::Element::CardDecline::direction,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardDecline::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardDecline::NetworkIdentifiers,
            network_risk_score: Integer?,
            physical_card_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            processing_category: Increase::Models::CardPayment::Element::CardDecline::processing_category,
            real_time_decision_id: String?,
            real_time_decision_reason: Increase::Models::CardPayment::Element::CardDecline::real_time_decision_reason?,
            reason: Increase::Models::CardPayment::Element::CardDecline::reason,
            terminal_id: String?,
            verification: Increase::CardPayment::Element::CardDecline::Verification
          ) -> void

          def to_hash: -> {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardDecline::actioner,
            amount: Integer,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardDecline::currency,
            declined_transaction_id: String,
            digital_wallet_token_id: String?,
            direction: Increase::Models::CardPayment::Element::CardDecline::direction,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardDecline::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardDecline::NetworkIdentifiers,
            network_risk_score: Integer?,
            physical_card_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            processing_category: Increase::Models::CardPayment::Element::CardDecline::processing_category,
            real_time_decision_id: String?,
            real_time_decision_reason: Increase::Models::CardPayment::Element::CardDecline::real_time_decision_reason?,
            reason: Increase::Models::CardPayment::Element::CardDecline::reason,
            terminal_id: String?,
            verification: Increase::CardPayment::Element::CardDecline::Verification
          }

          type actioner = :user | :increase | :network

          module Actioner
            extend Increase::Internal::Type::Enum

            # This object was actioned by the user through a real-time decision.
            USER: :user

            # This object was actioned by Increase without user intervention.
            INCREASE: :increase

            # This object was actioned by the network, through stand-in processing.
            NETWORK: :network

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::actioner]
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::currency]
          end

          type direction = :settlement | :refund

          module Direction
            extend Increase::Internal::Type::Enum

            # A regular card authorization where funds are debited from the cardholder.
            SETTLEMENT: :settlement

            # A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder.
            REFUND: :refund

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::direction]
          end

          type network_details =
            {
              category: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardDecline::NetworkDetails::Visa?
            }

          class NetworkDetails < Increase::Internal::Type::BaseModel
            attr_accessor category: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::category

            attr_accessor visa: Increase::CardPayment::Element::CardDecline::NetworkDetails::Visa?

            def initialize: (
              category: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardDecline::NetworkDetails::Visa?
            ) -> void

            def to_hash: -> {
              category: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardDecline::NetworkDetails::Visa?
            }

            type category = :visa

            module Category
              extend Increase::Internal::Type::Enum

              # Visa
              VISA: :visa

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::category]
            end

            type visa =
              {
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::stand_in_processing_reason?
              }

            class Visa < Increase::Internal::Type::BaseModel
              attr_accessor electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::electronic_commerce_indicator?

              attr_accessor point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::point_of_service_entry_mode?

              attr_accessor stand_in_processing_reason: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::stand_in_processing_reason?

              def initialize: (
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::stand_in_processing_reason?
              ) -> void

              def to_hash: -> {
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::stand_in_processing_reason?
              }

              type electronic_commerce_indicator =
                :mail_phone_order
                | :recurring
                | :installment
                | :unknown_mail_phone_order
                | :secure_electronic_commerce
                | :non_authenticated_security_transaction_at_3ds_capable_merchant
                | :non_authenticated_security_transaction
                | :non_secure_transaction

              module ElectronicCommerceIndicator
                extend Increase::Internal::Type::Enum

                # Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.
                MAIL_PHONE_ORDER: :mail_phone_order

                # Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.
                RECURRING: :recurring

                # Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.
                INSTALLMENT: :installment

                # Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.
                UNKNOWN_MAIL_PHONE_ORDER: :unknown_mail_phone_order

                # Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure
                SECURE_ELECTRONIC_COMMERCE: :secure_electronic_commerce

                # Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.
                NON_AUTHENTICATED_SECURITY_TRANSACTION_AT_3DS_CAPABLE_MERCHANT: :non_authenticated_security_transaction_at_3ds_capable_merchant

                # Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.
                NON_AUTHENTICATED_SECURITY_TRANSACTION: :non_authenticated_security_transaction

                # Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection.
                NON_SECURE_TRANSACTION: :non_secure_transaction

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::electronic_commerce_indicator]
              end

              type point_of_service_entry_mode =
                :unknown
                | :manual
                | :magnetic_stripe_no_cvv
                | :optical_code
                | :integrated_circuit_card
                | :contactless
                | :credential_on_file
                | :magnetic_stripe
                | :contactless_magnetic_stripe
                | :integrated_circuit_card_no_cvv

              module PointOfServiceEntryMode
                extend Increase::Internal::Type::Enum

                # Unknown
                UNKNOWN: :unknown

                # Manual key entry
                MANUAL: :manual

                # Magnetic stripe read, without card verification value
                MAGNETIC_STRIPE_NO_CVV: :magnetic_stripe_no_cvv

                # Optical code
                OPTICAL_CODE: :optical_code

                # Contact chip card
                INTEGRATED_CIRCUIT_CARD: :integrated_circuit_card

                # Contactless read of chip card
                CONTACTLESS: :contactless

                # Transaction initiated using a credential that has previously been stored on file
                CREDENTIAL_ON_FILE: :credential_on_file

                # Magnetic stripe read
                MAGNETIC_STRIPE: :magnetic_stripe

                # Contactless read of magnetic stripe data
                CONTACTLESS_MAGNETIC_STRIPE: :contactless_magnetic_stripe

                # Contact chip card, without card verification value
                INTEGRATED_CIRCUIT_CARD_NO_CVV: :integrated_circuit_card_no_cvv

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::point_of_service_entry_mode]
              end

              type stand_in_processing_reason =
                :issuer_error
                | :invalid_physical_card
                | :invalid_cardholder_authentication_verification_value
                | :internal_visa_error
                | :merchant_transaction_advisory_service_authentication_required
                | :payment_fraud_disruption_acquirer_block
                | :other

              module StandInProcessingReason
                extend Increase::Internal::Type::Enum

                # Increase failed to process the authorization in a timely manner.
                ISSUER_ERROR: :issuer_error

                # The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.
                INVALID_PHYSICAL_CARD: :invalid_physical_card

                # The 3DS cardholder authentication verification value was invalid.
                INVALID_CARDHOLDER_AUTHENTICATION_VERIFICATION_VALUE: :invalid_cardholder_authentication_verification_value

                # An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.
                INTERNAL_VISA_ERROR: :internal_visa_error

                # The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.
                MERCHANT_TRANSACTION_ADVISORY_SERVICE_AUTHENTICATION_REQUIRED: :merchant_transaction_advisory_service_authentication_required

                # The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.
                PAYMENT_FRAUD_DISRUPTION_ACQUIRER_BLOCK: :payment_fraud_disruption_acquirer_block

                # An unspecific reason for stand-in processing.
                OTHER: :other

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::NetworkDetails::Visa::stand_in_processing_reason]
              end
            end
          end

          type network_identifiers =
            {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor retrieval_reference_number: String?

            attr_accessor trace_number: String?

            attr_accessor transaction_id: String?

            def initialize: (
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }
          end

          type processing_category =
            :account_funding
            | :automatic_fuel_dispenser
            | :bill_payment
            | :purchase
            | :quasi_cash
            | :refund

          module ProcessingCategory
            extend Increase::Internal::Type::Enum

            # Account funding transactions are transactions used to e.g., fund an account or transfer funds between accounts.
            ACCOUNT_FUNDING: :account_funding

            # Automatic fuel dispenser authorizations occur when a card is used at a gas pump, prior to the actual transaction amount being known. They are followed by an advice message that updates the amount of the pending transaction.
            AUTOMATIC_FUEL_DISPENSER: :automatic_fuel_dispenser

            # A transaction used to pay a bill.
            BILL_PAYMENT: :bill_payment

            # A regular purchase.
            PURCHASE: :purchase

            # Quasi-cash transactions represent purchases of items which may be convertible to cash.
            QUASI_CASH: :quasi_cash

            # A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder.
            REFUND: :refund

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::processing_category]
          end

          type real_time_decision_reason =
            :insufficient_funds
            | :transaction_never_allowed
            | :exceeds_approval_limit
            | :card_temporarily_disabled
            | :suspected_fraud
            | :other

          module RealTimeDecisionReason
            extend Increase::Internal::Type::Enum

            # The cardholder does not have sufficient funds to cover the transaction. The merchant may attempt to process the transaction again.
            INSUFFICIENT_FUNDS: :insufficient_funds

            # This type of transaction is not allowed for this card. This transaction should not be retried.
            TRANSACTION_NEVER_ALLOWED: :transaction_never_allowed

            # The transaction amount exceeds the cardholder's approval limit. The merchant may attempt to process the transaction again.
            EXCEEDS_APPROVAL_LIMIT: :exceeds_approval_limit

            # The card has been temporarily disabled or not yet activated. The merchant may attempt to process the transaction again.
            CARD_TEMPORARILY_DISABLED: :card_temporarily_disabled

            # The transaction is suspected to be fraudulent. The merchant may attempt to process the transaction again.
            SUSPECTED_FRAUD: :suspected_fraud

            # The transaction was declined for another reason. The merchant may attempt to process the transaction again. This should be used sparingly.
            OTHER: :other

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::real_time_decision_reason]
          end

          type reason =
            :account_closed
            | :card_not_active
            | :card_canceled
            | :physical_card_not_active
            | :entity_not_active
            | :group_locked
            | :insufficient_funds
            | :cvv2_mismatch
            | :card_expiration_mismatch
            | :transaction_not_allowed
            | :breaches_limit
            | :webhook_declined
            | :webhook_timed_out
            | :declined_by_stand_in_processing
            | :invalid_physical_card
            | :missing_original_authorization
            | :failed_3ds_authentication
            | :suspected_fraud

          module Reason
            extend Increase::Internal::Type::Enum

            # The account has been closed.
            ACCOUNT_CLOSED: :account_closed

            # The Card was not active.
            CARD_NOT_ACTIVE: :card_not_active

            # The Card has been canceled.
            CARD_CANCELED: :card_canceled

            # The Physical Card was not active.
            PHYSICAL_CARD_NOT_ACTIVE: :physical_card_not_active

            # The account's entity was not active.
            ENTITY_NOT_ACTIVE: :entity_not_active

            # The account was inactive.
            GROUP_LOCKED: :group_locked

            # The Card's Account did not have a sufficient available balance.
            INSUFFICIENT_FUNDS: :insufficient_funds

            # The given CVV2 did not match the card's value.
            CVV2_MISMATCH: :cvv2_mismatch

            # The given expiration date did not match the card's value. Only applies when a CVV2 is present.
            CARD_EXPIRATION_MISMATCH: :card_expiration_mismatch

            # The attempted card transaction is not allowed per Increase's terms.
            TRANSACTION_NOT_ALLOWED: :transaction_not_allowed

            # The transaction was blocked by a Limit.
            BREACHES_LIMIT: :breaches_limit

            # Your application declined the transaction via webhook.
            WEBHOOK_DECLINED: :webhook_declined

            # Your application webhook did not respond without the required timeout.
            WEBHOOK_TIMED_OUT: :webhook_timed_out

            # Declined by stand-in processing.
            DECLINED_BY_STAND_IN_PROCESSING: :declined_by_stand_in_processing

            # The card read had an invalid CVV, dCVV, or authorization request cryptogram.
            INVALID_PHYSICAL_CARD: :invalid_physical_card

            # The original card authorization for this incremental authorization does not exist.
            MISSING_ORIGINAL_AUTHORIZATION: :missing_original_authorization

            # The transaction was declined because the 3DS authentication failed.
            FAILED_3DS_AUTHENTICATION: :failed_3ds_authentication

            # The transaction was suspected to be fraudulent. Please reach out to support@increase.com for more information.
            SUSPECTED_FRAUD: :suspected_fraud

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::reason]
          end

          type verification =
            {
              card_verification_code: Increase::CardPayment::Element::CardDecline::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardDecline::Verification::CardholderAddress
            }

          class Verification < Increase::Internal::Type::BaseModel
            attr_accessor card_verification_code: Increase::CardPayment::Element::CardDecline::Verification::CardVerificationCode

            attr_accessor cardholder_address: Increase::CardPayment::Element::CardDecline::Verification::CardholderAddress

            def initialize: (
              card_verification_code: Increase::CardPayment::Element::CardDecline::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardDecline::Verification::CardholderAddress
            ) -> void

            def to_hash: -> {
              card_verification_code: Increase::CardPayment::Element::CardDecline::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardDecline::Verification::CardholderAddress
            }

            type card_verification_code =
              {
                result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardVerificationCode::result
              }

            class CardVerificationCode < Increase::Internal::Type::BaseModel
              attr_accessor result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardVerificationCode::result

              def initialize: (
                result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardVerificationCode::result
              ) -> void

              def to_hash: -> {
                result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardVerificationCode::result
              }

              type result = :not_checked | :match | :no_match

              module Result
                extend Increase::Internal::Type::Enum

                # No card verification code was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # The card verification code matched the one on file.
                MATCH: :match

                # The card verification code did not match the one on file.
                NO_MATCH: :no_match

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::Verification::CardVerificationCode::result]
              end
            end

            type cardholder_address =
              {
                :actual_line1 => String?,
                actual_postal_code: String?,
                :provided_line1 => String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardholderAddress::result
              }

            class CardholderAddress < Increase::Internal::Type::BaseModel
              attr_accessor actual_line1: String?

              attr_accessor actual_postal_code: String?

              attr_accessor provided_line1: String?

              attr_accessor provided_postal_code: String?

              attr_accessor result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardholderAddress::result

              def initialize: (
                actual_line1: String?,
                actual_postal_code: String?,
                provided_line1: String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardholderAddress::result
              ) -> void

              def to_hash: -> {
                :actual_line1 => String?,
                actual_postal_code: String?,
                :provided_line1 => String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardDecline::Verification::CardholderAddress::result
              }

              type result =
                :not_checked
                | :postal_code_match_address_not_checked
                | :postal_code_match_address_no_match
                | :postal_code_no_match_address_match
                | :match
                | :no_match

              module Result
                extend Increase::Internal::Type::Enum

                # No address was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # Postal code matches, but the street address was not verified.
                POSTAL_CODE_MATCH_ADDRESS_NOT_CHECKED: :postal_code_match_address_not_checked

                # Postal code matches, but the street address does not match.
                POSTAL_CODE_MATCH_ADDRESS_NO_MATCH: :postal_code_match_address_no_match

                # Postal code does not match, but the street address matches.
                POSTAL_CODE_NO_MATCH_ADDRESS_MATCH: :postal_code_no_match_address_match

                # Postal code and street address match.
                MATCH: :match

                # Postal code and street address do not match.
                NO_MATCH: :no_match

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardDecline::Verification::CardholderAddress::result]
              end
            end
          end
        end

        type card_fuel_confirmation =
          {
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardFuelConfirmation::currency,
            network: Increase::Models::CardPayment::Element::CardFuelConfirmation::network,
            network_identifiers: Increase::CardPayment::Element::CardFuelConfirmation::NetworkIdentifiers,
            pending_transaction_id: String?,
            type: Increase::Models::CardPayment::Element::CardFuelConfirmation::type_,
            updated_authorization_amount: Integer
          }

        class CardFuelConfirmation < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor card_authorization_id: String

          attr_accessor currency: Increase::Models::CardPayment::Element::CardFuelConfirmation::currency

          attr_accessor network: Increase::Models::CardPayment::Element::CardFuelConfirmation::network

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardFuelConfirmation::NetworkIdentifiers

          attr_accessor pending_transaction_id: String?

          attr_accessor type: Increase::Models::CardPayment::Element::CardFuelConfirmation::type_

          attr_accessor updated_authorization_amount: Integer

          def initialize: (
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardFuelConfirmation::currency,
            network: Increase::Models::CardPayment::Element::CardFuelConfirmation::network,
            network_identifiers: Increase::CardPayment::Element::CardFuelConfirmation::NetworkIdentifiers,
            pending_transaction_id: String?,
            type: Increase::Models::CardPayment::Element::CardFuelConfirmation::type_,
            updated_authorization_amount: Integer
          ) -> void

          def to_hash: -> {
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardFuelConfirmation::currency,
            network: Increase::Models::CardPayment::Element::CardFuelConfirmation::network,
            network_identifiers: Increase::CardPayment::Element::CardFuelConfirmation::NetworkIdentifiers,
            pending_transaction_id: String?,
            type: Increase::Models::CardPayment::Element::CardFuelConfirmation::type_,
            updated_authorization_amount: Integer
          }

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardFuelConfirmation::currency]
          end

          type network = :visa

          module Network
            extend Increase::Internal::Type::Enum

            # Visa
            VISA: :visa

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardFuelConfirmation::network]
          end

          type network_identifiers =
            {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor retrieval_reference_number: String?

            attr_accessor trace_number: String?

            attr_accessor transaction_id: String?

            def initialize: (
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }
          end

          type type_ = :card_fuel_confirmation

          module Type
            extend Increase::Internal::Type::Enum

            CARD_FUEL_CONFIRMATION: :card_fuel_confirmation

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardFuelConfirmation::type_]
          end
        end

        type card_increment =
          {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardIncrement::actioner,
            amount: Integer,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardIncrement::currency,
            network: Increase::Models::CardPayment::Element::CardIncrement::network,
            network_identifiers: Increase::CardPayment::Element::CardIncrement::NetworkIdentifiers,
            network_risk_score: Integer?,
            pending_transaction_id: String?,
            real_time_decision_id: String?,
            type: Increase::Models::CardPayment::Element::CardIncrement::type_,
            updated_authorization_amount: Integer
          }

        class CardIncrement < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor actioner: Increase::Models::CardPayment::Element::CardIncrement::actioner

          attr_accessor amount: Integer

          attr_accessor card_authorization_id: String

          attr_accessor currency: Increase::Models::CardPayment::Element::CardIncrement::currency

          attr_accessor network: Increase::Models::CardPayment::Element::CardIncrement::network

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardIncrement::NetworkIdentifiers

          attr_accessor network_risk_score: Integer?

          attr_accessor pending_transaction_id: String?

          attr_accessor real_time_decision_id: String?

          attr_accessor type: Increase::Models::CardPayment::Element::CardIncrement::type_

          attr_accessor updated_authorization_amount: Integer

          def initialize: (
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardIncrement::actioner,
            amount: Integer,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardIncrement::currency,
            network: Increase::Models::CardPayment::Element::CardIncrement::network,
            network_identifiers: Increase::CardPayment::Element::CardIncrement::NetworkIdentifiers,
            network_risk_score: Integer?,
            pending_transaction_id: String?,
            real_time_decision_id: String?,
            type: Increase::Models::CardPayment::Element::CardIncrement::type_,
            updated_authorization_amount: Integer
          ) -> void

          def to_hash: -> {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardIncrement::actioner,
            amount: Integer,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardIncrement::currency,
            network: Increase::Models::CardPayment::Element::CardIncrement::network,
            network_identifiers: Increase::CardPayment::Element::CardIncrement::NetworkIdentifiers,
            network_risk_score: Integer?,
            pending_transaction_id: String?,
            real_time_decision_id: String?,
            type: Increase::Models::CardPayment::Element::CardIncrement::type_,
            updated_authorization_amount: Integer
          }

          type actioner = :user | :increase | :network

          module Actioner
            extend Increase::Internal::Type::Enum

            # This object was actioned by the user through a real-time decision.
            USER: :user

            # This object was actioned by Increase without user intervention.
            INCREASE: :increase

            # This object was actioned by the network, through stand-in processing.
            NETWORK: :network

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardIncrement::actioner]
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardIncrement::currency]
          end

          type network = :visa

          module Network
            extend Increase::Internal::Type::Enum

            # Visa
            VISA: :visa

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardIncrement::network]
          end

          type network_identifiers =
            {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor retrieval_reference_number: String?

            attr_accessor trace_number: String?

            attr_accessor transaction_id: String?

            def initialize: (
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }
          end

          type type_ = :card_increment

          module Type
            extend Increase::Internal::Type::Enum

            CARD_INCREMENT: :card_increment

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardIncrement::type_]
          end
        end

        type card_refund =
          {
            id: String,
            amount: Integer,
            card_payment_id: String,
            cashback: Increase::CardPayment::Element::CardRefund::Cashback?,
            currency: Increase::Models::CardPayment::Element::CardRefund::currency,
            interchange: Increase::CardPayment::Element::CardRefund::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::CardPayment::Element::CardRefund::NetworkIdentifiers,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::CardPayment::Element::CardRefund::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Models::CardPayment::Element::CardRefund::type_
          }

        class CardRefund < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount: Integer

          attr_accessor card_payment_id: String

          attr_accessor cashback: Increase::CardPayment::Element::CardRefund::Cashback?

          attr_accessor currency: Increase::Models::CardPayment::Element::CardRefund::currency

          attr_accessor interchange: Increase::CardPayment::Element::CardRefund::Interchange?

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String

          attr_accessor merchant_country: String

          attr_accessor merchant_name: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardRefund::NetworkIdentifiers

          attr_accessor presentment_amount: Integer

          attr_accessor presentment_currency: String

          attr_accessor purchase_details: Increase::CardPayment::Element::CardRefund::PurchaseDetails?

          attr_accessor transaction_id: String

          attr_accessor type: Increase::Models::CardPayment::Element::CardRefund::type_

          def initialize: (
            id: String,
            amount: Integer,
            card_payment_id: String,
            cashback: Increase::CardPayment::Element::CardRefund::Cashback?,
            currency: Increase::Models::CardPayment::Element::CardRefund::currency,
            interchange: Increase::CardPayment::Element::CardRefund::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::CardPayment::Element::CardRefund::NetworkIdentifiers,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::CardPayment::Element::CardRefund::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Models::CardPayment::Element::CardRefund::type_
          ) -> void

          def to_hash: -> {
            id: String,
            amount: Integer,
            card_payment_id: String,
            cashback: Increase::CardPayment::Element::CardRefund::Cashback?,
            currency: Increase::Models::CardPayment::Element::CardRefund::currency,
            interchange: Increase::CardPayment::Element::CardRefund::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::CardPayment::Element::CardRefund::NetworkIdentifiers,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::CardPayment::Element::CardRefund::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Models::CardPayment::Element::CardRefund::type_
          }

          type cashback =
            {
              amount: String,
              currency: Increase::Models::CardPayment::Element::CardRefund::Cashback::currency
            }

          class Cashback < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor currency: Increase::Models::CardPayment::Element::CardRefund::Cashback::currency

            def initialize: (
              amount: String,
              currency: Increase::Models::CardPayment::Element::CardRefund::Cashback::currency
            ) -> void

            def to_hash: -> {
              amount: String,
              currency: Increase::Models::CardPayment::Element::CardRefund::Cashback::currency
            }

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::Cashback::currency]
            end
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::currency]
          end

          type interchange =
            {
              amount: String,
              code: String?,
              currency: Increase::Models::CardPayment::Element::CardRefund::Interchange::currency
            }

          class Interchange < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor code: String?

            attr_accessor currency: Increase::Models::CardPayment::Element::CardRefund::Interchange::currency

            def initialize: (
              amount: String,
              code: String?,
              currency: Increase::Models::CardPayment::Element::CardRefund::Interchange::currency
            ) -> void

            def to_hash: -> {
              amount: String,
              code: String?,
              currency: Increase::Models::CardPayment::Element::CardRefund::Interchange::currency
            }

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::Interchange::currency]
            end
          end

          type network_identifiers =
            {
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor acquirer_business_id: String

            attr_accessor acquirer_reference_number: String

            attr_accessor transaction_id: String?

            def initialize: (
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            }
          end

          type purchase_details =
            {
              car_rental: Increase::CardPayment::Element::CardRefund::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel?
            }

          class PurchaseDetails < Increase::Internal::Type::BaseModel
            attr_accessor car_rental: Increase::CardPayment::Element::CardRefund::PurchaseDetails::CarRental?

            attr_accessor customer_reference_identifier: String?

            attr_accessor local_tax_amount: Integer?

            attr_accessor local_tax_currency: String?

            attr_accessor lodging: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Lodging?

            attr_accessor national_tax_amount: Integer?

            attr_accessor national_tax_currency: String?

            attr_accessor purchase_identifier: String?

            attr_accessor purchase_identifier_format: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::purchase_identifier_format?

            attr_accessor travel: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel?

            def initialize: (
              car_rental: Increase::CardPayment::Element::CardRefund::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel?
            ) -> void

            def to_hash: -> {
              car_rental: Increase::CardPayment::Element::CardRefund::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel?
            }

            type car_rental =
              {
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              }

            class CarRental < Increase::Internal::Type::BaseModel
              attr_accessor car_class_code: String?

              attr_accessor checkout_date: Date?

              attr_accessor daily_rental_rate_amount: Integer?

              attr_accessor daily_rental_rate_currency: String?

              attr_accessor days_rented: Integer?

              attr_accessor extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::extra_charges?

              attr_accessor fuel_charges_amount: Integer?

              attr_accessor fuel_charges_currency: String?

              attr_accessor insurance_charges_amount: Integer?

              attr_accessor insurance_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::no_show_indicator?

              attr_accessor one_way_drop_off_charges_amount: Integer?

              attr_accessor one_way_drop_off_charges_currency: String?

              attr_accessor renter_name: String?

              attr_accessor weekly_rental_rate_amount: Integer?

              attr_accessor weekly_rental_rate_currency: String?

              def initialize: (
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              ) -> void

              def to_hash: -> {
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              }

              type extra_charges =
                :no_extra_charge
                | :gas
                | :extra_mileage
                | :late_return
                | :one_way_service_fee
                | :parking_violation

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Gas
                GAS: :gas

                # Extra mileage
                EXTRA_MILEAGE: :extra_mileage

                # Late return
                LATE_RETURN: :late_return

                # One way service fee
                ONE_WAY_SERVICE_FEE: :one_way_service_fee

                # Parking violation
                PARKING_VIOLATION: :parking_violation

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::extra_charges]
              end

              type no_show_indicator =
                :not_applicable | :no_show_for_specialized_vehicle

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show for specialized vehicle
                NO_SHOW_FOR_SPECIALIZED_VEHICLE: :no_show_for_specialized_vehicle

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::CarRental::no_show_indicator]
              end
            end

            type lodging =
              {
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              }

            class Lodging < Increase::Internal::Type::BaseModel
              attr_accessor check_in_date: Date?

              attr_accessor daily_room_rate_amount: Integer?

              attr_accessor daily_room_rate_currency: String?

              attr_accessor extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::extra_charges?

              attr_accessor folio_cash_advances_amount: Integer?

              attr_accessor folio_cash_advances_currency: String?

              attr_accessor food_beverage_charges_amount: Integer?

              attr_accessor food_beverage_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::no_show_indicator?

              attr_accessor prepaid_expenses_amount: Integer?

              attr_accessor prepaid_expenses_currency: String?

              attr_accessor room_nights: Integer?

              attr_accessor total_room_tax_amount: Integer?

              attr_accessor total_room_tax_currency: String?

              attr_accessor total_tax_amount: Integer?

              attr_accessor total_tax_currency: String?

              def initialize: (
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              ) -> void

              def to_hash: -> {
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              }

              type extra_charges =
                :no_extra_charge
                | :restaurant
                | :gift_shop
                | :mini_bar
                | :telephone
                | :other
                | :laundry

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Restaurant
                RESTAURANT: :restaurant

                # Gift shop
                GIFT_SHOP: :gift_shop

                # Mini bar
                MINI_BAR: :mini_bar

                # Telephone
                TELEPHONE: :telephone

                # Other
                OTHER: :other

                # Laundry
                LAUNDRY: :laundry

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::extra_charges]
              end

              type no_show_indicator = :not_applicable | :no_show

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show
                NO_SHOW: :no_show

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Lodging::no_show_indicator]
              end
            end

            type purchase_identifier_format =
              :free_text
              | :order_number
              | :rental_agreement_number
              | :hotel_folio_number
              | :invoice_number

            module PurchaseIdentifierFormat
              extend Increase::Internal::Type::Enum

              # Free text
              FREE_TEXT: :free_text

              # Order number
              ORDER_NUMBER: :order_number

              # Rental agreement number
              RENTAL_AGREEMENT_NUMBER: :rental_agreement_number

              # Hotel folio number
              HOTEL_FOLIO_NUMBER: :hotel_folio_number

              # Invoice number
              INVOICE_NUMBER: :invoice_number

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::purchase_identifier_format]
            end

            type travel =
              {
                ancillary: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg]?
              }

            class Travel < Increase::Internal::Type::BaseModel
              attr_accessor ancillary: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary?

              attr_accessor computerized_reservation_system: String?

              attr_accessor credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::credit_reason_indicator?

              attr_accessor departure_date: Date?

              attr_accessor origination_city_airport_code: String?

              attr_accessor passenger_name: String?

              attr_accessor restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator?

              attr_accessor ticket_change_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::ticket_change_indicator?

              attr_accessor ticket_number: String?

              attr_accessor travel_agency_code: String?

              attr_accessor travel_agency_name: String?

              attr_accessor trip_legs: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg]?

              def initialize: (
                ancillary: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg]?
              ) -> void

              def to_hash: -> {
                ancillary: Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg]?
              }

              type ancillary =
                {
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                }

              class Ancillary < Increase::Internal::Type::BaseModel
                attr_accessor connected_ticket_document_number: String?

                attr_accessor credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?

                attr_accessor passenger_name_or_description: String?

                attr_accessor services: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service]

                attr_accessor ticket_document_number: String?

                def initialize: (
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                ) -> void

                def to_hash: -> {
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                }

                type credit_reason_indicator =
                  :no_credit
                  | :passenger_transport_ancillary_purchase_cancellation
                  | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                  | :other

                module CreditReasonIndicator
                  extend Increase::Internal::Type::Enum

                  # No credit
                  NO_CREDIT: :no_credit

                  # Passenger transport ancillary purchase cancellation
                  PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                  # Airline ticket and passenger transport ancillary purchase cancellation
                  AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                  # Other
                  OTHER: :other

                  def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::credit_reason_indicator]
                end

                type service =
                  {
                    category: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  }

                class Service < Increase::Internal::Type::BaseModel
                  attr_accessor category: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category?

                  attr_accessor sub_category: String?

                  def initialize: (
                    category: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  ) -> void

                  def to_hash: -> {
                    category: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  }

                  type category =
                    :none
                    | :bundled_service
                    | :baggage_fee
                    | :change_fee
                    | :cargo
                    | :carbon_offset
                    | :frequent_flyer
                    | :gift_card
                    | :ground_transport
                    | :in_flight_entertainment
                    | :lounge
                    | :medical
                    | :meal_beverage
                    | :other
                    | :passenger_assist_fee
                    | :pets
                    | :seat_fees
                    | :standby
                    | :service_fee
                    | :store
                    | :travel_service
                    | :unaccompanied_travel
                    | :upgrades
                    | :wifi

                  module Category
                    extend Increase::Internal::Type::Enum

                    # None
                    NONE: :none

                    # Bundled service
                    BUNDLED_SERVICE: :bundled_service

                    # Baggage fee
                    BAGGAGE_FEE: :baggage_fee

                    # Change fee
                    CHANGE_FEE: :change_fee

                    # Cargo
                    CARGO: :cargo

                    # Carbon offset
                    CARBON_OFFSET: :carbon_offset

                    # Frequent flyer
                    FREQUENT_FLYER: :frequent_flyer

                    # Gift card
                    GIFT_CARD: :gift_card

                    # Ground transport
                    GROUND_TRANSPORT: :ground_transport

                    # In-flight entertainment
                    IN_FLIGHT_ENTERTAINMENT: :in_flight_entertainment

                    # Lounge
                    LOUNGE: :lounge

                    # Medical
                    MEDICAL: :medical

                    # Meal beverage
                    MEAL_BEVERAGE: :meal_beverage

                    # Other
                    OTHER: :other

                    # Passenger assist fee
                    PASSENGER_ASSIST_FEE: :passenger_assist_fee

                    # Pets
                    PETS: :pets

                    # Seat fees
                    SEAT_FEES: :seat_fees

                    # Standby
                    STANDBY: :standby

                    # Service fee
                    SERVICE_FEE: :service_fee

                    # Store
                    STORE: :store

                    # Travel service
                    TRAVEL_SERVICE: :travel_service

                    # Unaccompanied travel
                    UNACCOMPANIED_TRAVEL: :unaccompanied_travel

                    # Upgrades
                    UPGRADES: :upgrades

                    # Wi-fi
                    WIFI: :wifi

                    def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::Ancillary::Service::category]
                  end
                end
              end

              type credit_reason_indicator =
                :no_credit
                | :passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_cancellation
                | :other
                | :partial_refund_of_airline_ticket

              module CreditReasonIndicator
                extend Increase::Internal::Type::Enum

                # No credit
                NO_CREDIT: :no_credit

                # Passenger transport ancillary purchase cancellation
                PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                # Airline ticket and passenger transport ancillary purchase cancellation
                AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                # Airline ticket cancellation
                AIRLINE_TICKET_CANCELLATION: :airline_ticket_cancellation

                # Other
                OTHER: :other

                # Partial refund of airline ticket
                PARTIAL_REFUND_OF_AIRLINE_TICKET: :partial_refund_of_airline_ticket

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::credit_reason_indicator]
              end

              type restricted_ticket_indicator =
                :no_restrictions | :restricted_non_refundable_ticket

              module RestrictedTicketIndicator
                extend Increase::Internal::Type::Enum

                # No restrictions
                NO_RESTRICTIONS: :no_restrictions

                # Restricted non-refundable ticket
                RESTRICTED_NON_REFUNDABLE_TICKET: :restricted_non_refundable_ticket

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::restricted_ticket_indicator]
              end

              type ticket_change_indicator =
                :none | :change_to_existing_ticket | :new_ticket

              module TicketChangeIndicator
                extend Increase::Internal::Type::Enum

                # None
                NONE: :none

                # Change to existing ticket
                CHANGE_TO_EXISTING_TICKET: :change_to_existing_ticket

                # New ticket
                NEW_TICKET: :new_ticket

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::ticket_change_indicator]
              end

              type trip_leg =
                {
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code?
                }

              class TripLeg < Increase::Internal::Type::BaseModel
                attr_accessor carrier_code: String?

                attr_accessor destination_city_airport_code: String?

                attr_accessor fare_basis_code: String?

                attr_accessor flight_number: String?

                attr_accessor service_class: String?

                attr_accessor stop_over_code: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code?

                def initialize: (
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code?
                ) -> void

                def to_hash: -> {
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code?
                }

                type stop_over_code =
                  :none | :stop_over_allowed | :stop_over_not_allowed

                module StopOverCode
                  extend Increase::Internal::Type::Enum

                  # None
                  NONE: :none

                  # Stop over allowed
                  STOP_OVER_ALLOWED: :stop_over_allowed

                  # Stop over not allowed
                  STOP_OVER_NOT_ALLOWED: :stop_over_not_allowed

                  def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::PurchaseDetails::Travel::TripLeg::stop_over_code]
                end
              end
            end
          end

          type type_ = :card_refund

          module Type
            extend Increase::Internal::Type::Enum

            CARD_REFUND: :card_refund

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardRefund::type_]
          end
        end

        type card_reversal =
          {
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardReversal::currency,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String?,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network: Increase::Models::CardPayment::Element::CardReversal::network,
            network_identifiers: Increase::CardPayment::Element::CardReversal::NetworkIdentifiers,
            pending_transaction_id: String?,
            reversal_amount: Integer,
            reversal_reason: Increase::Models::CardPayment::Element::CardReversal::reversal_reason?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardReversal::type_,
            updated_authorization_amount: Integer
          }

        class CardReversal < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor card_authorization_id: String

          attr_accessor currency: Increase::Models::CardPayment::Element::CardReversal::currency

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String?

          attr_accessor merchant_country: String?

          attr_accessor merchant_descriptor: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network: Increase::Models::CardPayment::Element::CardReversal::network

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardReversal::NetworkIdentifiers

          attr_accessor pending_transaction_id: String?

          attr_accessor reversal_amount: Integer

          attr_accessor reversal_reason: Increase::Models::CardPayment::Element::CardReversal::reversal_reason?

          attr_accessor terminal_id: String?

          attr_accessor type: Increase::Models::CardPayment::Element::CardReversal::type_

          attr_accessor updated_authorization_amount: Integer

          def initialize: (
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardReversal::currency,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String?,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network: Increase::Models::CardPayment::Element::CardReversal::network,
            network_identifiers: Increase::CardPayment::Element::CardReversal::NetworkIdentifiers,
            pending_transaction_id: String?,
            reversal_amount: Integer,
            reversal_reason: Increase::Models::CardPayment::Element::CardReversal::reversal_reason?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardReversal::type_,
            updated_authorization_amount: Integer
          ) -> void

          def to_hash: -> {
            id: String,
            card_authorization_id: String,
            currency: Increase::Models::CardPayment::Element::CardReversal::currency,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String?,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network: Increase::Models::CardPayment::Element::CardReversal::network,
            network_identifiers: Increase::CardPayment::Element::CardReversal::NetworkIdentifiers,
            pending_transaction_id: String?,
            reversal_amount: Integer,
            reversal_reason: Increase::Models::CardPayment::Element::CardReversal::reversal_reason?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardReversal::type_,
            updated_authorization_amount: Integer
          }

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardReversal::currency]
          end

          type network = :visa

          module Network
            extend Increase::Internal::Type::Enum

            # Visa
            VISA: :visa

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardReversal::network]
          end

          type network_identifiers =
            {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor retrieval_reference_number: String?

            attr_accessor trace_number: String?

            attr_accessor transaction_id: String?

            def initialize: (
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }
          end

          type reversal_reason =
            :reversed_by_customer
            | :reversed_by_network_or_acquirer
            | :reversed_by_point_of_sale
            | :partial_reversal

          module ReversalReason
            extend Increase::Internal::Type::Enum

            # The Card Reversal was initiated at the customer's request.
            REVERSED_BY_CUSTOMER: :reversed_by_customer

            # The Card Reversal was initiated by the network or acquirer.
            REVERSED_BY_NETWORK_OR_ACQUIRER: :reversed_by_network_or_acquirer

            # The Card Reversal was initiated by the point of sale device.
            REVERSED_BY_POINT_OF_SALE: :reversed_by_point_of_sale

            # The Card Reversal was a partial reversal, for any reason.
            PARTIAL_REVERSAL: :partial_reversal

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardReversal::reversal_reason]
          end

          type type_ = :card_reversal

          module Type
            extend Increase::Internal::Type::Enum

            CARD_REVERSAL: :card_reversal

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardReversal::type_]
          end
        end

        type card_settlement =
          {
            id: String,
            amount: Integer,
            card_authorization: String?,
            card_payment_id: String,
            cashback: Increase::CardPayment::Element::CardSettlement::Cashback?,
            currency: Increase::Models::CardPayment::Element::CardSettlement::currency,
            interchange: Increase::CardPayment::Element::CardSettlement::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::CardPayment::Element::CardSettlement::NetworkIdentifiers,
            pending_transaction_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::CardPayment::Element::CardSettlement::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Models::CardPayment::Element::CardSettlement::type_
          }

        class CardSettlement < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount: Integer

          attr_accessor card_authorization: String?

          attr_accessor card_payment_id: String

          attr_accessor cashback: Increase::CardPayment::Element::CardSettlement::Cashback?

          attr_accessor currency: Increase::Models::CardPayment::Element::CardSettlement::currency

          attr_accessor interchange: Increase::CardPayment::Element::CardSettlement::Interchange?

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String

          attr_accessor merchant_country: String

          attr_accessor merchant_name: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardSettlement::NetworkIdentifiers

          attr_accessor pending_transaction_id: String?

          attr_accessor presentment_amount: Integer

          attr_accessor presentment_currency: String

          attr_accessor purchase_details: Increase::CardPayment::Element::CardSettlement::PurchaseDetails?

          attr_accessor transaction_id: String

          attr_accessor type: Increase::Models::CardPayment::Element::CardSettlement::type_

          def initialize: (
            id: String,
            amount: Integer,
            card_authorization: String?,
            card_payment_id: String,
            cashback: Increase::CardPayment::Element::CardSettlement::Cashback?,
            currency: Increase::Models::CardPayment::Element::CardSettlement::currency,
            interchange: Increase::CardPayment::Element::CardSettlement::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::CardPayment::Element::CardSettlement::NetworkIdentifiers,
            pending_transaction_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::CardPayment::Element::CardSettlement::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Models::CardPayment::Element::CardSettlement::type_
          ) -> void

          def to_hash: -> {
            id: String,
            amount: Integer,
            card_authorization: String?,
            card_payment_id: String,
            cashback: Increase::CardPayment::Element::CardSettlement::Cashback?,
            currency: Increase::Models::CardPayment::Element::CardSettlement::currency,
            interchange: Increase::CardPayment::Element::CardSettlement::Interchange?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String,
            merchant_country: String,
            merchant_name: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_identifiers: Increase::CardPayment::Element::CardSettlement::NetworkIdentifiers,
            pending_transaction_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            purchase_details: Increase::CardPayment::Element::CardSettlement::PurchaseDetails?,
            transaction_id: String,
            type: Increase::Models::CardPayment::Element::CardSettlement::type_
          }

          type cashback =
            {
              amount: String,
              currency: Increase::Models::CardPayment::Element::CardSettlement::Cashback::currency
            }

          class Cashback < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor currency: Increase::Models::CardPayment::Element::CardSettlement::Cashback::currency

            def initialize: (
              amount: String,
              currency: Increase::Models::CardPayment::Element::CardSettlement::Cashback::currency
            ) -> void

            def to_hash: -> {
              amount: String,
              currency: Increase::Models::CardPayment::Element::CardSettlement::Cashback::currency
            }

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::Cashback::currency]
            end
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::currency]
          end

          type interchange =
            {
              amount: String,
              code: String?,
              currency: Increase::Models::CardPayment::Element::CardSettlement::Interchange::currency
            }

          class Interchange < Increase::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor code: String?

            attr_accessor currency: Increase::Models::CardPayment::Element::CardSettlement::Interchange::currency

            def initialize: (
              amount: String,
              code: String?,
              currency: Increase::Models::CardPayment::Element::CardSettlement::Interchange::currency
            ) -> void

            def to_hash: -> {
              amount: String,
              code: String?,
              currency: Increase::Models::CardPayment::Element::CardSettlement::Interchange::currency
            }

            type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

            module Currency
              extend Increase::Internal::Type::Enum

              # Canadian Dollar (CAD)
              CAD: :CAD

              # Swiss Franc (CHF)
              CHF: :CHF

              # Euro (EUR)
              EUR: :EUR

              # British Pound (GBP)
              GBP: :GBP

              # Japanese Yen (JPY)
              JPY: :JPY

              # US Dollar (USD)
              USD: :USD

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::Interchange::currency]
            end
          end

          type network_identifiers =
            {
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor acquirer_business_id: String

            attr_accessor acquirer_reference_number: String

            attr_accessor transaction_id: String?

            def initialize: (
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              acquirer_business_id: String,
              acquirer_reference_number: String,
              transaction_id: String?
            }
          end

          type purchase_details =
            {
              car_rental: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel?
            }

          class PurchaseDetails < Increase::Internal::Type::BaseModel
            attr_accessor car_rental: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental?

            attr_accessor customer_reference_identifier: String?

            attr_accessor local_tax_amount: Integer?

            attr_accessor local_tax_currency: String?

            attr_accessor lodging: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging?

            attr_accessor national_tax_amount: Integer?

            attr_accessor national_tax_currency: String?

            attr_accessor purchase_identifier: String?

            attr_accessor purchase_identifier_format: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::purchase_identifier_format?

            attr_accessor travel: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel?

            def initialize: (
              car_rental: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel?
            ) -> void

            def to_hash: -> {
              car_rental: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental?,
              customer_reference_identifier: String?,
              local_tax_amount: Integer?,
              local_tax_currency: String?,
              lodging: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging?,
              national_tax_amount: Integer?,
              national_tax_currency: String?,
              purchase_identifier: String?,
              purchase_identifier_format: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::purchase_identifier_format?,
              travel: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel?
            }

            type car_rental =
              {
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              }

            class CarRental < Increase::Internal::Type::BaseModel
              attr_accessor car_class_code: String?

              attr_accessor checkout_date: Date?

              attr_accessor daily_rental_rate_amount: Integer?

              attr_accessor daily_rental_rate_currency: String?

              attr_accessor days_rented: Integer?

              attr_accessor extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::extra_charges?

              attr_accessor fuel_charges_amount: Integer?

              attr_accessor fuel_charges_currency: String?

              attr_accessor insurance_charges_amount: Integer?

              attr_accessor insurance_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::no_show_indicator?

              attr_accessor one_way_drop_off_charges_amount: Integer?

              attr_accessor one_way_drop_off_charges_currency: String?

              attr_accessor renter_name: String?

              attr_accessor weekly_rental_rate_amount: Integer?

              attr_accessor weekly_rental_rate_currency: String?

              def initialize: (
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              ) -> void

              def to_hash: -> {
                car_class_code: String?,
                checkout_date: Date?,
                daily_rental_rate_amount: Integer?,
                daily_rental_rate_currency: String?,
                days_rented: Integer?,
                extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::extra_charges?,
                fuel_charges_amount: Integer?,
                fuel_charges_currency: String?,
                insurance_charges_amount: Integer?,
                insurance_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::no_show_indicator?,
                one_way_drop_off_charges_amount: Integer?,
                one_way_drop_off_charges_currency: String?,
                renter_name: String?,
                weekly_rental_rate_amount: Integer?,
                weekly_rental_rate_currency: String?
              }

              type extra_charges =
                :no_extra_charge
                | :gas
                | :extra_mileage
                | :late_return
                | :one_way_service_fee
                | :parking_violation

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Gas
                GAS: :gas

                # Extra mileage
                EXTRA_MILEAGE: :extra_mileage

                # Late return
                LATE_RETURN: :late_return

                # One way service fee
                ONE_WAY_SERVICE_FEE: :one_way_service_fee

                # Parking violation
                PARKING_VIOLATION: :parking_violation

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::extra_charges]
              end

              type no_show_indicator =
                :not_applicable | :no_show_for_specialized_vehicle

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show for specialized vehicle
                NO_SHOW_FOR_SPECIALIZED_VEHICLE: :no_show_for_specialized_vehicle

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::CarRental::no_show_indicator]
              end
            end

            type lodging =
              {
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              }

            class Lodging < Increase::Internal::Type::BaseModel
              attr_accessor check_in_date: Date?

              attr_accessor daily_room_rate_amount: Integer?

              attr_accessor daily_room_rate_currency: String?

              attr_accessor extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::extra_charges?

              attr_accessor folio_cash_advances_amount: Integer?

              attr_accessor folio_cash_advances_currency: String?

              attr_accessor food_beverage_charges_amount: Integer?

              attr_accessor food_beverage_charges_currency: String?

              attr_accessor no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::no_show_indicator?

              attr_accessor prepaid_expenses_amount: Integer?

              attr_accessor prepaid_expenses_currency: String?

              attr_accessor room_nights: Integer?

              attr_accessor total_room_tax_amount: Integer?

              attr_accessor total_room_tax_currency: String?

              attr_accessor total_tax_amount: Integer?

              attr_accessor total_tax_currency: String?

              def initialize: (
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              ) -> void

              def to_hash: -> {
                check_in_date: Date?,
                daily_room_rate_amount: Integer?,
                daily_room_rate_currency: String?,
                extra_charges: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::extra_charges?,
                folio_cash_advances_amount: Integer?,
                folio_cash_advances_currency: String?,
                food_beverage_charges_amount: Integer?,
                food_beverage_charges_currency: String?,
                no_show_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::no_show_indicator?,
                prepaid_expenses_amount: Integer?,
                prepaid_expenses_currency: String?,
                room_nights: Integer?,
                total_room_tax_amount: Integer?,
                total_room_tax_currency: String?,
                total_tax_amount: Integer?,
                total_tax_currency: String?
              }

              type extra_charges =
                :no_extra_charge
                | :restaurant
                | :gift_shop
                | :mini_bar
                | :telephone
                | :other
                | :laundry

              module ExtraCharges
                extend Increase::Internal::Type::Enum

                # No extra charge
                NO_EXTRA_CHARGE: :no_extra_charge

                # Restaurant
                RESTAURANT: :restaurant

                # Gift shop
                GIFT_SHOP: :gift_shop

                # Mini bar
                MINI_BAR: :mini_bar

                # Telephone
                TELEPHONE: :telephone

                # Other
                OTHER: :other

                # Laundry
                LAUNDRY: :laundry

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::extra_charges]
              end

              type no_show_indicator = :not_applicable | :no_show

              module NoShowIndicator
                extend Increase::Internal::Type::Enum

                # Not applicable
                NOT_APPLICABLE: :not_applicable

                # No show
                NO_SHOW: :no_show

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Lodging::no_show_indicator]
              end
            end

            type purchase_identifier_format =
              :free_text
              | :order_number
              | :rental_agreement_number
              | :hotel_folio_number
              | :invoice_number

            module PurchaseIdentifierFormat
              extend Increase::Internal::Type::Enum

              # Free text
              FREE_TEXT: :free_text

              # Order number
              ORDER_NUMBER: :order_number

              # Rental agreement number
              RENTAL_AGREEMENT_NUMBER: :rental_agreement_number

              # Hotel folio number
              HOTEL_FOLIO_NUMBER: :hotel_folio_number

              # Invoice number
              INVOICE_NUMBER: :invoice_number

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::purchase_identifier_format]
            end

            type travel =
              {
                ancillary: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg]?
              }

            class Travel < Increase::Internal::Type::BaseModel
              attr_accessor ancillary: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary?

              attr_accessor computerized_reservation_system: String?

              attr_accessor credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator?

              attr_accessor departure_date: Date?

              attr_accessor origination_city_airport_code: String?

              attr_accessor passenger_name: String?

              attr_accessor restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator?

              attr_accessor ticket_change_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator?

              attr_accessor ticket_number: String?

              attr_accessor travel_agency_code: String?

              attr_accessor travel_agency_name: String?

              attr_accessor trip_legs: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg]?

              def initialize: (
                ancillary: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg]?
              ) -> void

              def to_hash: -> {
                ancillary: Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary?,
                computerized_reservation_system: String?,
                credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator?,
                departure_date: Date?,
                origination_city_airport_code: String?,
                passenger_name: String?,
                restricted_ticket_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator?,
                ticket_change_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator?,
                ticket_number: String?,
                travel_agency_code: String?,
                travel_agency_name: String?,
                trip_legs: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg]?
              }

              type ancillary =
                {
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                }

              class Ancillary < Increase::Internal::Type::BaseModel
                attr_accessor connected_ticket_document_number: String?

                attr_accessor credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?

                attr_accessor passenger_name_or_description: String?

                attr_accessor services: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service]

                attr_accessor ticket_document_number: String?

                def initialize: (
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                ) -> void

                def to_hash: -> {
                  connected_ticket_document_number: String?,
                  credit_reason_indicator: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator?,
                  passenger_name_or_description: String?,
                  services: ::Array[Increase::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service],
                  ticket_document_number: String?
                }

                type credit_reason_indicator =
                  :no_credit
                  | :passenger_transport_ancillary_purchase_cancellation
                  | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                  | :other

                module CreditReasonIndicator
                  extend Increase::Internal::Type::Enum

                  # No credit
                  NO_CREDIT: :no_credit

                  # Passenger transport ancillary purchase cancellation
                  PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                  # Airline ticket and passenger transport ancillary purchase cancellation
                  AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                  # Other
                  OTHER: :other

                  def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::credit_reason_indicator]
                end

                type service =
                  {
                    category: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  }

                class Service < Increase::Internal::Type::BaseModel
                  attr_accessor category: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category?

                  attr_accessor sub_category: String?

                  def initialize: (
                    category: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  ) -> void

                  def to_hash: -> {
                    category: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category?,
                    sub_category: String?
                  }

                  type category =
                    :none
                    | :bundled_service
                    | :baggage_fee
                    | :change_fee
                    | :cargo
                    | :carbon_offset
                    | :frequent_flyer
                    | :gift_card
                    | :ground_transport
                    | :in_flight_entertainment
                    | :lounge
                    | :medical
                    | :meal_beverage
                    | :other
                    | :passenger_assist_fee
                    | :pets
                    | :seat_fees
                    | :standby
                    | :service_fee
                    | :store
                    | :travel_service
                    | :unaccompanied_travel
                    | :upgrades
                    | :wifi

                  module Category
                    extend Increase::Internal::Type::Enum

                    # None
                    NONE: :none

                    # Bundled service
                    BUNDLED_SERVICE: :bundled_service

                    # Baggage fee
                    BAGGAGE_FEE: :baggage_fee

                    # Change fee
                    CHANGE_FEE: :change_fee

                    # Cargo
                    CARGO: :cargo

                    # Carbon offset
                    CARBON_OFFSET: :carbon_offset

                    # Frequent flyer
                    FREQUENT_FLYER: :frequent_flyer

                    # Gift card
                    GIFT_CARD: :gift_card

                    # Ground transport
                    GROUND_TRANSPORT: :ground_transport

                    # In-flight entertainment
                    IN_FLIGHT_ENTERTAINMENT: :in_flight_entertainment

                    # Lounge
                    LOUNGE: :lounge

                    # Medical
                    MEDICAL: :medical

                    # Meal beverage
                    MEAL_BEVERAGE: :meal_beverage

                    # Other
                    OTHER: :other

                    # Passenger assist fee
                    PASSENGER_ASSIST_FEE: :passenger_assist_fee

                    # Pets
                    PETS: :pets

                    # Seat fees
                    SEAT_FEES: :seat_fees

                    # Standby
                    STANDBY: :standby

                    # Service fee
                    SERVICE_FEE: :service_fee

                    # Store
                    STORE: :store

                    # Travel service
                    TRAVEL_SERVICE: :travel_service

                    # Unaccompanied travel
                    UNACCOMPANIED_TRAVEL: :unaccompanied_travel

                    # Upgrades
                    UPGRADES: :upgrades

                    # Wi-fi
                    WIFI: :wifi

                    def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::Ancillary::Service::category]
                  end
                end
              end

              type credit_reason_indicator =
                :no_credit
                | :passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation
                | :airline_ticket_cancellation
                | :other
                | :partial_refund_of_airline_ticket

              module CreditReasonIndicator
                extend Increase::Internal::Type::Enum

                # No credit
                NO_CREDIT: :no_credit

                # Passenger transport ancillary purchase cancellation
                PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :passenger_transport_ancillary_purchase_cancellation

                # Airline ticket and passenger transport ancillary purchase cancellation
                AIRLINE_TICKET_AND_PASSENGER_TRANSPORT_ANCILLARY_PURCHASE_CANCELLATION: :airline_ticket_and_passenger_transport_ancillary_purchase_cancellation

                # Airline ticket cancellation
                AIRLINE_TICKET_CANCELLATION: :airline_ticket_cancellation

                # Other
                OTHER: :other

                # Partial refund of airline ticket
                PARTIAL_REFUND_OF_AIRLINE_TICKET: :partial_refund_of_airline_ticket

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::credit_reason_indicator]
              end

              type restricted_ticket_indicator =
                :no_restrictions | :restricted_non_refundable_ticket

              module RestrictedTicketIndicator
                extend Increase::Internal::Type::Enum

                # No restrictions
                NO_RESTRICTIONS: :no_restrictions

                # Restricted non-refundable ticket
                RESTRICTED_NON_REFUNDABLE_TICKET: :restricted_non_refundable_ticket

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::restricted_ticket_indicator]
              end

              type ticket_change_indicator =
                :none | :change_to_existing_ticket | :new_ticket

              module TicketChangeIndicator
                extend Increase::Internal::Type::Enum

                # None
                NONE: :none

                # Change to existing ticket
                CHANGE_TO_EXISTING_TICKET: :change_to_existing_ticket

                # New ticket
                NEW_TICKET: :new_ticket

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::ticket_change_indicator]
              end

              type trip_leg =
                {
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code?
                }

              class TripLeg < Increase::Internal::Type::BaseModel
                attr_accessor carrier_code: String?

                attr_accessor destination_city_airport_code: String?

                attr_accessor fare_basis_code: String?

                attr_accessor flight_number: String?

                attr_accessor service_class: String?

                attr_accessor stop_over_code: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code?

                def initialize: (
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code?
                ) -> void

                def to_hash: -> {
                  carrier_code: String?,
                  destination_city_airport_code: String?,
                  fare_basis_code: String?,
                  flight_number: String?,
                  service_class: String?,
                  stop_over_code: Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code?
                }

                type stop_over_code =
                  :none | :stop_over_allowed | :stop_over_not_allowed

                module StopOverCode
                  extend Increase::Internal::Type::Enum

                  # None
                  NONE: :none

                  # Stop over allowed
                  STOP_OVER_ALLOWED: :stop_over_allowed

                  # Stop over not allowed
                  STOP_OVER_NOT_ALLOWED: :stop_over_not_allowed

                  def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::PurchaseDetails::Travel::TripLeg::stop_over_code]
                end
              end
            end
          end

          type type_ = :card_settlement

          module Type
            extend Increase::Internal::Type::Enum

            CARD_SETTLEMENT: :card_settlement

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardSettlement::type_]
          end
        end

        type card_validation =
          {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardValidation::actioner,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardValidation::currency,
            digital_wallet_token_id: String?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardValidation::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardValidation::NetworkIdentifiers,
            network_risk_score: Integer?,
            physical_card_id: String?,
            real_time_decision_id: String?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardValidation::type_,
            verification: Increase::CardPayment::Element::CardValidation::Verification
          }

        class CardValidation < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor actioner: Increase::Models::CardPayment::Element::CardValidation::actioner

          attr_accessor card_payment_id: String

          attr_accessor currency: Increase::Models::CardPayment::Element::CardValidation::currency

          attr_accessor digital_wallet_token_id: String?

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String?

          attr_accessor merchant_country: String

          attr_accessor merchant_descriptor: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_details: Increase::CardPayment::Element::CardValidation::NetworkDetails

          attr_accessor network_identifiers: Increase::CardPayment::Element::CardValidation::NetworkIdentifiers

          attr_accessor network_risk_score: Integer?

          attr_accessor physical_card_id: String?

          attr_accessor real_time_decision_id: String?

          attr_accessor terminal_id: String?

          attr_accessor type: Increase::Models::CardPayment::Element::CardValidation::type_

          attr_accessor verification: Increase::CardPayment::Element::CardValidation::Verification

          def initialize: (
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardValidation::actioner,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardValidation::currency,
            digital_wallet_token_id: String?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardValidation::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardValidation::NetworkIdentifiers,
            network_risk_score: Integer?,
            physical_card_id: String?,
            real_time_decision_id: String?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardValidation::type_,
            verification: Increase::CardPayment::Element::CardValidation::Verification
          ) -> void

          def to_hash: -> {
            id: String,
            actioner: Increase::Models::CardPayment::Element::CardValidation::actioner,
            card_payment_id: String,
            currency: Increase::Models::CardPayment::Element::CardValidation::currency,
            digital_wallet_token_id: String?,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::CardPayment::Element::CardValidation::NetworkDetails,
            network_identifiers: Increase::CardPayment::Element::CardValidation::NetworkIdentifiers,
            network_risk_score: Integer?,
            physical_card_id: String?,
            real_time_decision_id: String?,
            terminal_id: String?,
            type: Increase::Models::CardPayment::Element::CardValidation::type_,
            verification: Increase::CardPayment::Element::CardValidation::Verification
          }

          type actioner = :user | :increase | :network

          module Actioner
            extend Increase::Internal::Type::Enum

            # This object was actioned by the user through a real-time decision.
            USER: :user

            # This object was actioned by Increase without user intervention.
            INCREASE: :increase

            # This object was actioned by the network, through stand-in processing.
            NETWORK: :network

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::actioner]
          end

          type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::currency]
          end

          type network_details =
            {
              category: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardValidation::NetworkDetails::Visa?
            }

          class NetworkDetails < Increase::Internal::Type::BaseModel
            attr_accessor category: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::category

            attr_accessor visa: Increase::CardPayment::Element::CardValidation::NetworkDetails::Visa?

            def initialize: (
              category: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardValidation::NetworkDetails::Visa?
            ) -> void

            def to_hash: -> {
              category: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::category,
              visa: Increase::CardPayment::Element::CardValidation::NetworkDetails::Visa?
            }

            type category = :visa

            module Category
              extend Increase::Internal::Type::Enum

              # Visa
              VISA: :visa

              def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::category]
            end

            type visa =
              {
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::stand_in_processing_reason?
              }

            class Visa < Increase::Internal::Type::BaseModel
              attr_accessor electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::electronic_commerce_indicator?

              attr_accessor point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::point_of_service_entry_mode?

              attr_accessor stand_in_processing_reason: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::stand_in_processing_reason?

              def initialize: (
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::stand_in_processing_reason?
              ) -> void

              def to_hash: -> {
                electronic_commerce_indicator: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::stand_in_processing_reason?
              }

              type electronic_commerce_indicator =
                :mail_phone_order
                | :recurring
                | :installment
                | :unknown_mail_phone_order
                | :secure_electronic_commerce
                | :non_authenticated_security_transaction_at_3ds_capable_merchant
                | :non_authenticated_security_transaction
                | :non_secure_transaction

              module ElectronicCommerceIndicator
                extend Increase::Internal::Type::Enum

                # Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.
                MAIL_PHONE_ORDER: :mail_phone_order

                # Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.
                RECURRING: :recurring

                # Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.
                INSTALLMENT: :installment

                # Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.
                UNKNOWN_MAIL_PHONE_ORDER: :unknown_mail_phone_order

                # Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure
                SECURE_ELECTRONIC_COMMERCE: :secure_electronic_commerce

                # Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.
                NON_AUTHENTICATED_SECURITY_TRANSACTION_AT_3DS_CAPABLE_MERCHANT: :non_authenticated_security_transaction_at_3ds_capable_merchant

                # Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.
                NON_AUTHENTICATED_SECURITY_TRANSACTION: :non_authenticated_security_transaction

                # Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection.
                NON_SECURE_TRANSACTION: :non_secure_transaction

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::electronic_commerce_indicator]
              end

              type point_of_service_entry_mode =
                :unknown
                | :manual
                | :magnetic_stripe_no_cvv
                | :optical_code
                | :integrated_circuit_card
                | :contactless
                | :credential_on_file
                | :magnetic_stripe
                | :contactless_magnetic_stripe
                | :integrated_circuit_card_no_cvv

              module PointOfServiceEntryMode
                extend Increase::Internal::Type::Enum

                # Unknown
                UNKNOWN: :unknown

                # Manual key entry
                MANUAL: :manual

                # Magnetic stripe read, without card verification value
                MAGNETIC_STRIPE_NO_CVV: :magnetic_stripe_no_cvv

                # Optical code
                OPTICAL_CODE: :optical_code

                # Contact chip card
                INTEGRATED_CIRCUIT_CARD: :integrated_circuit_card

                # Contactless read of chip card
                CONTACTLESS: :contactless

                # Transaction initiated using a credential that has previously been stored on file
                CREDENTIAL_ON_FILE: :credential_on_file

                # Magnetic stripe read
                MAGNETIC_STRIPE: :magnetic_stripe

                # Contactless read of magnetic stripe data
                CONTACTLESS_MAGNETIC_STRIPE: :contactless_magnetic_stripe

                # Contact chip card, without card verification value
                INTEGRATED_CIRCUIT_CARD_NO_CVV: :integrated_circuit_card_no_cvv

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::point_of_service_entry_mode]
              end

              type stand_in_processing_reason =
                :issuer_error
                | :invalid_physical_card
                | :invalid_cardholder_authentication_verification_value
                | :internal_visa_error
                | :merchant_transaction_advisory_service_authentication_required
                | :payment_fraud_disruption_acquirer_block
                | :other

              module StandInProcessingReason
                extend Increase::Internal::Type::Enum

                # Increase failed to process the authorization in a timely manner.
                ISSUER_ERROR: :issuer_error

                # The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.
                INVALID_PHYSICAL_CARD: :invalid_physical_card

                # The 3DS cardholder authentication verification value was invalid.
                INVALID_CARDHOLDER_AUTHENTICATION_VERIFICATION_VALUE: :invalid_cardholder_authentication_verification_value

                # An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.
                INTERNAL_VISA_ERROR: :internal_visa_error

                # The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.
                MERCHANT_TRANSACTION_ADVISORY_SERVICE_AUTHENTICATION_REQUIRED: :merchant_transaction_advisory_service_authentication_required

                # The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.
                PAYMENT_FRAUD_DISRUPTION_ACQUIRER_BLOCK: :payment_fraud_disruption_acquirer_block

                # An unspecific reason for stand-in processing.
                OTHER: :other

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::NetworkDetails::Visa::stand_in_processing_reason]
              end
            end
          end

          type network_identifiers =
            {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor retrieval_reference_number: String?

            attr_accessor trace_number: String?

            attr_accessor transaction_id: String?

            def initialize: (
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            ) -> void

            def to_hash: -> {
              retrieval_reference_number: String?,
              trace_number: String?,
              transaction_id: String?
            }
          end

          type type_ = :card_validation

          module Type
            extend Increase::Internal::Type::Enum

            CARD_VALIDATION: :card_validation

            def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::type_]
          end

          type verification =
            {
              card_verification_code: Increase::CardPayment::Element::CardValidation::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardValidation::Verification::CardholderAddress
            }

          class Verification < Increase::Internal::Type::BaseModel
            attr_accessor card_verification_code: Increase::CardPayment::Element::CardValidation::Verification::CardVerificationCode

            attr_accessor cardholder_address: Increase::CardPayment::Element::CardValidation::Verification::CardholderAddress

            def initialize: (
              card_verification_code: Increase::CardPayment::Element::CardValidation::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardValidation::Verification::CardholderAddress
            ) -> void

            def to_hash: -> {
              card_verification_code: Increase::CardPayment::Element::CardValidation::Verification::CardVerificationCode,
              cardholder_address: Increase::CardPayment::Element::CardValidation::Verification::CardholderAddress
            }

            type card_verification_code =
              {
                result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardVerificationCode::result
              }

            class CardVerificationCode < Increase::Internal::Type::BaseModel
              attr_accessor result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardVerificationCode::result

              def initialize: (
                result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardVerificationCode::result
              ) -> void

              def to_hash: -> {
                result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardVerificationCode::result
              }

              type result = :not_checked | :match | :no_match

              module Result
                extend Increase::Internal::Type::Enum

                # No card verification code was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # The card verification code matched the one on file.
                MATCH: :match

                # The card verification code did not match the one on file.
                NO_MATCH: :no_match

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::Verification::CardVerificationCode::result]
              end
            end

            type cardholder_address =
              {
                :actual_line1 => String?,
                actual_postal_code: String?,
                :provided_line1 => String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardholderAddress::result
              }

            class CardholderAddress < Increase::Internal::Type::BaseModel
              attr_accessor actual_line1: String?

              attr_accessor actual_postal_code: String?

              attr_accessor provided_line1: String?

              attr_accessor provided_postal_code: String?

              attr_accessor result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardholderAddress::result

              def initialize: (
                actual_line1: String?,
                actual_postal_code: String?,
                provided_line1: String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardholderAddress::result
              ) -> void

              def to_hash: -> {
                :actual_line1 => String?,
                actual_postal_code: String?,
                :provided_line1 => String?,
                provided_postal_code: String?,
                result: Increase::Models::CardPayment::Element::CardValidation::Verification::CardholderAddress::result
              }

              type result =
                :not_checked
                | :postal_code_match_address_not_checked
                | :postal_code_match_address_no_match
                | :postal_code_no_match_address_match
                | :match
                | :no_match

              module Result
                extend Increase::Internal::Type::Enum

                # No address was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # Postal code matches, but the street address was not verified.
                POSTAL_CODE_MATCH_ADDRESS_NOT_CHECKED: :postal_code_match_address_not_checked

                # Postal code matches, but the street address does not match.
                POSTAL_CODE_MATCH_ADDRESS_NO_MATCH: :postal_code_match_address_no_match

                # Postal code does not match, but the street address matches.
                POSTAL_CODE_NO_MATCH_ADDRESS_MATCH: :postal_code_no_match_address_match

                # Postal code and street address match.
                MATCH: :match

                # Postal code and street address do not match.
                NO_MATCH: :no_match

                def self?.values: -> ::Array[Increase::Models::CardPayment::Element::CardValidation::Verification::CardholderAddress::result]
              end
            end
          end
        end

        type category =
          :card_authorization
          | :card_authentication
          | :card_validation
          | :card_decline
          | :card_reversal
          | :card_authorization_expiration
          | :card_increment
          | :card_settlement
          | :card_refund
          | :card_fuel_confirmation
          | :other

        module Category
          extend Increase::Internal::Type::Enum

          # Card Authorization: details will be under the `card_authorization` object.
          CARD_AUTHORIZATION: :card_authorization

          # Card Authentication: details will be under the `card_authentication` object.
          CARD_AUTHENTICATION: :card_authentication

          # Card Validation: details will be under the `card_validation` object.
          CARD_VALIDATION: :card_validation

          # Card Decline: details will be under the `card_decline` object.
          CARD_DECLINE: :card_decline

          # Card Reversal: details will be under the `card_reversal` object.
          CARD_REVERSAL: :card_reversal

          # Card Authorization Expiration: details will be under the `card_authorization_expiration` object.
          CARD_AUTHORIZATION_EXPIRATION: :card_authorization_expiration

          # Card Increment: details will be under the `card_increment` object.
          CARD_INCREMENT: :card_increment

          # Card Settlement: details will be under the `card_settlement` object.
          CARD_SETTLEMENT: :card_settlement

          # Card Refund: details will be under the `card_refund` object.
          CARD_REFUND: :card_refund

          # Card Fuel Confirmation: details will be under the `card_fuel_confirmation` object.
          CARD_FUEL_CONFIRMATION: :card_fuel_confirmation

          # Unknown card payment element.
          OTHER: :other

          def self?.values: -> ::Array[Increase::Models::CardPayment::Element::category]
        end
      end

      type state =
        {
          authorized_amount: Integer,
          fuel_confirmed_amount: Integer,
          incremented_amount: Integer,
          reversed_amount: Integer,
          settled_amount: Integer
        }

      class State < Increase::Internal::Type::BaseModel
        attr_accessor authorized_amount: Integer

        attr_accessor fuel_confirmed_amount: Integer

        attr_accessor incremented_amount: Integer

        attr_accessor reversed_amount: Integer

        attr_accessor settled_amount: Integer

        def initialize: (
          authorized_amount: Integer,
          fuel_confirmed_amount: Integer,
          incremented_amount: Integer,
          reversed_amount: Integer,
          settled_amount: Integer
        ) -> void

        def to_hash: -> {
          authorized_amount: Integer,
          fuel_confirmed_amount: Integer,
          incremented_amount: Integer,
          reversed_amount: Integer,
          settled_amount: Integer
        }
      end

      type type_ = :card_payment

      module Type
        extend Increase::Internal::Type::Enum

        CARD_PAYMENT: :card_payment

        def self?.values: -> ::Array[Increase::Models::CardPayment::type_]
      end
    end
  end
end
