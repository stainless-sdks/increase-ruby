module Increase
  module Models
    type entity_create_params = ({
      structure: Increase::Models::EntityCreateParams::structure,
      corporation: Increase::EntityCreateParams::Corporation,
      description: String,
      government_authority: Increase::EntityCreateParams::GovernmentAuthority,
      joint: Increase::EntityCreateParams::Joint,
      natural_person: Increase::EntityCreateParams::NaturalPerson,
      supplemental_documents: ::Array[Increase::EntityCreateParams::SupplementalDocument],
      third_party_verification: Increase::EntityCreateParams::ThirdPartyVerification,
      trust: Increase::EntityCreateParams::Trust
    } & Increase::Internal::Type::request_parameters)

    class EntityCreateParams < Increase::Internal::Type::BaseModel
      extend Increase::Internal::Type::RequestParameters::Converter
      include Increase::Internal::Type::RequestParameters

      attr_accessor structure: Increase::Models::EntityCreateParams::structure

      attr_reader corporation: Increase::EntityCreateParams::Corporation?

      def corporation=: (Increase::EntityCreateParams::Corporation) -> Increase::EntityCreateParams::Corporation

      attr_reader description: String?

      def description=: (String) -> String

      attr_reader government_authority: Increase::EntityCreateParams::GovernmentAuthority?

      def government_authority=: (Increase::EntityCreateParams::GovernmentAuthority) -> Increase::EntityCreateParams::GovernmentAuthority

      attr_reader joint: Increase::EntityCreateParams::Joint?

      def joint=: (Increase::EntityCreateParams::Joint) -> Increase::EntityCreateParams::Joint

      attr_reader natural_person: Increase::EntityCreateParams::NaturalPerson?

      def natural_person=: (Increase::EntityCreateParams::NaturalPerson) -> Increase::EntityCreateParams::NaturalPerson

      attr_reader supplemental_documents: ::Array[Increase::EntityCreateParams::SupplementalDocument]?

      def supplemental_documents=: (::Array[Increase::EntityCreateParams::SupplementalDocument]) -> ::Array[Increase::EntityCreateParams::SupplementalDocument]

      attr_reader third_party_verification: Increase::EntityCreateParams::ThirdPartyVerification?

      def third_party_verification=: (Increase::EntityCreateParams::ThirdPartyVerification) -> Increase::EntityCreateParams::ThirdPartyVerification

      attr_reader trust: Increase::EntityCreateParams::Trust?

      def trust=: (Increase::EntityCreateParams::Trust) -> Increase::EntityCreateParams::Trust

      def initialize: (structure: Increase::Models::EntityCreateParams::structure, ?corporation: Increase::EntityCreateParams::Corporation, ?description: String, ?government_authority: Increase::EntityCreateParams::GovernmentAuthority, ?joint: Increase::EntityCreateParams::Joint, ?natural_person: Increase::EntityCreateParams::NaturalPerson, ?supplemental_documents: ::Array[Increase::EntityCreateParams::SupplementalDocument], ?third_party_verification: Increase::EntityCreateParams::ThirdPartyVerification, ?trust: Increase::EntityCreateParams::Trust, ?request_options: Increase::request_opts) -> void

      def to_hash: () -> {
        structure: Increase::Models::EntityCreateParams::structure,
        corporation: Increase::EntityCreateParams::Corporation,
        description: String,
        government_authority: Increase::EntityCreateParams::GovernmentAuthority,
        joint: Increase::EntityCreateParams::Joint,
        natural_person: Increase::EntityCreateParams::NaturalPerson,
        supplemental_documents: ::Array[Increase::EntityCreateParams::SupplementalDocument],
        third_party_verification: Increase::EntityCreateParams::ThirdPartyVerification,
        trust: Increase::EntityCreateParams::Trust,
        request_options: Increase::RequestOptions
      }

      type structure = (:corporation | :natural_person | :joint | :trust | :government_authority)

      module Structure
        extend Increase::Internal::Type::Enum

        # A corporation.
        CORPORATION: :corporation

        # An individual person.
        NATURAL_PERSON: :natural_person

        # Multiple individual people.
        JOINT: :joint

        # A trust.
        TRUST: :trust

        # A government authority.
        GOVERNMENT_AUTHORITY: :government_authority

        def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::structure]
      end

      type corporation = {
        address: Increase::EntityCreateParams::Corporation::Address,
        beneficial_owners: ::Array[Increase::EntityCreateParams::Corporation::BeneficialOwner],
        name: String,
        tax_identifier: String,
        beneficial_ownership_exemption_reason: Increase::Models::EntityCreateParams::Corporation::beneficial_ownership_exemption_reason,
        incorporation_state: String,
        industry_code: String,
        website: String
      }

      class Corporation < Increase::Internal::Type::BaseModel
        attr_accessor address: Increase::EntityCreateParams::Corporation::Address

        attr_accessor beneficial_owners: ::Array[Increase::EntityCreateParams::Corporation::BeneficialOwner]

        attr_accessor name: String

        attr_accessor tax_identifier: String

        attr_reader beneficial_ownership_exemption_reason: Increase::Models::EntityCreateParams::Corporation::beneficial_ownership_exemption_reason?

        def beneficial_ownership_exemption_reason=: (Increase::Models::EntityCreateParams::Corporation::beneficial_ownership_exemption_reason) -> Increase::Models::EntityCreateParams::Corporation::beneficial_ownership_exemption_reason

        attr_reader incorporation_state: String?

        def incorporation_state=: (String) -> String

        attr_reader industry_code: String?

        def industry_code=: (String) -> String

        attr_reader website: String?

        def website=: (String) -> String

        def initialize: (address: Increase::EntityCreateParams::Corporation::Address, beneficial_owners: ::Array[Increase::EntityCreateParams::Corporation::BeneficialOwner], name: String, tax_identifier: String, ?beneficial_ownership_exemption_reason: Increase::Models::EntityCreateParams::Corporation::beneficial_ownership_exemption_reason, ?incorporation_state: String, ?industry_code: String, ?website: String) -> void

        def to_hash: () -> {
          address: Increase::EntityCreateParams::Corporation::Address,
          beneficial_owners: ::Array[Increase::EntityCreateParams::Corporation::BeneficialOwner],
          name: String,
          tax_identifier: String,
          beneficial_ownership_exemption_reason: Increase::Models::EntityCreateParams::Corporation::beneficial_ownership_exemption_reason,
          incorporation_state: String,
          industry_code: String,
          website: String
        }

        type address = {city: String, line1: String, state: String, zip: String, line2: String}

        class Address < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize: (city: String, line1: String, state: String, zip: String, ?line2: String) -> void

          def to_hash: () -> {city: String, line1: String, state: String, zip: String, line2: String}
        end

        type beneficial_owner = {
          individual: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual,
          prongs: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong],
          company_title: String
        }

        class BeneficialOwner < Increase::Internal::Type::BaseModel
          attr_accessor individual: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual

          attr_accessor prongs: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong]

          attr_reader company_title: String?

          def company_title=: (String) -> String

          def initialize: (individual: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual, prongs: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong], ?company_title: String) -> void

          def to_hash: () -> {
            individual: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual,
            prongs: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong],
            company_title: String
          }

          type individual = {
            address: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Address,
            date_of_birth: Date,
            identification: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification,
            name: String,
            confirmed_no_us_tax_id: bool
          }

          class Individual < Increase::Internal::Type::BaseModel
            attr_accessor address: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Address

            attr_accessor date_of_birth: Date

            attr_accessor identification: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification

            attr_accessor name: String

            attr_reader confirmed_no_us_tax_id: bool?

            def confirmed_no_us_tax_id=: (bool) -> bool

            def initialize: (address: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Address, date_of_birth: Date, identification: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification, name: String, ?confirmed_no_us_tax_id: bool) -> void

            def to_hash: () -> {
              address: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Address,
              date_of_birth: Date,
              identification: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification,
              name: String,
              confirmed_no_us_tax_id: bool
            }

            type address = {country: String, line1: String, city: String, line2: String, state: String, zip: String}

            class Address < Increase::Internal::Type::BaseModel
              attr_accessor country: String

              attr_accessor line1: String

              attr_reader city: String?

              def city=: (String) -> String

              attr_reader line2: String?

              def line2=: (String) -> String

              attr_reader state: String?

              def state=: (String) -> String

              attr_reader zip: String?

              def zip=: (String) -> String

              def initialize: (country: String, line1: String, ?city: String, ?line2: String, ?state: String, ?zip: String) -> void

              def to_hash: () -> {country: String, line1: String, city: String, line2: String, state: String, zip: String}
            end

            type identification = {
              method_: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_,
              number: String,
              drivers_license: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense,
              other: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other,
              passport: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport
            }

            class Identification < Increase::Internal::Type::BaseModel
              attr_accessor method_: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_

              attr_accessor number: String

              attr_reader drivers_license: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense?

              def drivers_license=: (Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense) -> Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense

              attr_reader other: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other?

              def other=: (Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other) -> Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other

              attr_reader passport: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport?

              def passport=: (Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport) -> Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport

              def initialize: (method_: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_, number: String, ?drivers_license: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense, ?other: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other, ?passport: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport) -> void

              def to_hash: () -> {
                method_: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_,
                number: String,
                drivers_license: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense,
                other: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other,
                passport: Increase::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport
              }

              type method_ = (:social_security_number | :individual_taxpayer_identification_number | :passport | :drivers_license | :other)

              module Method
                extend Increase::Internal::Type::Enum

                # A social security number.
                SOCIAL_SECURITY_NUMBER: :social_security_number

                # An individual taxpayer identification number (ITIN).
                INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

                # A passport number.
                PASSPORT: :passport

                # A driver's license number.
                DRIVERS_LICENSE: :drivers_license

                # Another identifying document.
                OTHER: :other

                def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_]
              end

              type drivers_license = {expiration_date: Date, file_id: String, state: String, back_file_id: String}

              class DriversLicense < Increase::Internal::Type::BaseModel
                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                attr_accessor state: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                def initialize: (expiration_date: Date, file_id: String, state: String, ?back_file_id: String) -> void

                def to_hash: () -> {expiration_date: Date, file_id: String, state: String, back_file_id: String}
              end

              type other = {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}

              class Other < Increase::Internal::Type::BaseModel
                attr_accessor country: String

                attr_accessor description: String

                attr_accessor file_id: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                attr_reader expiration_date: Date?

                def expiration_date=: (Date) -> Date

                def initialize: (country: String, description: String, file_id: String, ?back_file_id: String, ?expiration_date: Date) -> void

                def to_hash: () -> {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}
              end

              type passport = {country: String, expiration_date: Date, file_id: String}

              class Passport < Increase::Internal::Type::BaseModel
                attr_accessor country: String

                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                def initialize: (country: String, expiration_date: Date, file_id: String) -> void

                def to_hash: () -> {country: String, expiration_date: Date, file_id: String}
              end
            end
          end

          type prong = (:ownership | :control)

          module Prong
            extend Increase::Internal::Type::Enum

            # A person with 25% or greater direct or indirect ownership of the entity.
            OWNERSHIP: :ownership

            # A person who manages, directs, or has significant control of the entity.
            CONTROL: :control

            def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong]
          end
        end

        type beneficial_ownership_exemption_reason = (:regulated_financial_institution | :publicly_traded_company | :public_entity)

        module BeneficialOwnershipExemptionReason
          extend Increase::Internal::Type::Enum

          # A regulated financial institution.
          REGULATED_FINANCIAL_INSTITUTION: :regulated_financial_institution

          # A publicly traded company.
          PUBLICLY_TRADED_COMPANY: :publicly_traded_company

          # A public entity acting on behalf of the federal or a state government.
          PUBLIC_ENTITY: :public_entity

          def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Corporation::beneficial_ownership_exemption_reason]
        end
      end

      type government_authority = {
        address: Increase::EntityCreateParams::GovernmentAuthority::Address,
        authorized_persons: ::Array[Increase::EntityCreateParams::GovernmentAuthority::AuthorizedPerson],
        category: Increase::Models::EntityCreateParams::GovernmentAuthority::category,
        name: String,
        tax_identifier: String,
        website: String
      }

      class GovernmentAuthority < Increase::Internal::Type::BaseModel
        attr_accessor address: Increase::EntityCreateParams::GovernmentAuthority::Address

        attr_accessor authorized_persons: ::Array[Increase::EntityCreateParams::GovernmentAuthority::AuthorizedPerson]

        attr_accessor category: Increase::Models::EntityCreateParams::GovernmentAuthority::category

        attr_accessor name: String

        attr_accessor tax_identifier: String

        attr_reader website: String?

        def website=: (String) -> String

        def initialize: (address: Increase::EntityCreateParams::GovernmentAuthority::Address, authorized_persons: ::Array[Increase::EntityCreateParams::GovernmentAuthority::AuthorizedPerson], category: Increase::Models::EntityCreateParams::GovernmentAuthority::category, name: String, tax_identifier: String, ?website: String) -> void

        def to_hash: () -> {
          address: Increase::EntityCreateParams::GovernmentAuthority::Address,
          authorized_persons: ::Array[Increase::EntityCreateParams::GovernmentAuthority::AuthorizedPerson],
          category: Increase::Models::EntityCreateParams::GovernmentAuthority::category,
          name: String,
          tax_identifier: String,
          website: String
        }

        type address = {city: String, line1: String, state: String, zip: String, line2: String}

        class Address < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize: (city: String, line1: String, state: String, zip: String, ?line2: String) -> void

          def to_hash: () -> {city: String, line1: String, state: String, zip: String, line2: String}
        end

        type authorized_person = {name: String}

        class AuthorizedPerson < Increase::Internal::Type::BaseModel
          attr_accessor name: String

          def initialize: (name: String) -> void

          def to_hash: () -> {name: String}
        end

        type category = :municipality

        module Category
          extend Increase::Internal::Type::Enum

          # The Public Entity is a Municipality.
          MUNICIPALITY: :municipality

          def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::GovernmentAuthority::category]
        end
      end

      type joint = {individuals: ::Array[Increase::EntityCreateParams::Joint::Individual], name: String}

      class Joint < Increase::Internal::Type::BaseModel
        attr_accessor individuals: ::Array[Increase::EntityCreateParams::Joint::Individual]

        attr_reader name: String?

        def name=: (String) -> String

        def initialize: (individuals: ::Array[Increase::EntityCreateParams::Joint::Individual], ?name: String) -> void

        def to_hash: () -> {individuals: ::Array[Increase::EntityCreateParams::Joint::Individual], name: String}

        type individual = {
          address: Increase::EntityCreateParams::Joint::Individual::Address,
          date_of_birth: Date,
          identification: Increase::EntityCreateParams::Joint::Individual::Identification,
          name: String,
          confirmed_no_us_tax_id: bool
        }

        class Individual < Increase::Internal::Type::BaseModel
          attr_accessor address: Increase::EntityCreateParams::Joint::Individual::Address

          attr_accessor date_of_birth: Date

          attr_accessor identification: Increase::EntityCreateParams::Joint::Individual::Identification

          attr_accessor name: String

          attr_reader confirmed_no_us_tax_id: bool?

          def confirmed_no_us_tax_id=: (bool) -> bool

          def initialize: (address: Increase::EntityCreateParams::Joint::Individual::Address, date_of_birth: Date, identification: Increase::EntityCreateParams::Joint::Individual::Identification, name: String, ?confirmed_no_us_tax_id: bool) -> void

          def to_hash: () -> {
            address: Increase::EntityCreateParams::Joint::Individual::Address,
            date_of_birth: Date,
            identification: Increase::EntityCreateParams::Joint::Individual::Identification,
            name: String,
            confirmed_no_us_tax_id: bool
          }

          type address = {city: String, line1: String, state: String, zip: String, line2: String}

          class Address < Increase::Internal::Type::BaseModel
            attr_accessor city: String

            attr_accessor line1: String

            attr_accessor state: String

            attr_accessor zip: String

            attr_reader line2: String?

            def line2=: (String) -> String

            def initialize: (city: String, line1: String, state: String, zip: String, ?line2: String) -> void

            def to_hash: () -> {city: String, line1: String, state: String, zip: String, line2: String}
          end

          type identification = {
            method_: Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_,
            number: String,
            drivers_license: Increase::EntityCreateParams::Joint::Individual::Identification::DriversLicense,
            other: Increase::EntityCreateParams::Joint::Individual::Identification::Other,
            passport: Increase::EntityCreateParams::Joint::Individual::Identification::Passport
          }

          class Identification < Increase::Internal::Type::BaseModel
            attr_accessor method_: Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_

            attr_accessor number: String

            attr_reader drivers_license: Increase::EntityCreateParams::Joint::Individual::Identification::DriversLicense?

            def drivers_license=: (Increase::EntityCreateParams::Joint::Individual::Identification::DriversLicense) -> Increase::EntityCreateParams::Joint::Individual::Identification::DriversLicense

            attr_reader other: Increase::EntityCreateParams::Joint::Individual::Identification::Other?

            def other=: (Increase::EntityCreateParams::Joint::Individual::Identification::Other) -> Increase::EntityCreateParams::Joint::Individual::Identification::Other

            attr_reader passport: Increase::EntityCreateParams::Joint::Individual::Identification::Passport?

            def passport=: (Increase::EntityCreateParams::Joint::Individual::Identification::Passport) -> Increase::EntityCreateParams::Joint::Individual::Identification::Passport

            def initialize: (method_: Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_, number: String, ?drivers_license: Increase::EntityCreateParams::Joint::Individual::Identification::DriversLicense, ?other: Increase::EntityCreateParams::Joint::Individual::Identification::Other, ?passport: Increase::EntityCreateParams::Joint::Individual::Identification::Passport) -> void

            def to_hash: () -> {
              method_: Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_,
              number: String,
              drivers_license: Increase::EntityCreateParams::Joint::Individual::Identification::DriversLicense,
              other: Increase::EntityCreateParams::Joint::Individual::Identification::Other,
              passport: Increase::EntityCreateParams::Joint::Individual::Identification::Passport
            }

            type method_ = (:social_security_number | :individual_taxpayer_identification_number | :passport | :drivers_license | :other)

            module Method
              extend Increase::Internal::Type::Enum

              # A social security number.
              SOCIAL_SECURITY_NUMBER: :social_security_number

              # An individual taxpayer identification number (ITIN).
              INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

              # A passport number.
              PASSPORT: :passport

              # A driver's license number.
              DRIVERS_LICENSE: :drivers_license

              # Another identifying document.
              OTHER: :other

              def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_]
            end

            type drivers_license = {expiration_date: Date, file_id: String, state: String, back_file_id: String}

            class DriversLicense < Increase::Internal::Type::BaseModel
              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              attr_accessor state: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              def initialize: (expiration_date: Date, file_id: String, state: String, ?back_file_id: String) -> void

              def to_hash: () -> {expiration_date: Date, file_id: String, state: String, back_file_id: String}
            end

            type other = {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}

            class Other < Increase::Internal::Type::BaseModel
              attr_accessor country: String

              attr_accessor description: String

              attr_accessor file_id: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              attr_reader expiration_date: Date?

              def expiration_date=: (Date) -> Date

              def initialize: (country: String, description: String, file_id: String, ?back_file_id: String, ?expiration_date: Date) -> void

              def to_hash: () -> {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}
            end

            type passport = {country: String, expiration_date: Date, file_id: String}

            class Passport < Increase::Internal::Type::BaseModel
              attr_accessor country: String

              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              def initialize: (country: String, expiration_date: Date, file_id: String) -> void

              def to_hash: () -> {country: String, expiration_date: Date, file_id: String}
            end
          end
        end
      end

      type natural_person = {
        address: Increase::EntityCreateParams::NaturalPerson::Address,
        date_of_birth: Date,
        identification: Increase::EntityCreateParams::NaturalPerson::Identification,
        name: String,
        confirmed_no_us_tax_id: bool
      }

      class NaturalPerson < Increase::Internal::Type::BaseModel
        attr_accessor address: Increase::EntityCreateParams::NaturalPerson::Address

        attr_accessor date_of_birth: Date

        attr_accessor identification: Increase::EntityCreateParams::NaturalPerson::Identification

        attr_accessor name: String

        attr_reader confirmed_no_us_tax_id: bool?

        def confirmed_no_us_tax_id=: (bool) -> bool

        def initialize: (address: Increase::EntityCreateParams::NaturalPerson::Address, date_of_birth: Date, identification: Increase::EntityCreateParams::NaturalPerson::Identification, name: String, ?confirmed_no_us_tax_id: bool) -> void

        def to_hash: () -> {
          address: Increase::EntityCreateParams::NaturalPerson::Address,
          date_of_birth: Date,
          identification: Increase::EntityCreateParams::NaturalPerson::Identification,
          name: String,
          confirmed_no_us_tax_id: bool
        }

        type address = {city: String, line1: String, state: String, zip: String, line2: String}

        class Address < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize: (city: String, line1: String, state: String, zip: String, ?line2: String) -> void

          def to_hash: () -> {city: String, line1: String, state: String, zip: String, line2: String}
        end

        type identification = {
          method_: Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_,
          number: String,
          drivers_license: Increase::EntityCreateParams::NaturalPerson::Identification::DriversLicense,
          other: Increase::EntityCreateParams::NaturalPerson::Identification::Other,
          passport: Increase::EntityCreateParams::NaturalPerson::Identification::Passport
        }

        class Identification < Increase::Internal::Type::BaseModel
          attr_accessor method_: Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_

          attr_accessor number: String

          attr_reader drivers_license: Increase::EntityCreateParams::NaturalPerson::Identification::DriversLicense?

          def drivers_license=: (Increase::EntityCreateParams::NaturalPerson::Identification::DriversLicense) -> Increase::EntityCreateParams::NaturalPerson::Identification::DriversLicense

          attr_reader other: Increase::EntityCreateParams::NaturalPerson::Identification::Other?

          def other=: (Increase::EntityCreateParams::NaturalPerson::Identification::Other) -> Increase::EntityCreateParams::NaturalPerson::Identification::Other

          attr_reader passport: Increase::EntityCreateParams::NaturalPerson::Identification::Passport?

          def passport=: (Increase::EntityCreateParams::NaturalPerson::Identification::Passport) -> Increase::EntityCreateParams::NaturalPerson::Identification::Passport

          def initialize: (method_: Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_, number: String, ?drivers_license: Increase::EntityCreateParams::NaturalPerson::Identification::DriversLicense, ?other: Increase::EntityCreateParams::NaturalPerson::Identification::Other, ?passport: Increase::EntityCreateParams::NaturalPerson::Identification::Passport) -> void

          def to_hash: () -> {
            method_: Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_,
            number: String,
            drivers_license: Increase::EntityCreateParams::NaturalPerson::Identification::DriversLicense,
            other: Increase::EntityCreateParams::NaturalPerson::Identification::Other,
            passport: Increase::EntityCreateParams::NaturalPerson::Identification::Passport
          }

          type method_ = (:social_security_number | :individual_taxpayer_identification_number | :passport | :drivers_license | :other)

          module Method
            extend Increase::Internal::Type::Enum

            # A social security number.
            SOCIAL_SECURITY_NUMBER: :social_security_number

            # An individual taxpayer identification number (ITIN).
            INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

            # A passport number.
            PASSPORT: :passport

            # A driver's license number.
            DRIVERS_LICENSE: :drivers_license

            # Another identifying document.
            OTHER: :other

            def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_]
          end

          type drivers_license = {expiration_date: Date, file_id: String, state: String, back_file_id: String}

          class DriversLicense < Increase::Internal::Type::BaseModel
            attr_accessor expiration_date: Date

            attr_accessor file_id: String

            attr_accessor state: String

            attr_reader back_file_id: String?

            def back_file_id=: (String) -> String

            def initialize: (expiration_date: Date, file_id: String, state: String, ?back_file_id: String) -> void

            def to_hash: () -> {expiration_date: Date, file_id: String, state: String, back_file_id: String}
          end

          type other = {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}

          class Other < Increase::Internal::Type::BaseModel
            attr_accessor country: String

            attr_accessor description: String

            attr_accessor file_id: String

            attr_reader back_file_id: String?

            def back_file_id=: (String) -> String

            attr_reader expiration_date: Date?

            def expiration_date=: (Date) -> Date

            def initialize: (country: String, description: String, file_id: String, ?back_file_id: String, ?expiration_date: Date) -> void

            def to_hash: () -> {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}
          end

          type passport = {country: String, expiration_date: Date, file_id: String}

          class Passport < Increase::Internal::Type::BaseModel
            attr_accessor country: String

            attr_accessor expiration_date: Date

            attr_accessor file_id: String

            def initialize: (country: String, expiration_date: Date, file_id: String) -> void

            def to_hash: () -> {country: String, expiration_date: Date, file_id: String}
          end
        end
      end

      type supplemental_document = {file_id: String}

      class SupplementalDocument < Increase::Internal::Type::BaseModel
        attr_accessor file_id: String

        def initialize: (file_id: String) -> void

        def to_hash: () -> {file_id: String}
      end

      type third_party_verification = {reference: String, vendor: Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor}

      class ThirdPartyVerification < Increase::Internal::Type::BaseModel
        attr_accessor reference: String

        attr_accessor vendor: Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor

        def initialize: (reference: String, vendor: Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor) -> void

        def to_hash: () -> {reference: String, vendor: Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor}

        type vendor = (:alloy | :middesk | :oscilar)

        module Vendor
          extend Increase::Internal::Type::Enum

          # Alloy. See https://alloy.com for more information.
          ALLOY: :alloy

          # Middesk. See https://middesk.com for more information.
          MIDDESK: :middesk

          # Oscilar. See https://oscilar.com for more information.
          OSCILAR: :oscilar

          def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor]
        end
      end

      type trust = {
        address: Increase::EntityCreateParams::Trust::Address,
        category: Increase::Models::EntityCreateParams::Trust::category,
        name: String,
        trustees: ::Array[Increase::EntityCreateParams::Trust::Trustee],
        formation_document_file_id: String,
        formation_state: String,
        grantor: Increase::EntityCreateParams::Trust::Grantor,
        tax_identifier: String
      }

      class Trust < Increase::Internal::Type::BaseModel
        attr_accessor address: Increase::EntityCreateParams::Trust::Address

        attr_accessor category: Increase::Models::EntityCreateParams::Trust::category

        attr_accessor name: String

        attr_accessor trustees: ::Array[Increase::EntityCreateParams::Trust::Trustee]

        attr_reader formation_document_file_id: String?

        def formation_document_file_id=: (String) -> String

        attr_reader formation_state: String?

        def formation_state=: (String) -> String

        attr_reader grantor: Increase::EntityCreateParams::Trust::Grantor?

        def grantor=: (Increase::EntityCreateParams::Trust::Grantor) -> Increase::EntityCreateParams::Trust::Grantor

        attr_reader tax_identifier: String?

        def tax_identifier=: (String) -> String

        def initialize: (address: Increase::EntityCreateParams::Trust::Address, category: Increase::Models::EntityCreateParams::Trust::category, name: String, trustees: ::Array[Increase::EntityCreateParams::Trust::Trustee], ?formation_document_file_id: String, ?formation_state: String, ?grantor: Increase::EntityCreateParams::Trust::Grantor, ?tax_identifier: String) -> void

        def to_hash: () -> {
          address: Increase::EntityCreateParams::Trust::Address,
          category: Increase::Models::EntityCreateParams::Trust::category,
          name: String,
          trustees: ::Array[Increase::EntityCreateParams::Trust::Trustee],
          formation_document_file_id: String,
          formation_state: String,
          grantor: Increase::EntityCreateParams::Trust::Grantor,
          tax_identifier: String
        }

        type address = {city: String, line1: String, state: String, zip: String, line2: String}

        class Address < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize: (city: String, line1: String, state: String, zip: String, ?line2: String) -> void

          def to_hash: () -> {city: String, line1: String, state: String, zip: String, line2: String}
        end

        type category = (:revocable | :irrevocable)

        module Category
          extend Increase::Internal::Type::Enum

          # The trust is revocable by the grantor.
          REVOCABLE: :revocable

          # The trust cannot be revoked.
          IRREVOCABLE: :irrevocable

          def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Trust::category]
        end

        type trustee = {
          structure: Increase::Models::EntityCreateParams::Trust::Trustee::structure,
          individual: Increase::EntityCreateParams::Trust::Trustee::Individual
        }

        class Trustee < Increase::Internal::Type::BaseModel
          attr_accessor structure: Increase::Models::EntityCreateParams::Trust::Trustee::structure

          attr_reader individual: Increase::EntityCreateParams::Trust::Trustee::Individual?

          def individual=: (Increase::EntityCreateParams::Trust::Trustee::Individual) -> Increase::EntityCreateParams::Trust::Trustee::Individual

          def initialize: (structure: Increase::Models::EntityCreateParams::Trust::Trustee::structure, ?individual: Increase::EntityCreateParams::Trust::Trustee::Individual) -> void

          def to_hash: () -> {
            structure: Increase::Models::EntityCreateParams::Trust::Trustee::structure,
            individual: Increase::EntityCreateParams::Trust::Trustee::Individual
          }

          type structure = :individual

          module Structure
            extend Increase::Internal::Type::Enum

            # The trustee is an individual.
            INDIVIDUAL: :individual

            def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Trust::Trustee::structure]
          end

          type individual = {
            address: Increase::EntityCreateParams::Trust::Trustee::Individual::Address,
            date_of_birth: Date,
            identification: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification,
            name: String,
            confirmed_no_us_tax_id: bool
          }

          class Individual < Increase::Internal::Type::BaseModel
            attr_accessor address: Increase::EntityCreateParams::Trust::Trustee::Individual::Address

            attr_accessor date_of_birth: Date

            attr_accessor identification: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification

            attr_accessor name: String

            attr_reader confirmed_no_us_tax_id: bool?

            def confirmed_no_us_tax_id=: (bool) -> bool

            def initialize: (address: Increase::EntityCreateParams::Trust::Trustee::Individual::Address, date_of_birth: Date, identification: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification, name: String, ?confirmed_no_us_tax_id: bool) -> void

            def to_hash: () -> {
              address: Increase::EntityCreateParams::Trust::Trustee::Individual::Address,
              date_of_birth: Date,
              identification: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification,
              name: String,
              confirmed_no_us_tax_id: bool
            }

            type address = {city: String, line1: String, state: String, zip: String, line2: String}

            class Address < Increase::Internal::Type::BaseModel
              attr_accessor city: String

              attr_accessor line1: String

              attr_accessor state: String

              attr_accessor zip: String

              attr_reader line2: String?

              def line2=: (String) -> String

              def initialize: (city: String, line1: String, state: String, zip: String, ?line2: String) -> void

              def to_hash: () -> {city: String, line1: String, state: String, zip: String, line2: String}
            end

            type identification = {
              method_: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_,
              number: String,
              drivers_license: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense,
              other: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Other,
              passport: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport
            }

            class Identification < Increase::Internal::Type::BaseModel
              attr_accessor method_: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_

              attr_accessor number: String

              attr_reader drivers_license: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense?

              def drivers_license=: (Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense) -> Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense

              attr_reader other: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Other?

              def other=: (Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Other) -> Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Other

              attr_reader passport: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport?

              def passport=: (Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport) -> Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport

              def initialize: (method_: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_, number: String, ?drivers_license: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense, ?other: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Other, ?passport: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport) -> void

              def to_hash: () -> {
                method_: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_,
                number: String,
                drivers_license: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense,
                other: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Other,
                passport: Increase::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport
              }

              type method_ = (:social_security_number | :individual_taxpayer_identification_number | :passport | :drivers_license | :other)

              module Method
                extend Increase::Internal::Type::Enum

                # A social security number.
                SOCIAL_SECURITY_NUMBER: :social_security_number

                # An individual taxpayer identification number (ITIN).
                INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

                # A passport number.
                PASSPORT: :passport

                # A driver's license number.
                DRIVERS_LICENSE: :drivers_license

                # Another identifying document.
                OTHER: :other

                def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_]
              end

              type drivers_license = {expiration_date: Date, file_id: String, state: String, back_file_id: String}

              class DriversLicense < Increase::Internal::Type::BaseModel
                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                attr_accessor state: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                def initialize: (expiration_date: Date, file_id: String, state: String, ?back_file_id: String) -> void

                def to_hash: () -> {expiration_date: Date, file_id: String, state: String, back_file_id: String}
              end

              type other = {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}

              class Other < Increase::Internal::Type::BaseModel
                attr_accessor country: String

                attr_accessor description: String

                attr_accessor file_id: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                attr_reader expiration_date: Date?

                def expiration_date=: (Date) -> Date

                def initialize: (country: String, description: String, file_id: String, ?back_file_id: String, ?expiration_date: Date) -> void

                def to_hash: () -> {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}
              end

              type passport = {country: String, expiration_date: Date, file_id: String}

              class Passport < Increase::Internal::Type::BaseModel
                attr_accessor country: String

                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                def initialize: (country: String, expiration_date: Date, file_id: String) -> void

                def to_hash: () -> {country: String, expiration_date: Date, file_id: String}
              end
            end
          end
        end

        type grantor = {
          address: Increase::EntityCreateParams::Trust::Grantor::Address,
          date_of_birth: Date,
          identification: Increase::EntityCreateParams::Trust::Grantor::Identification,
          name: String,
          confirmed_no_us_tax_id: bool
        }

        class Grantor < Increase::Internal::Type::BaseModel
          attr_accessor address: Increase::EntityCreateParams::Trust::Grantor::Address

          attr_accessor date_of_birth: Date

          attr_accessor identification: Increase::EntityCreateParams::Trust::Grantor::Identification

          attr_accessor name: String

          attr_reader confirmed_no_us_tax_id: bool?

          def confirmed_no_us_tax_id=: (bool) -> bool

          def initialize: (address: Increase::EntityCreateParams::Trust::Grantor::Address, date_of_birth: Date, identification: Increase::EntityCreateParams::Trust::Grantor::Identification, name: String, ?confirmed_no_us_tax_id: bool) -> void

          def to_hash: () -> {
            address: Increase::EntityCreateParams::Trust::Grantor::Address,
            date_of_birth: Date,
            identification: Increase::EntityCreateParams::Trust::Grantor::Identification,
            name: String,
            confirmed_no_us_tax_id: bool
          }

          type address = {city: String, line1: String, state: String, zip: String, line2: String}

          class Address < Increase::Internal::Type::BaseModel
            attr_accessor city: String

            attr_accessor line1: String

            attr_accessor state: String

            attr_accessor zip: String

            attr_reader line2: String?

            def line2=: (String) -> String

            def initialize: (city: String, line1: String, state: String, zip: String, ?line2: String) -> void

            def to_hash: () -> {city: String, line1: String, state: String, zip: String, line2: String}
          end

          type identification = {
            method_: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_,
            number: String,
            drivers_license: Increase::EntityCreateParams::Trust::Grantor::Identification::DriversLicense,
            other: Increase::EntityCreateParams::Trust::Grantor::Identification::Other,
            passport: Increase::EntityCreateParams::Trust::Grantor::Identification::Passport
          }

          class Identification < Increase::Internal::Type::BaseModel
            attr_accessor method_: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_

            attr_accessor number: String

            attr_reader drivers_license: Increase::EntityCreateParams::Trust::Grantor::Identification::DriversLicense?

            def drivers_license=: (Increase::EntityCreateParams::Trust::Grantor::Identification::DriversLicense) -> Increase::EntityCreateParams::Trust::Grantor::Identification::DriversLicense

            attr_reader other: Increase::EntityCreateParams::Trust::Grantor::Identification::Other?

            def other=: (Increase::EntityCreateParams::Trust::Grantor::Identification::Other) -> Increase::EntityCreateParams::Trust::Grantor::Identification::Other

            attr_reader passport: Increase::EntityCreateParams::Trust::Grantor::Identification::Passport?

            def passport=: (Increase::EntityCreateParams::Trust::Grantor::Identification::Passport) -> Increase::EntityCreateParams::Trust::Grantor::Identification::Passport

            def initialize: (method_: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_, number: String, ?drivers_license: Increase::EntityCreateParams::Trust::Grantor::Identification::DriversLicense, ?other: Increase::EntityCreateParams::Trust::Grantor::Identification::Other, ?passport: Increase::EntityCreateParams::Trust::Grantor::Identification::Passport) -> void

            def to_hash: () -> {
              method_: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_,
              number: String,
              drivers_license: Increase::EntityCreateParams::Trust::Grantor::Identification::DriversLicense,
              other: Increase::EntityCreateParams::Trust::Grantor::Identification::Other,
              passport: Increase::EntityCreateParams::Trust::Grantor::Identification::Passport
            }

            type method_ = (:social_security_number | :individual_taxpayer_identification_number | :passport | :drivers_license | :other)

            module Method
              extend Increase::Internal::Type::Enum

              # A social security number.
              SOCIAL_SECURITY_NUMBER: :social_security_number

              # An individual taxpayer identification number (ITIN).
              INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

              # A passport number.
              PASSPORT: :passport

              # A driver's license number.
              DRIVERS_LICENSE: :drivers_license

              # Another identifying document.
              OTHER: :other

              def self?.values: () -> ::Array[Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_]
            end

            type drivers_license = {expiration_date: Date, file_id: String, state: String, back_file_id: String}

            class DriversLicense < Increase::Internal::Type::BaseModel
              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              attr_accessor state: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              def initialize: (expiration_date: Date, file_id: String, state: String, ?back_file_id: String) -> void

              def to_hash: () -> {expiration_date: Date, file_id: String, state: String, back_file_id: String}
            end

            type other = {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}

            class Other < Increase::Internal::Type::BaseModel
              attr_accessor country: String

              attr_accessor description: String

              attr_accessor file_id: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              attr_reader expiration_date: Date?

              def expiration_date=: (Date) -> Date

              def initialize: (country: String, description: String, file_id: String, ?back_file_id: String, ?expiration_date: Date) -> void

              def to_hash: () -> {country: String, description: String, file_id: String, back_file_id: String, expiration_date: Date}
            end

            type passport = {country: String, expiration_date: Date, file_id: String}

            class Passport < Increase::Internal::Type::BaseModel
              attr_accessor country: String

              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              def initialize: (country: String, expiration_date: Date, file_id: String) -> void

              def to_hash: () -> {country: String, expiration_date: Date, file_id: String}
            end
          end
        end
      end
    end
  end
end
