module Increase
  module Models
    type entity_create_params =
      {
        structure: Increase::Models::EntityCreateParams::structure,
        corporation: Increase::Models::EntityCreateParams::Corporation,
        description: String,
        government_authority: Increase::Models::EntityCreateParams::GovernmentAuthority,
        joint: Increase::Models::EntityCreateParams::Joint,
        natural_person: Increase::Models::EntityCreateParams::NaturalPerson,
        supplemental_documents: ::Array[Increase::Models::EntityCreateParams::SupplementalDocument],
        third_party_verification: Increase::Models::EntityCreateParams::ThirdPartyVerification,
        trust: Increase::Models::EntityCreateParams::Trust
      }
      & Increase::request_parameters

    class EntityCreateParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_accessor structure: Increase::Models::EntityCreateParams::structure

      attr_reader corporation: Increase::Models::EntityCreateParams::Corporation?

      def corporation=: (
        Increase::Models::EntityCreateParams::Corporation
      ) -> Increase::Models::EntityCreateParams::Corporation

      attr_reader description: String?

      def description=: (String) -> String

      attr_reader government_authority: Increase::Models::EntityCreateParams::GovernmentAuthority?

      def government_authority=: (
        Increase::Models::EntityCreateParams::GovernmentAuthority
      ) -> Increase::Models::EntityCreateParams::GovernmentAuthority

      attr_reader joint: Increase::Models::EntityCreateParams::Joint?

      def joint=: (
        Increase::Models::EntityCreateParams::Joint
      ) -> Increase::Models::EntityCreateParams::Joint

      attr_reader natural_person: Increase::Models::EntityCreateParams::NaturalPerson?

      def natural_person=: (
        Increase::Models::EntityCreateParams::NaturalPerson
      ) -> Increase::Models::EntityCreateParams::NaturalPerson

      attr_reader supplemental_documents: ::Array[Increase::Models::EntityCreateParams::SupplementalDocument]?

      def supplemental_documents=: (
        ::Array[Increase::Models::EntityCreateParams::SupplementalDocument]
      ) -> ::Array[Increase::Models::EntityCreateParams::SupplementalDocument]

      attr_reader third_party_verification: Increase::Models::EntityCreateParams::ThirdPartyVerification?

      def third_party_verification=: (
        Increase::Models::EntityCreateParams::ThirdPartyVerification
      ) -> Increase::Models::EntityCreateParams::ThirdPartyVerification

      attr_reader trust: Increase::Models::EntityCreateParams::Trust?

      def trust=: (
        Increase::Models::EntityCreateParams::Trust
      ) -> Increase::Models::EntityCreateParams::Trust

      def initialize:
        (
          structure: Increase::Models::EntityCreateParams::structure,
          ?corporation: Increase::Models::EntityCreateParams::Corporation,
          ?description: String,
          ?government_authority: Increase::Models::EntityCreateParams::GovernmentAuthority,
          ?joint: Increase::Models::EntityCreateParams::Joint,
          ?natural_person: Increase::Models::EntityCreateParams::NaturalPerson,
          ?supplemental_documents: ::Array[Increase::Models::EntityCreateParams::SupplementalDocument],
          ?third_party_verification: Increase::Models::EntityCreateParams::ThirdPartyVerification,
          ?trust: Increase::Models::EntityCreateParams::Trust,
          ?request_options: Increase::request_opts
        ) -> void
        | (
          ?Increase::Models::entity_create_params | Increase::BaseModel data
        ) -> void

      def to_hash: -> Increase::Models::entity_create_params

      type structure =
        :corporation | :natural_person | :joint | :trust | :government_authority

      class Structure < Increase::Enum
        # A corporation.
        CORPORATION: :corporation

        # An individual person.
        NATURAL_PERSON: :natural_person

        # Multiple individual people.
        JOINT: :joint

        # A trust.
        TRUST: :trust

        # A government authority.
        GOVERNMENT_AUTHORITY: :government_authority

        def self.values: -> ::Array[Increase::Models::EntityCreateParams::structure]
      end

      type corporation =
        {
          address: Increase::Models::EntityCreateParams::Corporation::Address,
          beneficial_owners: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner],
          name: String,
          tax_identifier: String,
          incorporation_state: String,
          industry_code: String,
          website: String
        }

      class Corporation < Increase::BaseModel
        attr_accessor address: Increase::Models::EntityCreateParams::Corporation::Address

        attr_accessor beneficial_owners: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner]

        attr_accessor name: String

        attr_accessor tax_identifier: String

        attr_reader incorporation_state: String?

        def incorporation_state=: (String) -> String

        attr_reader industry_code: String?

        def industry_code=: (String) -> String

        attr_reader website: String?

        def website=: (String) -> String

        def initialize:
          (
            address: Increase::Models::EntityCreateParams::Corporation::Address,
            beneficial_owners: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner],
            name: String,
            tax_identifier: String,
            ?incorporation_state: String,
            ?industry_code: String,
            ?website: String
          ) -> void
          | (
            ?Increase::Models::EntityCreateParams::corporation
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateParams::corporation

        type address =
          {
            city: String,
            :line1 => String,
            state: String,
            zip: String,
            :line2 => String
          }

        class Address < Increase::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize:
            (
              city: String,
              line1: String,
              state: String,
              zip: String,
              ?line2: String
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::Corporation::address
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::Corporation::address
        end

        type beneficial_owner =
          {
            individual: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual,
            prongs: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong],
            company_title: String
          }

        class BeneficialOwner < Increase::BaseModel
          attr_accessor individual: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual

          attr_accessor prongs: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong]

          attr_reader company_title: String?

          def company_title=: (String) -> String

          def initialize:
            (
              individual: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual,
              prongs: ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong],
              ?company_title: String
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::Corporation::beneficial_owner
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::Corporation::beneficial_owner

          type individual =
            {
              address: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Address,
              date_of_birth: Date,
              identification: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification,
              name: String,
              confirmed_no_us_tax_id: bool
            }

          class Individual < Increase::BaseModel
            attr_accessor address: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Address

            attr_accessor date_of_birth: Date

            attr_accessor identification: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification

            attr_accessor name: String

            attr_reader confirmed_no_us_tax_id: bool?

            def confirmed_no_us_tax_id=: (bool) -> bool

            def initialize:
              (
                address: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Address,
                date_of_birth: Date,
                identification: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification,
                name: String,
                ?confirmed_no_us_tax_id: bool
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::individual
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::individual

            type address =
              {
                city: String,
                :line1 => String,
                state: String,
                zip: String,
                :line2 => String
              }

            class Address < Increase::BaseModel
              attr_accessor city: String

              attr_accessor line1: String

              attr_accessor state: String

              attr_accessor zip: String

              attr_reader line2: String?

              def line2=: (String) -> String

              def initialize:
                (
                  city: String,
                  line1: String,
                  state: String,
                  zip: String,
                  ?line2: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::address
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::address
            end

            type identification =
              {
                method_: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_,
                number: String,
                drivers_license: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense,
                other: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other,
                passport: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport
              }

            class Identification < Increase::BaseModel
              attr_accessor method_: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_

              attr_accessor number: String

              attr_reader drivers_license: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense?

              def drivers_license=: (
                Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense
              ) -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense

              attr_reader other: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other?

              def other=: (
                Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other
              ) -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other

              attr_reader passport: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport?

              def passport=: (
                Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport
              ) -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport

              def initialize:
                (
                  method_: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_,
                  number: String,
                  ?drivers_license: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::DriversLicense,
                  ?other: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Other,
                  ?passport: Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::Passport
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::identification
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::identification

              type method_ =
                :social_security_number
                | :individual_taxpayer_identification_number
                | :passport
                | :drivers_license
                | :other

              class Method < Increase::Enum
                # A social security number.
                SOCIAL_SECURITY_NUMBER: :social_security_number

                # An individual taxpayer identification number (ITIN).
                INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

                # A passport number.
                PASSPORT: :passport

                # A driver's license number.
                DRIVERS_LICENSE: :drivers_license

                # Another identifying document.
                OTHER: :other

                def self.values: -> ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::method_]
              end

              type drivers_license =
                {
                  expiration_date: Date,
                  file_id: String,
                  state: String,
                  back_file_id: String
                }

              class DriversLicense < Increase::BaseModel
                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                attr_accessor state: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                def initialize:
                  (
                    expiration_date: Date,
                    file_id: String,
                    state: String,
                    ?back_file_id: String
                  ) -> void
                  | (
                    ?Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::drivers_license
                    | Increase::BaseModel data
                  ) -> void

                def to_hash: -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::drivers_license
              end

              type other =
                {
                  country: String,
                  description: String,
                  file_id: String,
                  back_file_id: String,
                  expiration_date: Date
                }

              class Other < Increase::BaseModel
                attr_accessor country: String

                attr_accessor description: String

                attr_accessor file_id: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                attr_reader expiration_date: Date?

                def expiration_date=: (Date) -> Date

                def initialize:
                  (
                    country: String,
                    description: String,
                    file_id: String,
                    ?back_file_id: String,
                    ?expiration_date: Date
                  ) -> void
                  | (
                    ?Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::other
                    | Increase::BaseModel data
                  ) -> void

                def to_hash: -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::other
              end

              type passport =
                { country: String, expiration_date: Date, file_id: String }

              class Passport < Increase::BaseModel
                attr_accessor country: String

                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                def initialize:
                  (
                    country: String,
                    expiration_date: Date,
                    file_id: String
                  ) -> void
                  | (
                    ?Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::passport
                    | Increase::BaseModel data
                  ) -> void

                def to_hash: -> Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::Individual::Identification::passport
              end
            end
          end

          type prong = :ownership | :control

          class Prong < Increase::Enum
            # A person with 25% or greater direct or indirect ownership of the entity.
            OWNERSHIP: :ownership

            # A person who manages, directs, or has significant control of the entity.
            CONTROL: :control

            def self.values: -> ::Array[Increase::Models::EntityCreateParams::Corporation::BeneficialOwner::prong]
          end
        end
      end

      type government_authority =
        {
          address: Increase::Models::EntityCreateParams::GovernmentAuthority::Address,
          authorized_persons: ::Array[Increase::Models::EntityCreateParams::GovernmentAuthority::AuthorizedPerson],
          category: Increase::Models::EntityCreateParams::GovernmentAuthority::category,
          name: String,
          tax_identifier: String,
          website: String
        }

      class GovernmentAuthority < Increase::BaseModel
        attr_accessor address: Increase::Models::EntityCreateParams::GovernmentAuthority::Address

        attr_accessor authorized_persons: ::Array[Increase::Models::EntityCreateParams::GovernmentAuthority::AuthorizedPerson]

        attr_accessor category: Increase::Models::EntityCreateParams::GovernmentAuthority::category

        attr_accessor name: String

        attr_accessor tax_identifier: String

        attr_reader website: String?

        def website=: (String) -> String

        def initialize:
          (
            address: Increase::Models::EntityCreateParams::GovernmentAuthority::Address,
            authorized_persons: ::Array[Increase::Models::EntityCreateParams::GovernmentAuthority::AuthorizedPerson],
            category: Increase::Models::EntityCreateParams::GovernmentAuthority::category,
            name: String,
            tax_identifier: String,
            ?website: String
          ) -> void
          | (
            ?Increase::Models::EntityCreateParams::government_authority
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateParams::government_authority

        type address =
          {
            city: String,
            :line1 => String,
            state: String,
            zip: String,
            :line2 => String
          }

        class Address < Increase::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize:
            (
              city: String,
              line1: String,
              state: String,
              zip: String,
              ?line2: String
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::GovernmentAuthority::address
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::GovernmentAuthority::address
        end

        type authorized_person = { name: String }

        class AuthorizedPerson < Increase::BaseModel
          attr_accessor name: String

          def initialize:
            (name: String) -> void
            | (
              ?Increase::Models::EntityCreateParams::GovernmentAuthority::authorized_person
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::GovernmentAuthority::authorized_person
        end

        type category = :municipality

        class Category < Increase::Enum
          # The Public Entity is a Municipality.
          MUNICIPALITY: :municipality

          def self.values: -> ::Array[Increase::Models::EntityCreateParams::GovernmentAuthority::category]
        end
      end

      type joint =
        {
          individuals: ::Array[Increase::Models::EntityCreateParams::Joint::Individual],
          name: String
        }

      class Joint < Increase::BaseModel
        attr_accessor individuals: ::Array[Increase::Models::EntityCreateParams::Joint::Individual]

        attr_reader name: String?

        def name=: (String) -> String

        def initialize:
          (
            individuals: ::Array[Increase::Models::EntityCreateParams::Joint::Individual],
            ?name: String
          ) -> void
          | (
            ?Increase::Models::EntityCreateParams::joint
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateParams::joint

        type individual =
          {
            address: Increase::Models::EntityCreateParams::Joint::Individual::Address,
            date_of_birth: Date,
            identification: Increase::Models::EntityCreateParams::Joint::Individual::Identification,
            name: String,
            confirmed_no_us_tax_id: bool
          }

        class Individual < Increase::BaseModel
          attr_accessor address: Increase::Models::EntityCreateParams::Joint::Individual::Address

          attr_accessor date_of_birth: Date

          attr_accessor identification: Increase::Models::EntityCreateParams::Joint::Individual::Identification

          attr_accessor name: String

          attr_reader confirmed_no_us_tax_id: bool?

          def confirmed_no_us_tax_id=: (bool) -> bool

          def initialize:
            (
              address: Increase::Models::EntityCreateParams::Joint::Individual::Address,
              date_of_birth: Date,
              identification: Increase::Models::EntityCreateParams::Joint::Individual::Identification,
              name: String,
              ?confirmed_no_us_tax_id: bool
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::Joint::individual
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::Joint::individual

          type address =
            {
              city: String,
              :line1 => String,
              state: String,
              zip: String,
              :line2 => String
            }

          class Address < Increase::BaseModel
            attr_accessor city: String

            attr_accessor line1: String

            attr_accessor state: String

            attr_accessor zip: String

            attr_reader line2: String?

            def line2=: (String) -> String

            def initialize:
              (
                city: String,
                line1: String,
                state: String,
                zip: String,
                ?line2: String
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::Joint::Individual::address
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::Joint::Individual::address
          end

          type identification =
            {
              method_: Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_,
              number: String,
              drivers_license: Increase::Models::EntityCreateParams::Joint::Individual::Identification::DriversLicense,
              other: Increase::Models::EntityCreateParams::Joint::Individual::Identification::Other,
              passport: Increase::Models::EntityCreateParams::Joint::Individual::Identification::Passport
            }

          class Identification < Increase::BaseModel
            attr_accessor method_: Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_

            attr_accessor number: String

            attr_reader drivers_license: Increase::Models::EntityCreateParams::Joint::Individual::Identification::DriversLicense?

            def drivers_license=: (
              Increase::Models::EntityCreateParams::Joint::Individual::Identification::DriversLicense
            ) -> Increase::Models::EntityCreateParams::Joint::Individual::Identification::DriversLicense

            attr_reader other: Increase::Models::EntityCreateParams::Joint::Individual::Identification::Other?

            def other=: (
              Increase::Models::EntityCreateParams::Joint::Individual::Identification::Other
            ) -> Increase::Models::EntityCreateParams::Joint::Individual::Identification::Other

            attr_reader passport: Increase::Models::EntityCreateParams::Joint::Individual::Identification::Passport?

            def passport=: (
              Increase::Models::EntityCreateParams::Joint::Individual::Identification::Passport
            ) -> Increase::Models::EntityCreateParams::Joint::Individual::Identification::Passport

            def initialize:
              (
                method_: Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_,
                number: String,
                ?drivers_license: Increase::Models::EntityCreateParams::Joint::Individual::Identification::DriversLicense,
                ?other: Increase::Models::EntityCreateParams::Joint::Individual::Identification::Other,
                ?passport: Increase::Models::EntityCreateParams::Joint::Individual::Identification::Passport
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::Joint::Individual::identification
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::Joint::Individual::identification

            type method_ =
              :social_security_number
              | :individual_taxpayer_identification_number
              | :passport
              | :drivers_license
              | :other

            class Method < Increase::Enum
              # A social security number.
              SOCIAL_SECURITY_NUMBER: :social_security_number

              # An individual taxpayer identification number (ITIN).
              INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

              # A passport number.
              PASSPORT: :passport

              # A driver's license number.
              DRIVERS_LICENSE: :drivers_license

              # Another identifying document.
              OTHER: :other

              def self.values: -> ::Array[Increase::Models::EntityCreateParams::Joint::Individual::Identification::method_]
            end

            type drivers_license =
              {
                expiration_date: Date,
                file_id: String,
                state: String,
                back_file_id: String
              }

            class DriversLicense < Increase::BaseModel
              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              attr_accessor state: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              def initialize:
                (
                  expiration_date: Date,
                  file_id: String,
                  state: String,
                  ?back_file_id: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Joint::Individual::Identification::drivers_license
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Joint::Individual::Identification::drivers_license
            end

            type other =
              {
                country: String,
                description: String,
                file_id: String,
                back_file_id: String,
                expiration_date: Date
              }

            class Other < Increase::BaseModel
              attr_accessor country: String

              attr_accessor description: String

              attr_accessor file_id: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              attr_reader expiration_date: Date?

              def expiration_date=: (Date) -> Date

              def initialize:
                (
                  country: String,
                  description: String,
                  file_id: String,
                  ?back_file_id: String,
                  ?expiration_date: Date
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Joint::Individual::Identification::other
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Joint::Individual::Identification::other
            end

            type passport =
              { country: String, expiration_date: Date, file_id: String }

            class Passport < Increase::BaseModel
              attr_accessor country: String

              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              def initialize:
                (
                  country: String,
                  expiration_date: Date,
                  file_id: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Joint::Individual::Identification::passport
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Joint::Individual::Identification::passport
            end
          end
        end
      end

      type natural_person =
        {
          address: Increase::Models::EntityCreateParams::NaturalPerson::Address,
          date_of_birth: Date,
          identification: Increase::Models::EntityCreateParams::NaturalPerson::Identification,
          name: String,
          confirmed_no_us_tax_id: bool
        }

      class NaturalPerson < Increase::BaseModel
        attr_accessor address: Increase::Models::EntityCreateParams::NaturalPerson::Address

        attr_accessor date_of_birth: Date

        attr_accessor identification: Increase::Models::EntityCreateParams::NaturalPerson::Identification

        attr_accessor name: String

        attr_reader confirmed_no_us_tax_id: bool?

        def confirmed_no_us_tax_id=: (bool) -> bool

        def initialize:
          (
            address: Increase::Models::EntityCreateParams::NaturalPerson::Address,
            date_of_birth: Date,
            identification: Increase::Models::EntityCreateParams::NaturalPerson::Identification,
            name: String,
            ?confirmed_no_us_tax_id: bool
          ) -> void
          | (
            ?Increase::Models::EntityCreateParams::natural_person
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateParams::natural_person

        type address =
          {
            city: String,
            :line1 => String,
            state: String,
            zip: String,
            :line2 => String
          }

        class Address < Increase::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize:
            (
              city: String,
              line1: String,
              state: String,
              zip: String,
              ?line2: String
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::NaturalPerson::address
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::NaturalPerson::address
        end

        type identification =
          {
            method_: Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_,
            number: String,
            drivers_license: Increase::Models::EntityCreateParams::NaturalPerson::Identification::DriversLicense,
            other: Increase::Models::EntityCreateParams::NaturalPerson::Identification::Other,
            passport: Increase::Models::EntityCreateParams::NaturalPerson::Identification::Passport
          }

        class Identification < Increase::BaseModel
          attr_accessor method_: Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_

          attr_accessor number: String

          attr_reader drivers_license: Increase::Models::EntityCreateParams::NaturalPerson::Identification::DriversLicense?

          def drivers_license=: (
            Increase::Models::EntityCreateParams::NaturalPerson::Identification::DriversLicense
          ) -> Increase::Models::EntityCreateParams::NaturalPerson::Identification::DriversLicense

          attr_reader other: Increase::Models::EntityCreateParams::NaturalPerson::Identification::Other?

          def other=: (
            Increase::Models::EntityCreateParams::NaturalPerson::Identification::Other
          ) -> Increase::Models::EntityCreateParams::NaturalPerson::Identification::Other

          attr_reader passport: Increase::Models::EntityCreateParams::NaturalPerson::Identification::Passport?

          def passport=: (
            Increase::Models::EntityCreateParams::NaturalPerson::Identification::Passport
          ) -> Increase::Models::EntityCreateParams::NaturalPerson::Identification::Passport

          def initialize:
            (
              method_: Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_,
              number: String,
              ?drivers_license: Increase::Models::EntityCreateParams::NaturalPerson::Identification::DriversLicense,
              ?other: Increase::Models::EntityCreateParams::NaturalPerson::Identification::Other,
              ?passport: Increase::Models::EntityCreateParams::NaturalPerson::Identification::Passport
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::NaturalPerson::identification
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::NaturalPerson::identification

          type method_ =
            :social_security_number
            | :individual_taxpayer_identification_number
            | :passport
            | :drivers_license
            | :other

          class Method < Increase::Enum
            # A social security number.
            SOCIAL_SECURITY_NUMBER: :social_security_number

            # An individual taxpayer identification number (ITIN).
            INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

            # A passport number.
            PASSPORT: :passport

            # A driver's license number.
            DRIVERS_LICENSE: :drivers_license

            # Another identifying document.
            OTHER: :other

            def self.values: -> ::Array[Increase::Models::EntityCreateParams::NaturalPerson::Identification::method_]
          end

          type drivers_license =
            {
              expiration_date: Date,
              file_id: String,
              state: String,
              back_file_id: String
            }

          class DriversLicense < Increase::BaseModel
            attr_accessor expiration_date: Date

            attr_accessor file_id: String

            attr_accessor state: String

            attr_reader back_file_id: String?

            def back_file_id=: (String) -> String

            def initialize:
              (
                expiration_date: Date,
                file_id: String,
                state: String,
                ?back_file_id: String
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::NaturalPerson::Identification::drivers_license
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::NaturalPerson::Identification::drivers_license
          end

          type other =
            {
              country: String,
              description: String,
              file_id: String,
              back_file_id: String,
              expiration_date: Date
            }

          class Other < Increase::BaseModel
            attr_accessor country: String

            attr_accessor description: String

            attr_accessor file_id: String

            attr_reader back_file_id: String?

            def back_file_id=: (String) -> String

            attr_reader expiration_date: Date?

            def expiration_date=: (Date) -> Date

            def initialize:
              (
                country: String,
                description: String,
                file_id: String,
                ?back_file_id: String,
                ?expiration_date: Date
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::NaturalPerson::Identification::other
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::NaturalPerson::Identification::other
          end

          type passport =
            { country: String, expiration_date: Date, file_id: String }

          class Passport < Increase::BaseModel
            attr_accessor country: String

            attr_accessor expiration_date: Date

            attr_accessor file_id: String

            def initialize:
              (country: String, expiration_date: Date, file_id: String) -> void
              | (
                ?Increase::Models::EntityCreateParams::NaturalPerson::Identification::passport
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::NaturalPerson::Identification::passport
          end
        end
      end

      type supplemental_document = { file_id: String }

      class SupplementalDocument < Increase::BaseModel
        attr_accessor file_id: String

        def initialize:
          (file_id: String) -> void
          | (
            ?Increase::Models::EntityCreateParams::supplemental_document
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateParams::supplemental_document
      end

      type third_party_verification =
        {
          reference: String,
          vendor: Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor
        }

      class ThirdPartyVerification < Increase::BaseModel
        attr_accessor reference: String

        attr_accessor vendor: Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor

        def initialize:
          (
            reference: String,
            vendor: Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor
          ) -> void
          | (
            ?Increase::Models::EntityCreateParams::third_party_verification
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateParams::third_party_verification

        type vendor = :alloy | :middesk

        class Vendor < Increase::Enum
          # Alloy. See https://alloy.com for more information.
          ALLOY: :alloy

          # Middesk. See https://middesk.com for more information.
          MIDDESK: :middesk

          def self.values: -> ::Array[Increase::Models::EntityCreateParams::ThirdPartyVerification::vendor]
        end
      end

      type trust =
        {
          address: Increase::Models::EntityCreateParams::Trust::Address,
          category: Increase::Models::EntityCreateParams::Trust::category,
          name: String,
          trustees: ::Array[Increase::Models::EntityCreateParams::Trust::Trustee],
          formation_document_file_id: String,
          formation_state: String,
          grantor: Increase::Models::EntityCreateParams::Trust::Grantor,
          tax_identifier: String
        }

      class Trust < Increase::BaseModel
        attr_accessor address: Increase::Models::EntityCreateParams::Trust::Address

        attr_accessor category: Increase::Models::EntityCreateParams::Trust::category

        attr_accessor name: String

        attr_accessor trustees: ::Array[Increase::Models::EntityCreateParams::Trust::Trustee]

        attr_reader formation_document_file_id: String?

        def formation_document_file_id=: (String) -> String

        attr_reader formation_state: String?

        def formation_state=: (String) -> String

        attr_reader grantor: Increase::Models::EntityCreateParams::Trust::Grantor?

        def grantor=: (
          Increase::Models::EntityCreateParams::Trust::Grantor
        ) -> Increase::Models::EntityCreateParams::Trust::Grantor

        attr_reader tax_identifier: String?

        def tax_identifier=: (String) -> String

        def initialize:
          (
            address: Increase::Models::EntityCreateParams::Trust::Address,
            category: Increase::Models::EntityCreateParams::Trust::category,
            name: String,
            trustees: ::Array[Increase::Models::EntityCreateParams::Trust::Trustee],
            ?formation_document_file_id: String,
            ?formation_state: String,
            ?grantor: Increase::Models::EntityCreateParams::Trust::Grantor,
            ?tax_identifier: String
          ) -> void
          | (
            ?Increase::Models::EntityCreateParams::trust
            | Increase::BaseModel data
          ) -> void

        def to_hash: -> Increase::Models::EntityCreateParams::trust

        type address =
          {
            city: String,
            :line1 => String,
            state: String,
            zip: String,
            :line2 => String
          }

        class Address < Increase::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor state: String

          attr_accessor zip: String

          attr_reader line2: String?

          def line2=: (String) -> String

          def initialize:
            (
              city: String,
              line1: String,
              state: String,
              zip: String,
              ?line2: String
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::Trust::address
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::Trust::address
        end

        type category = :revocable | :irrevocable

        class Category < Increase::Enum
          # The trust is revocable by the grantor.
          REVOCABLE: :revocable

          # The trust cannot be revoked.
          IRREVOCABLE: :irrevocable

          def self.values: -> ::Array[Increase::Models::EntityCreateParams::Trust::category]
        end

        type trustee =
          {
            structure: Increase::Models::EntityCreateParams::Trust::Trustee::structure,
            individual: Increase::Models::EntityCreateParams::Trust::Trustee::Individual
          }

        class Trustee < Increase::BaseModel
          attr_accessor structure: Increase::Models::EntityCreateParams::Trust::Trustee::structure

          attr_reader individual: Increase::Models::EntityCreateParams::Trust::Trustee::Individual?

          def individual=: (
            Increase::Models::EntityCreateParams::Trust::Trustee::Individual
          ) -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual

          def initialize:
            (
              structure: Increase::Models::EntityCreateParams::Trust::Trustee::structure,
              ?individual: Increase::Models::EntityCreateParams::Trust::Trustee::Individual
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::Trust::trustee
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::Trust::trustee

          type structure = :individual

          class Structure < Increase::Enum
            # The trustee is an individual.
            INDIVIDUAL: :individual

            def self.values: -> ::Array[Increase::Models::EntityCreateParams::Trust::Trustee::structure]
          end

          type individual =
            {
              address: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Address,
              date_of_birth: Date,
              identification: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification,
              name: String,
              confirmed_no_us_tax_id: bool
            }

          class Individual < Increase::BaseModel
            attr_accessor address: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Address

            attr_accessor date_of_birth: Date

            attr_accessor identification: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification

            attr_accessor name: String

            attr_reader confirmed_no_us_tax_id: bool?

            def confirmed_no_us_tax_id=: (bool) -> bool

            def initialize:
              (
                address: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Address,
                date_of_birth: Date,
                identification: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification,
                name: String,
                ?confirmed_no_us_tax_id: bool
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::Trust::Trustee::individual
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::Trust::Trustee::individual

            type address =
              {
                city: String,
                :line1 => String,
                state: String,
                zip: String,
                :line2 => String
              }

            class Address < Increase::BaseModel
              attr_accessor city: String

              attr_accessor line1: String

              attr_accessor state: String

              attr_accessor zip: String

              attr_reader line2: String?

              def line2=: (String) -> String

              def initialize:
                (
                  city: String,
                  line1: String,
                  state: String,
                  zip: String,
                  ?line2: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Trust::Trustee::Individual::address
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::address
            end

            type identification =
              {
                method_: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_,
                number: String,
                drivers_license: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense,
                other: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Other,
                passport: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport
              }

            class Identification < Increase::BaseModel
              attr_accessor method_: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_

              attr_accessor number: String

              attr_reader drivers_license: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense?

              def drivers_license=: (
                Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense
              ) -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense

              attr_reader other: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Other?

              def other=: (
                Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Other
              ) -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Other

              attr_reader passport: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport?

              def passport=: (
                Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport
              ) -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport

              def initialize:
                (
                  method_: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_,
                  number: String,
                  ?drivers_license: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::DriversLicense,
                  ?other: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Other,
                  ?passport: Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::Passport
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Trust::Trustee::Individual::identification
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::identification

              type method_ =
                :social_security_number
                | :individual_taxpayer_identification_number
                | :passport
                | :drivers_license
                | :other

              class Method < Increase::Enum
                # A social security number.
                SOCIAL_SECURITY_NUMBER: :social_security_number

                # An individual taxpayer identification number (ITIN).
                INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

                # A passport number.
                PASSPORT: :passport

                # A driver's license number.
                DRIVERS_LICENSE: :drivers_license

                # Another identifying document.
                OTHER: :other

                def self.values: -> ::Array[Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::method_]
              end

              type drivers_license =
                {
                  expiration_date: Date,
                  file_id: String,
                  state: String,
                  back_file_id: String
                }

              class DriversLicense < Increase::BaseModel
                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                attr_accessor state: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                def initialize:
                  (
                    expiration_date: Date,
                    file_id: String,
                    state: String,
                    ?back_file_id: String
                  ) -> void
                  | (
                    ?Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::drivers_license
                    | Increase::BaseModel data
                  ) -> void

                def to_hash: -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::drivers_license
              end

              type other =
                {
                  country: String,
                  description: String,
                  file_id: String,
                  back_file_id: String,
                  expiration_date: Date
                }

              class Other < Increase::BaseModel
                attr_accessor country: String

                attr_accessor description: String

                attr_accessor file_id: String

                attr_reader back_file_id: String?

                def back_file_id=: (String) -> String

                attr_reader expiration_date: Date?

                def expiration_date=: (Date) -> Date

                def initialize:
                  (
                    country: String,
                    description: String,
                    file_id: String,
                    ?back_file_id: String,
                    ?expiration_date: Date
                  ) -> void
                  | (
                    ?Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::other
                    | Increase::BaseModel data
                  ) -> void

                def to_hash: -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::other
              end

              type passport =
                { country: String, expiration_date: Date, file_id: String }

              class Passport < Increase::BaseModel
                attr_accessor country: String

                attr_accessor expiration_date: Date

                attr_accessor file_id: String

                def initialize:
                  (
                    country: String,
                    expiration_date: Date,
                    file_id: String
                  ) -> void
                  | (
                    ?Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::passport
                    | Increase::BaseModel data
                  ) -> void

                def to_hash: -> Increase::Models::EntityCreateParams::Trust::Trustee::Individual::Identification::passport
              end
            end
          end
        end

        type grantor =
          {
            address: Increase::Models::EntityCreateParams::Trust::Grantor::Address,
            date_of_birth: Date,
            identification: Increase::Models::EntityCreateParams::Trust::Grantor::Identification,
            name: String,
            confirmed_no_us_tax_id: bool
          }

        class Grantor < Increase::BaseModel
          attr_accessor address: Increase::Models::EntityCreateParams::Trust::Grantor::Address

          attr_accessor date_of_birth: Date

          attr_accessor identification: Increase::Models::EntityCreateParams::Trust::Grantor::Identification

          attr_accessor name: String

          attr_reader confirmed_no_us_tax_id: bool?

          def confirmed_no_us_tax_id=: (bool) -> bool

          def initialize:
            (
              address: Increase::Models::EntityCreateParams::Trust::Grantor::Address,
              date_of_birth: Date,
              identification: Increase::Models::EntityCreateParams::Trust::Grantor::Identification,
              name: String,
              ?confirmed_no_us_tax_id: bool
            ) -> void
            | (
              ?Increase::Models::EntityCreateParams::Trust::grantor
              | Increase::BaseModel data
            ) -> void

          def to_hash: -> Increase::Models::EntityCreateParams::Trust::grantor

          type address =
            {
              city: String,
              :line1 => String,
              state: String,
              zip: String,
              :line2 => String
            }

          class Address < Increase::BaseModel
            attr_accessor city: String

            attr_accessor line1: String

            attr_accessor state: String

            attr_accessor zip: String

            attr_reader line2: String?

            def line2=: (String) -> String

            def initialize:
              (
                city: String,
                line1: String,
                state: String,
                zip: String,
                ?line2: String
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::Trust::Grantor::address
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::Trust::Grantor::address
          end

          type identification =
            {
              method_: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_,
              number: String,
              drivers_license: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::DriversLicense,
              other: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Other,
              passport: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Passport
            }

          class Identification < Increase::BaseModel
            attr_accessor method_: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_

            attr_accessor number: String

            attr_reader drivers_license: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::DriversLicense?

            def drivers_license=: (
              Increase::Models::EntityCreateParams::Trust::Grantor::Identification::DriversLicense
            ) -> Increase::Models::EntityCreateParams::Trust::Grantor::Identification::DriversLicense

            attr_reader other: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Other?

            def other=: (
              Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Other
            ) -> Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Other

            attr_reader passport: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Passport?

            def passport=: (
              Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Passport
            ) -> Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Passport

            def initialize:
              (
                method_: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_,
                number: String,
                ?drivers_license: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::DriversLicense,
                ?other: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Other,
                ?passport: Increase::Models::EntityCreateParams::Trust::Grantor::Identification::Passport
              ) -> void
              | (
                ?Increase::Models::EntityCreateParams::Trust::Grantor::identification
                | Increase::BaseModel data
              ) -> void

            def to_hash: -> Increase::Models::EntityCreateParams::Trust::Grantor::identification

            type method_ =
              :social_security_number
              | :individual_taxpayer_identification_number
              | :passport
              | :drivers_license
              | :other

            class Method < Increase::Enum
              # A social security number.
              SOCIAL_SECURITY_NUMBER: :social_security_number

              # An individual taxpayer identification number (ITIN).
              INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER: :individual_taxpayer_identification_number

              # A passport number.
              PASSPORT: :passport

              # A driver's license number.
              DRIVERS_LICENSE: :drivers_license

              # Another identifying document.
              OTHER: :other

              def self.values: -> ::Array[Increase::Models::EntityCreateParams::Trust::Grantor::Identification::method_]
            end

            type drivers_license =
              {
                expiration_date: Date,
                file_id: String,
                state: String,
                back_file_id: String
              }

            class DriversLicense < Increase::BaseModel
              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              attr_accessor state: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              def initialize:
                (
                  expiration_date: Date,
                  file_id: String,
                  state: String,
                  ?back_file_id: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Trust::Grantor::Identification::drivers_license
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Trust::Grantor::Identification::drivers_license
            end

            type other =
              {
                country: String,
                description: String,
                file_id: String,
                back_file_id: String,
                expiration_date: Date
              }

            class Other < Increase::BaseModel
              attr_accessor country: String

              attr_accessor description: String

              attr_accessor file_id: String

              attr_reader back_file_id: String?

              def back_file_id=: (String) -> String

              attr_reader expiration_date: Date?

              def expiration_date=: (Date) -> Date

              def initialize:
                (
                  country: String,
                  description: String,
                  file_id: String,
                  ?back_file_id: String,
                  ?expiration_date: Date
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Trust::Grantor::Identification::other
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Trust::Grantor::Identification::other
            end

            type passport =
              { country: String, expiration_date: Date, file_id: String }

            class Passport < Increase::BaseModel
              attr_accessor country: String

              attr_accessor expiration_date: Date

              attr_accessor file_id: String

              def initialize:
                (
                  country: String,
                  expiration_date: Date,
                  file_id: String
                ) -> void
                | (
                  ?Increase::Models::EntityCreateParams::Trust::Grantor::Identification::passport
                  | Increase::BaseModel data
                ) -> void

              def to_hash: -> Increase::Models::EntityCreateParams::Trust::Grantor::Identification::passport
            end
          end
        end
      end
    end
  end
end
