module Increase
  module Models
    type bookkeeping_account = {
      id: String,
      account_id: String?,
      compliance_category: Increase::Models::BookkeepingAccount::compliance_category?,
      entity_id: String?,
      idempotency_key: String?,
      name: String,
      type: Increase::Models::BookkeepingAccount::type_
    }

    class BookkeepingAccount < Increase::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String?

      attr_accessor compliance_category: Increase::Models::BookkeepingAccount::compliance_category?

      attr_accessor entity_id: String?

      attr_accessor idempotency_key: String?

      attr_accessor name: String

      attr_accessor type: Increase::Models::BookkeepingAccount::type_

      def initialize: (id: String, account_id: String?, compliance_category: Increase::Models::BookkeepingAccount::compliance_category?, entity_id: String?, idempotency_key: String?, name: String, type: Increase::Models::BookkeepingAccount::type_) -> void
                    | (?(Increase::Models::bookkeeping_account | Increase::BaseModel) data) -> void

      def to_hash: () -> Increase::Models::bookkeeping_account

      type compliance_category = (:commingled_cash | :customer_balance)

      class ComplianceCategory < Increase::Enum
        # A cash in an commingled Increase Account.
        COMMINGLED_CASH: :commingled_cash

        # A customer balance.
        CUSTOMER_BALANCE: :customer_balance

        def self.values: () -> ::Array[Increase::Models::BookkeepingAccount::compliance_category]
      end

      type type_ = :bookkeeping_account

      class Type < Increase::Enum
        BOOKKEEPING_ACCOUNT: :bookkeeping_account

        def self.values: () -> ::Array[Increase::Models::BookkeepingAccount::type_]
      end
    end
  end
end
