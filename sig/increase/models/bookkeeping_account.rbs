module Increase
  module Models
    type bookkeeping_account =
      {
        id: String,
        account_id: String?,
        compliance_category: Increase::BookkeepingAccount::compliance_category?,
        entity_id: String?,
        idempotency_key: String?,
        name: String,
        type: Increase::BookkeepingAccount::type_
      }

    class BookkeepingAccount < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String?

      attr_accessor compliance_category: Increase::BookkeepingAccount::compliance_category?

      attr_accessor entity_id: String?

      attr_accessor idempotency_key: String?

      attr_accessor name: String

      attr_accessor type: Increase::BookkeepingAccount::type_

      def initialize: (
        id: String,
        account_id: String?,
        compliance_category: Increase::BookkeepingAccount::compliance_category?,
        entity_id: String?,
        idempotency_key: String?,
        name: String,
        type: Increase::BookkeepingAccount::type_
      ) -> void

      type compliance_category = :commingled_cash | :customer_balance

      module ComplianceCategory
        extend Increase::Internal::Type::Enum

        # A cash in an commingled Increase Account.
        COMMINGLED_CASH: :commingled_cash

        # A customer balance.
        CUSTOMER_BALANCE: :customer_balance

        def self?.values: -> ::Array[Increase::BookkeepingAccount::compliance_category]
      end

      type type_ = :bookkeeping_account

      module Type
        extend Increase::Internal::Type::Enum

        BOOKKEEPING_ACCOUNT: :bookkeeping_account

        def self?.values: -> ::Array[Increase::BookkeepingAccount::type_]
      end
    end
  end
end
