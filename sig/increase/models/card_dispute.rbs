module Increase
  module Models
    type card_dispute = {
      id: String,
      acceptance: Increase::Models::CardDispute::Acceptance?,
      amount: Integer?,
      created_at: Time,
      disputed_transaction_id: String,
      explanation: String,
      idempotency_key: String?,
      loss: Increase::Models::CardDispute::Loss?,
      rejection: Increase::Models::CardDispute::Rejection?,
      status: Increase::Models::CardDispute::status,
      type: Increase::Models::CardDispute::type_,
      win: Increase::Models::CardDispute::Win?
    }

    class CardDispute < Increase::BaseModel
      attr_accessor id: String

      attr_accessor acceptance: Increase::Models::CardDispute::Acceptance?

      attr_accessor amount: Integer?

      attr_accessor created_at: Time

      attr_accessor disputed_transaction_id: String

      attr_accessor explanation: String

      attr_accessor idempotency_key: String?

      attr_accessor loss: Increase::Models::CardDispute::Loss?

      attr_accessor rejection: Increase::Models::CardDispute::Rejection?

      attr_accessor status: Increase::Models::CardDispute::status

      attr_accessor type: Increase::Models::CardDispute::type_

      attr_accessor win: Increase::Models::CardDispute::Win?

      def initialize: (id: String, acceptance: Increase::Models::CardDispute::Acceptance?, amount: Integer?, created_at: Time, disputed_transaction_id: String, explanation: String, idempotency_key: String?, loss: Increase::Models::CardDispute::Loss?, rejection: Increase::Models::CardDispute::Rejection?, status: Increase::Models::CardDispute::status, type: Increase::Models::CardDispute::type_, win: Increase::Models::CardDispute::Win?) -> void
                    | (?(Increase::Models::card_dispute | Increase::BaseModel) data) -> void

      def to_hash: () -> Increase::Models::card_dispute

      type acceptance = {accepted_at: Time, card_dispute_id: String, transaction_id: String}

      class Acceptance < Increase::BaseModel
        attr_accessor accepted_at: Time

        attr_accessor card_dispute_id: String

        attr_accessor transaction_id: String

        def initialize: (accepted_at: Time, card_dispute_id: String, transaction_id: String) -> void
                      | (?(Increase::Models::CardDispute::acceptance | Increase::BaseModel) data) -> void

        def to_hash: () -> Increase::Models::CardDispute::acceptance
      end

      type loss = {card_dispute_id: String, explanation: String, lost_at: Time, transaction_id: String}

      class Loss < Increase::BaseModel
        attr_accessor card_dispute_id: String

        attr_accessor explanation: String

        attr_accessor lost_at: Time

        attr_accessor transaction_id: String

        def initialize: (card_dispute_id: String, explanation: String, lost_at: Time, transaction_id: String) -> void
                      | (?(Increase::Models::CardDispute::loss | Increase::BaseModel) data) -> void

        def to_hash: () -> Increase::Models::CardDispute::loss
      end

      type rejection = {card_dispute_id: String, explanation: String, rejected_at: Time}

      class Rejection < Increase::BaseModel
        attr_accessor card_dispute_id: String

        attr_accessor explanation: String

        attr_accessor rejected_at: Time

        def initialize: (card_dispute_id: String, explanation: String, rejected_at: Time) -> void
                      | (?(Increase::Models::CardDispute::rejection | Increase::BaseModel) data) -> void

        def to_hash: () -> Increase::Models::CardDispute::rejection
      end

      type status = (:pending_reviewing | :pending_user_information | :accepted | :rejected | :lost | :won)

      class Status < Increase::Enum
        # The Card Dispute is pending review.
        PENDING_REVIEWING: :pending_reviewing

        # Increase has requested more information related to the Card Dispute from you.
        PENDING_USER_INFORMATION: :pending_user_information

        # The Card Dispute has been accepted and your funds have been returned. The card dispute will eventually transition into `won` or `lost` depending on the outcome.
        ACCEPTED: :accepted

        # The Card Dispute has been rejected.
        REJECTED: :rejected

        # The Card Dispute has been lost and funds previously credited from the acceptance have been debited.
        LOST: :lost

        # The Card Dispute has been won and no further action can be taken.
        WON: :won

        def self.values: () -> ::Array[Increase::Models::CardDispute::status]
      end

      type type_ = :card_dispute

      class Type < Increase::Enum
        CARD_DISPUTE: :card_dispute

        def self.values: () -> ::Array[Increase::Models::CardDispute::type_]
      end

      type win = {card_dispute_id: String, won_at: Time}

      class Win < Increase::BaseModel
        attr_accessor card_dispute_id: String

        attr_accessor won_at: Time

        def initialize: (card_dispute_id: String, won_at: Time) -> void
                      | (?(Increase::Models::CardDispute::win | Increase::BaseModel) data) -> void

        def to_hash: () -> Increase::Models::CardDispute::win
      end
    end
  end
end
