module Increase
  module Models
    type check_transfer = {
      id: String,
      account_id: String,
      account_number: String,
      amount: Integer,
      approval: Increase::CheckTransfer::Approval?,
      approved_inbound_check_deposit_id: String?,
      cancellation: Increase::CheckTransfer::Cancellation?,
      check_number: String,
      created_at: Time,
      created_by: Increase::CheckTransfer::CreatedBy?,
      currency: Increase::Models::CheckTransfer::currency,
      fulfillment_method: Increase::Models::CheckTransfer::fulfillment_method,
      idempotency_key: String?,
      mailing: Increase::CheckTransfer::Mailing?,
      pending_transaction_id: String?,
      physical_check: Increase::CheckTransfer::PhysicalCheck?,
      routing_number: String,
      source_account_number_id: String?,
      status: Increase::Models::CheckTransfer::status,
      stop_payment_request: Increase::CheckTransfer::StopPaymentRequest?,
      submission: Increase::CheckTransfer::Submission?,
      third_party: Increase::CheckTransfer::ThirdParty?,
      type: Increase::Models::CheckTransfer::type_
    }

    class CheckTransfer < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor account_number: String

      attr_accessor amount: Integer

      attr_accessor approval: Increase::CheckTransfer::Approval?

      attr_accessor approved_inbound_check_deposit_id: String?

      attr_accessor cancellation: Increase::CheckTransfer::Cancellation?

      attr_accessor check_number: String

      attr_accessor created_at: Time

      attr_accessor created_by: Increase::CheckTransfer::CreatedBy?

      attr_accessor currency: Increase::Models::CheckTransfer::currency

      attr_accessor fulfillment_method: Increase::Models::CheckTransfer::fulfillment_method

      attr_accessor idempotency_key: String?

      attr_accessor mailing: Increase::CheckTransfer::Mailing?

      attr_accessor pending_transaction_id: String?

      attr_accessor physical_check: Increase::CheckTransfer::PhysicalCheck?

      attr_accessor routing_number: String

      attr_accessor source_account_number_id: String?

      attr_accessor status: Increase::Models::CheckTransfer::status

      attr_accessor stop_payment_request: Increase::CheckTransfer::StopPaymentRequest?

      attr_accessor submission: Increase::CheckTransfer::Submission?

      attr_accessor third_party: Increase::CheckTransfer::ThirdParty?

      attr_accessor type: Increase::Models::CheckTransfer::type_

      def initialize: (id: String, account_id: String, account_number: String, amount: Integer, approval: Increase::CheckTransfer::Approval?, approved_inbound_check_deposit_id: String?, cancellation: Increase::CheckTransfer::Cancellation?, check_number: String, created_at: Time, created_by: Increase::CheckTransfer::CreatedBy?, currency: Increase::Models::CheckTransfer::currency, fulfillment_method: Increase::Models::CheckTransfer::fulfillment_method, idempotency_key: String?, mailing: Increase::CheckTransfer::Mailing?, pending_transaction_id: String?, physical_check: Increase::CheckTransfer::PhysicalCheck?, routing_number: String, source_account_number_id: String?, status: Increase::Models::CheckTransfer::status, stop_payment_request: Increase::CheckTransfer::StopPaymentRequest?, submission: Increase::CheckTransfer::Submission?, third_party: Increase::CheckTransfer::ThirdParty?, type: Increase::Models::CheckTransfer::type_) -> void

      def to_hash: () -> {
        id: String,
        account_id: String,
        account_number: String,
        amount: Integer,
        approval: Increase::CheckTransfer::Approval?,
        approved_inbound_check_deposit_id: String?,
        cancellation: Increase::CheckTransfer::Cancellation?,
        check_number: String,
        created_at: Time,
        created_by: Increase::CheckTransfer::CreatedBy?,
        currency: Increase::Models::CheckTransfer::currency,
        fulfillment_method: Increase::Models::CheckTransfer::fulfillment_method,
        idempotency_key: String?,
        mailing: Increase::CheckTransfer::Mailing?,
        pending_transaction_id: String?,
        physical_check: Increase::CheckTransfer::PhysicalCheck?,
        routing_number: String,
        source_account_number_id: String?,
        status: Increase::Models::CheckTransfer::status,
        stop_payment_request: Increase::CheckTransfer::StopPaymentRequest?,
        submission: Increase::CheckTransfer::Submission?,
        third_party: Increase::CheckTransfer::ThirdParty?,
        type: Increase::Models::CheckTransfer::type_
      }

      type approval = {approved_at: Time, approved_by: String?}

      class Approval < Increase::Internal::Type::BaseModel
        attr_accessor approved_at: Time

        attr_accessor approved_by: String?

        def initialize: (approved_at: Time, approved_by: String?) -> void

        def to_hash: () -> {approved_at: Time, approved_by: String?}
      end

      type cancellation = {canceled_at: Time, canceled_by: String?}

      class Cancellation < Increase::Internal::Type::BaseModel
        attr_accessor canceled_at: Time

        attr_accessor canceled_by: String?

        def initialize: (canceled_at: Time, canceled_by: String?) -> void

        def to_hash: () -> {canceled_at: Time, canceled_by: String?}
      end

      type created_by = {
        api_key: Increase::CheckTransfer::CreatedBy::APIKey?,
        category: Increase::Models::CheckTransfer::CreatedBy::category,
        oauth_application: Increase::CheckTransfer::CreatedBy::OAuthApplication?,
        user: Increase::CheckTransfer::CreatedBy::User?
      }

      class CreatedBy < Increase::Internal::Type::BaseModel
        attr_accessor api_key: Increase::CheckTransfer::CreatedBy::APIKey?

        attr_accessor category: Increase::Models::CheckTransfer::CreatedBy::category

        attr_accessor oauth_application: Increase::CheckTransfer::CreatedBy::OAuthApplication?

        attr_accessor user: Increase::CheckTransfer::CreatedBy::User?

        def initialize: (api_key: Increase::CheckTransfer::CreatedBy::APIKey?, category: Increase::Models::CheckTransfer::CreatedBy::category, oauth_application: Increase::CheckTransfer::CreatedBy::OAuthApplication?, user: Increase::CheckTransfer::CreatedBy::User?) -> void

        def to_hash: () -> {
          api_key: Increase::CheckTransfer::CreatedBy::APIKey?,
          category: Increase::Models::CheckTransfer::CreatedBy::category,
          oauth_application: Increase::CheckTransfer::CreatedBy::OAuthApplication?,
          user: Increase::CheckTransfer::CreatedBy::User?
        }

        type api_key = {description: String?}

        class APIKey < Increase::Internal::Type::BaseModel
          attr_accessor description: String?

          def initialize: (description: String?) -> void

          def to_hash: () -> {description: String?}
        end

        type category = (:api_key | :oauth_application | :user)

        module Category
          extend Increase::Internal::Type::Enum

          # An API key. Details will be under the `api_key` object.
          API_KEY: :api_key

          # An OAuth application you connected to Increase. Details will be under the `oauth_application` object.
          OAUTH_APPLICATION: :oauth_application

          # A User in the Increase dashboard. Details will be under the `user` object.
          USER: :user

          def self?.values: () -> ::Array[Increase::Models::CheckTransfer::CreatedBy::category]
        end

        type oauth_application = {name: String}

        class OAuthApplication < Increase::Internal::Type::BaseModel
          attr_accessor name: String

          def initialize: (name: String) -> void

          def to_hash: () -> {name: String}
        end

        type user = {email: String}

        class User < Increase::Internal::Type::BaseModel
          attr_accessor email: String

          def initialize: (email: String) -> void

          def to_hash: () -> {email: String}
        end
      end

      type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: () -> ::Array[Increase::Models::CheckTransfer::currency]
      end

      type fulfillment_method = (:physical_check | :third_party)

      module FulfillmentMethod
        extend Increase::Internal::Type::Enum

        # Increase will print and mail a physical check.
        PHYSICAL_CHECK: :physical_check

        # Increase will not print a check; you are responsible for printing and mailing a check with the provided account number, routing number, check number, and amount.
        THIRD_PARTY: :third_party

        def self?.values: () -> ::Array[Increase::Models::CheckTransfer::fulfillment_method]
      end

      type mailing = {image_id: String?, mailed_at: Time, tracking_number: String?}

      class Mailing < Increase::Internal::Type::BaseModel
        attr_accessor image_id: String?

        attr_accessor mailed_at: Time

        attr_accessor tracking_number: String?

        def initialize: (image_id: String?, mailed_at: Time, tracking_number: String?) -> void

        def to_hash: () -> {image_id: String?, mailed_at: Time, tracking_number: String?}
      end

      type physical_check = {
        attachment_file_id: String?,
        mailing_address: Increase::CheckTransfer::PhysicalCheck::MailingAddress,
        memo: String?,
        note: String?,
        recipient_name: String,
        return_address: Increase::CheckTransfer::PhysicalCheck::ReturnAddress?,
        shipping_method: Increase::Models::CheckTransfer::PhysicalCheck::shipping_method?,
        signature_text: String?,
        tracking_updates: ::Array[Increase::CheckTransfer::PhysicalCheck::TrackingUpdate]
      }

      class PhysicalCheck < Increase::Internal::Type::BaseModel
        attr_accessor attachment_file_id: String?

        attr_accessor mailing_address: Increase::CheckTransfer::PhysicalCheck::MailingAddress

        attr_accessor memo: String?

        attr_accessor note: String?

        attr_accessor recipient_name: String

        attr_accessor return_address: Increase::CheckTransfer::PhysicalCheck::ReturnAddress?

        attr_accessor shipping_method: Increase::Models::CheckTransfer::PhysicalCheck::shipping_method?

        attr_accessor signature_text: String?

        attr_accessor tracking_updates: ::Array[Increase::CheckTransfer::PhysicalCheck::TrackingUpdate]

        def initialize: (attachment_file_id: String?, mailing_address: Increase::CheckTransfer::PhysicalCheck::MailingAddress, memo: String?, note: String?, recipient_name: String, return_address: Increase::CheckTransfer::PhysicalCheck::ReturnAddress?, shipping_method: Increase::Models::CheckTransfer::PhysicalCheck::shipping_method?, signature_text: String?, tracking_updates: ::Array[Increase::CheckTransfer::PhysicalCheck::TrackingUpdate]) -> void

        def to_hash: () -> {
          attachment_file_id: String?,
          mailing_address: Increase::CheckTransfer::PhysicalCheck::MailingAddress,
          memo: String?,
          note: String?,
          recipient_name: String,
          return_address: Increase::CheckTransfer::PhysicalCheck::ReturnAddress?,
          shipping_method: Increase::Models::CheckTransfer::PhysicalCheck::shipping_method?,
          signature_text: String?,
          tracking_updates: ::Array[Increase::CheckTransfer::PhysicalCheck::TrackingUpdate]
        }

        type mailing_address = {city: String?, line1: String?, line2: String?, name: String?, postal_code: String?, state: String?}

        class MailingAddress < Increase::Internal::Type::BaseModel
          attr_accessor city: String?

          attr_accessor line1: String?

          attr_accessor line2: String?

          attr_accessor name: String?

          attr_accessor postal_code: String?

          attr_accessor state: String?

          def initialize: (city: String?, line1: String?, line2: String?, name: String?, postal_code: String?, state: String?) -> void

          def to_hash: () -> {city: String?, line1: String?, line2: String?, name: String?, postal_code: String?, state: String?}
        end

        type return_address = {city: String?, line1: String?, line2: String?, name: String?, postal_code: String?, state: String?}

        class ReturnAddress < Increase::Internal::Type::BaseModel
          attr_accessor city: String?

          attr_accessor line1: String?

          attr_accessor line2: String?

          attr_accessor name: String?

          attr_accessor postal_code: String?

          attr_accessor state: String?

          def initialize: (city: String?, line1: String?, line2: String?, name: String?, postal_code: String?, state: String?) -> void

          def to_hash: () -> {city: String?, line1: String?, line2: String?, name: String?, postal_code: String?, state: String?}
        end

        type shipping_method = (:usps_first_class | :fedex_overnight)

        module ShippingMethod
          extend Increase::Internal::Type::Enum

          # USPS First Class
          USPS_FIRST_CLASS: :usps_first_class

          # FedEx Overnight
          FEDEX_OVERNIGHT: :fedex_overnight

          def self?.values: () -> ::Array[Increase::Models::CheckTransfer::PhysicalCheck::shipping_method]
        end

        type tracking_update = {
          category: Increase::Models::CheckTransfer::PhysicalCheck::TrackingUpdate::category,
          created_at: Time,
          postal_code: String
        }

        class TrackingUpdate < Increase::Internal::Type::BaseModel
          attr_accessor category: Increase::Models::CheckTransfer::PhysicalCheck::TrackingUpdate::category

          attr_accessor created_at: Time

          attr_accessor postal_code: String

          def initialize: (category: Increase::Models::CheckTransfer::PhysicalCheck::TrackingUpdate::category, created_at: Time, postal_code: String) -> void

          def to_hash: () -> {
            category: Increase::Models::CheckTransfer::PhysicalCheck::TrackingUpdate::category,
            created_at: Time,
            postal_code: String
          }

          type category = (:in_transit | :processed_for_delivery | :delivered | :returned_to_sender)

          module Category
            extend Increase::Internal::Type::Enum

            # The check is in transit.
            IN_TRANSIT: :in_transit

            # The check has been processed for delivery.
            PROCESSED_FOR_DELIVERY: :processed_for_delivery

            # The check has been delivered.
            DELIVERED: :delivered

            # Delivery failed and the check was returned to sender.
            RETURNED_TO_SENDER: :returned_to_sender

            def self?.values: () -> ::Array[Increase::Models::CheckTransfer::PhysicalCheck::TrackingUpdate::category]
          end
        end
      end

      type status = (:pending_approval | :canceled | :pending_submission | :requires_attention | :rejected | :pending_mailing | :mailed | :deposited | :stopped | :returned)

      module Status
        extend Increase::Internal::Type::Enum

        # The transfer is awaiting approval.
        PENDING_APPROVAL: :pending_approval

        # The transfer has been canceled.
        CANCELED: :canceled

        # The transfer is pending submission.
        PENDING_SUBMISSION: :pending_submission

        # The transfer requires attention from an Increase operator.
        REQUIRES_ATTENTION: :requires_attention

        # The transfer has been rejected.
        REJECTED: :rejected

        # The check is queued for mailing.
        PENDING_MAILING: :pending_mailing

        # The check has been mailed.
        MAILED: :mailed

        # The check has been deposited.
        DEPOSITED: :deposited

        # A stop-payment was requested for this check.
        STOPPED: :stopped

        # The transfer has been returned.
        RETURNED: :returned

        def self?.values: () -> ::Array[Increase::Models::CheckTransfer::status]
      end

      type stop_payment_request = {
        reason: Increase::Models::CheckTransfer::StopPaymentRequest::reason,
        requested_at: Time,
        transfer_id: String,
        type: Increase::Models::CheckTransfer::StopPaymentRequest::type_
      }

      class StopPaymentRequest < Increase::Internal::Type::BaseModel
        attr_accessor reason: Increase::Models::CheckTransfer::StopPaymentRequest::reason

        attr_accessor requested_at: Time

        attr_accessor transfer_id: String

        attr_accessor type: Increase::Models::CheckTransfer::StopPaymentRequest::type_

        def initialize: (reason: Increase::Models::CheckTransfer::StopPaymentRequest::reason, requested_at: Time, transfer_id: String, type: Increase::Models::CheckTransfer::StopPaymentRequest::type_) -> void

        def to_hash: () -> {
          reason: Increase::Models::CheckTransfer::StopPaymentRequest::reason,
          requested_at: Time,
          transfer_id: String,
          type: Increase::Models::CheckTransfer::StopPaymentRequest::type_
        }

        type reason = (:mail_delivery_failed | :rejected_by_increase | :not_authorized | :unknown)

        module Reason
          extend Increase::Internal::Type::Enum

          # The check could not be delivered.
          MAIL_DELIVERY_FAILED: :mail_delivery_failed

          # The check was canceled by an Increase operator who will provide details out-of-band.
          REJECTED_BY_INCREASE: :rejected_by_increase

          # The check was not authorized.
          NOT_AUTHORIZED: :not_authorized

          # The check was stopped for another reason.
          UNKNOWN: :unknown

          def self?.values: () -> ::Array[Increase::Models::CheckTransfer::StopPaymentRequest::reason]
        end

        type type_ = :check_transfer_stop_payment_request

        module Type
          extend Increase::Internal::Type::Enum

          CHECK_TRANSFER_STOP_PAYMENT_REQUEST: :check_transfer_stop_payment_request

          def self?.values: () -> ::Array[Increase::Models::CheckTransfer::StopPaymentRequest::type_]
        end
      end

      type submission = {
        address_correction_action: Increase::Models::CheckTransfer::Submission::address_correction_action,
        submitted_address: Increase::CheckTransfer::Submission::SubmittedAddress,
        submitted_at: Time
      }

      class Submission < Increase::Internal::Type::BaseModel
        attr_accessor address_correction_action: Increase::Models::CheckTransfer::Submission::address_correction_action

        attr_accessor submitted_address: Increase::CheckTransfer::Submission::SubmittedAddress

        attr_accessor submitted_at: Time

        def initialize: (address_correction_action: Increase::Models::CheckTransfer::Submission::address_correction_action, submitted_address: Increase::CheckTransfer::Submission::SubmittedAddress, submitted_at: Time) -> void

        def to_hash: () -> {
          address_correction_action: Increase::Models::CheckTransfer::Submission::address_correction_action,
          submitted_address: Increase::CheckTransfer::Submission::SubmittedAddress,
          submitted_at: Time
        }

        type address_correction_action = (:none | :standardization | :standardization_with_address_change | :error)

        module AddressCorrectionAction
          extend Increase::Internal::Type::Enum

          # No address correction took place.
          NONE: :none

          # The address was standardized.
          STANDARDIZATION: :standardization

          # The address was first standardized and then changed because the recipient moved.
          STANDARDIZATION_WITH_ADDRESS_CHANGE: :standardization_with_address_change

          # An error occurred while correcting the address. This typically means the USPS could not find that address. The address was not changed.
          ERROR: :error

          def self?.values: () -> ::Array[Increase::Models::CheckTransfer::Submission::address_correction_action]
        end

        type submitted_address = {city: String, line1: String, line2: String?, recipient_name: String, state: String, zip: String}

        class SubmittedAddress < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor line1: String

          attr_accessor line2: String?

          attr_accessor recipient_name: String

          attr_accessor state: String

          attr_accessor zip: String

          def initialize: (city: String, line1: String, line2: String?, recipient_name: String, state: String, zip: String) -> void

          def to_hash: () -> {city: String, line1: String, line2: String?, recipient_name: String, state: String, zip: String}
        end
      end

      type third_party = {recipient_name: String?}

      class ThirdParty < Increase::Internal::Type::BaseModel
        attr_accessor recipient_name: String?

        def initialize: (recipient_name: String?) -> void

        def to_hash: () -> {recipient_name: String?}
      end

      type type_ = :check_transfer

      module Type
        extend Increase::Internal::Type::Enum

        CHECK_TRANSFER: :check_transfer

        def self?.values: () -> ::Array[Increase::Models::CheckTransfer::type_]
      end
    end
  end
end
