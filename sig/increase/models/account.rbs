module Increase
  module Models
    type account =
      {
        id: String,
        bank: Increase::Models::Account::bank,
        closed_at: Time?,
        created_at: Time,
        currency: Increase::Models::Account::currency,
        entity_id: String?,
        idempotency_key: String?,
        informational_entity_id: String?,
        interest_accrued: String,
        interest_accrued_at: Date?,
        interest_rate: String,
        name: String,
        program_id: String,
        status: Increase::Models::Account::status,
        type: Increase::Models::Account::type_
      }

    class Account < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor bank: Increase::Models::Account::bank

      attr_accessor closed_at: Time?

      attr_accessor created_at: Time

      attr_accessor currency: Increase::Models::Account::currency

      attr_accessor entity_id: String?

      attr_accessor idempotency_key: String?

      attr_accessor informational_entity_id: String?

      attr_accessor interest_accrued: String

      attr_accessor interest_accrued_at: Date?

      attr_accessor interest_rate: String

      attr_accessor name: String

      attr_accessor program_id: String

      attr_accessor status: Increase::Models::Account::status

      attr_accessor type: Increase::Models::Account::type_

      def initialize: (
        id: String,
        bank: Increase::Models::Account::bank,
        closed_at: Time?,
        created_at: Time,
        currency: Increase::Models::Account::currency,
        entity_id: String?,
        idempotency_key: String?,
        informational_entity_id: String?,
        interest_accrued: String,
        interest_accrued_at: Date?,
        interest_rate: String,
        name: String,
        program_id: String,
        status: Increase::Models::Account::status,
        type: Increase::Models::Account::type_
      ) -> void

      def to_hash: -> {
        id: String,
        bank: Increase::Models::Account::bank,
        closed_at: Time?,
        created_at: Time,
        currency: Increase::Models::Account::currency,
        entity_id: String?,
        idempotency_key: String?,
        informational_entity_id: String?,
        interest_accrued: String,
        interest_accrued_at: Date?,
        interest_rate: String,
        name: String,
        program_id: String,
        status: Increase::Models::Account::status,
        type: Increase::Models::Account::type_
      }

      type bank = :core_bank | :first_internet_bank | :grasshopper_bank

      module Bank
        extend Increase::Internal::Type::Enum

        # Core Bank
        CORE_BANK: :core_bank

        # First Internet Bank of Indiana
        FIRST_INTERNET_BANK: :first_internet_bank

        # Grasshopper Bank
        GRASSHOPPER_BANK: :grasshopper_bank

        def self?.values: -> ::Array[Increase::Models::Account::bank]
      end

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: -> ::Array[Increase::Models::Account::currency]
      end

      type status = :closed | :open

      module Status
        extend Increase::Internal::Type::Enum

        # Closed Accounts on which no new activity can occur.
        CLOSED: :closed

        # Open Accounts that are ready to use.
        OPEN: :open

        def self?.values: -> ::Array[Increase::Models::Account::status]
      end

      type type_ = :account

      module Type
        extend Increase::Internal::Type::Enum

        ACCOUNT: :account

        def self?.values: -> ::Array[Increase::Models::Account::type_]
      end
    end
  end
end
