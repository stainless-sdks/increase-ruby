module Increase
  module Models
    type export_create_params =
      {
        category: Increase::Models::ExportCreateParams::category,
        account_statement_ofx: Increase::Models::ExportCreateParams::AccountStatementOfx,
        balance_csv: Increase::Models::ExportCreateParams::BalanceCsv,
        bookkeeping_account_balance_csv: Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv,
        entity_csv: Increase::Models::ExportCreateParams::EntityCsv,
        transaction_csv: Increase::Models::ExportCreateParams::TransactionCsv,
        vendor_csv: top
      }
      & Increase::request_parameters

    class ExportCreateParams < Increase::BaseModel
      extend Increase::Type::RequestParameters::Converter
      include Increase::RequestParameters

      attr_accessor category: Increase::Models::ExportCreateParams::category

      attr_reader account_statement_ofx: Increase::Models::ExportCreateParams::AccountStatementOfx?

      def account_statement_ofx=: (
        Increase::Models::ExportCreateParams::AccountStatementOfx
      ) -> Increase::Models::ExportCreateParams::AccountStatementOfx

      attr_reader balance_csv: Increase::Models::ExportCreateParams::BalanceCsv?

      def balance_csv=: (
        Increase::Models::ExportCreateParams::BalanceCsv
      ) -> Increase::Models::ExportCreateParams::BalanceCsv

      attr_reader bookkeeping_account_balance_csv: Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv?

      def bookkeeping_account_balance_csv=: (
        Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv
      ) -> Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv

      attr_reader entity_csv: Increase::Models::ExportCreateParams::EntityCsv?

      def entity_csv=: (
        Increase::Models::ExportCreateParams::EntityCsv
      ) -> Increase::Models::ExportCreateParams::EntityCsv

      attr_reader transaction_csv: Increase::Models::ExportCreateParams::TransactionCsv?

      def transaction_csv=: (
        Increase::Models::ExportCreateParams::TransactionCsv
      ) -> Increase::Models::ExportCreateParams::TransactionCsv

      attr_reader vendor_csv: top?

      def vendor_csv=: (top) -> top

      def initialize: (
        category: Increase::Models::ExportCreateParams::category,
        ?account_statement_ofx: Increase::Models::ExportCreateParams::AccountStatementOfx,
        ?balance_csv: Increase::Models::ExportCreateParams::BalanceCsv,
        ?bookkeeping_account_balance_csv: Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv,
        ?entity_csv: Increase::Models::ExportCreateParams::EntityCsv,
        ?transaction_csv: Increase::Models::ExportCreateParams::TransactionCsv,
        ?vendor_csv: top,
        ?request_options: Increase::request_opts
      ) -> void

      def to_hash: -> Increase::Models::export_create_params

      type category =
        :account_statement_ofx
        | :transaction_csv
        | :balance_csv
        | :bookkeeping_account_balance_csv
        | :entity_csv
        | :vendor_csv

      module Category
        extend Increase::Enum

        # Export an Open Financial Exchange (OFX) file of transactions and balances for a given time range and Account.
        ACCOUNT_STATEMENT_OFX: :account_statement_ofx

        # Export a CSV of all transactions for a given time range.
        TRANSACTION_CSV: :transaction_csv

        # Export a CSV of account balances for the dates in a given range.
        BALANCE_CSV: :balance_csv

        # Export a CSV of bookkeeping account balances for the dates in a given range.
        BOOKKEEPING_ACCOUNT_BALANCE_CSV: :bookkeeping_account_balance_csv

        # Export a CSV of entities with a given status.
        ENTITY_CSV: :entity_csv

        # Export a CSV of vendors added to the third-party risk management dashboard.
        VENDOR_CSV: :vendor_csv

        def self?.values: -> ::Array[Increase::Models::ExportCreateParams::category]
      end

      type account_statement_ofx =
        {
          account_id: String,
          created_at: Increase::Models::ExportCreateParams::AccountStatementOfx::CreatedAt
        }

      class AccountStatementOfx < Increase::BaseModel
        attr_accessor account_id: String

        attr_reader created_at: Increase::Models::ExportCreateParams::AccountStatementOfx::CreatedAt?

        def created_at=: (
          Increase::Models::ExportCreateParams::AccountStatementOfx::CreatedAt
        ) -> Increase::Models::ExportCreateParams::AccountStatementOfx::CreatedAt

        def initialize: (
          account_id: String,
          ?created_at: Increase::Models::ExportCreateParams::AccountStatementOfx::CreatedAt
        ) -> void

        def to_hash: -> Increase::Models::ExportCreateParams::account_statement_ofx

        type created_at =
          { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

        class CreatedAt < Increase::BaseModel
          attr_reader after: Time?

          def after=: (Time) -> Time

          attr_reader before: Time?

          def before=: (Time) -> Time

          attr_reader on_or_after: Time?

          def on_or_after=: (Time) -> Time

          attr_reader on_or_before: Time?

          def on_or_before=: (Time) -> Time

          def initialize: (
            ?after: Time,
            ?before: Time,
            ?on_or_after: Time,
            ?on_or_before: Time
          ) -> void

          def to_hash: -> Increase::Models::ExportCreateParams::AccountStatementOfx::created_at
        end
      end

      type balance_csv =
        {
          account_id: String,
          created_at: Increase::Models::ExportCreateParams::BalanceCsv::CreatedAt,
          program_id: String
        }

      class BalanceCsv < Increase::BaseModel
        attr_reader account_id: String?

        def account_id=: (String) -> String

        attr_reader created_at: Increase::Models::ExportCreateParams::BalanceCsv::CreatedAt?

        def created_at=: (
          Increase::Models::ExportCreateParams::BalanceCsv::CreatedAt
        ) -> Increase::Models::ExportCreateParams::BalanceCsv::CreatedAt

        attr_reader program_id: String?

        def program_id=: (String) -> String

        def initialize: (
          ?account_id: String,
          ?created_at: Increase::Models::ExportCreateParams::BalanceCsv::CreatedAt,
          ?program_id: String
        ) -> void

        def to_hash: -> Increase::Models::ExportCreateParams::balance_csv

        type created_at =
          { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

        class CreatedAt < Increase::BaseModel
          attr_reader after: Time?

          def after=: (Time) -> Time

          attr_reader before: Time?

          def before=: (Time) -> Time

          attr_reader on_or_after: Time?

          def on_or_after=: (Time) -> Time

          attr_reader on_or_before: Time?

          def on_or_before=: (Time) -> Time

          def initialize: (
            ?after: Time,
            ?before: Time,
            ?on_or_after: Time,
            ?on_or_before: Time
          ) -> void

          def to_hash: -> Increase::Models::ExportCreateParams::BalanceCsv::created_at
        end
      end

      type bookkeeping_account_balance_csv =
        {
          bookkeeping_account_id: String,
          created_at: Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv::CreatedAt
        }

      class BookkeepingAccountBalanceCsv < Increase::BaseModel
        attr_reader bookkeeping_account_id: String?

        def bookkeeping_account_id=: (String) -> String

        attr_reader created_at: Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv::CreatedAt?

        def created_at=: (
          Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv::CreatedAt
        ) -> Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv::CreatedAt

        def initialize: (
          ?bookkeeping_account_id: String,
          ?created_at: Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv::CreatedAt
        ) -> void

        def to_hash: -> Increase::Models::ExportCreateParams::bookkeeping_account_balance_csv

        type created_at =
          { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

        class CreatedAt < Increase::BaseModel
          attr_reader after: Time?

          def after=: (Time) -> Time

          attr_reader before: Time?

          def before=: (Time) -> Time

          attr_reader on_or_after: Time?

          def on_or_after=: (Time) -> Time

          attr_reader on_or_before: Time?

          def on_or_before=: (Time) -> Time

          def initialize: (
            ?after: Time,
            ?before: Time,
            ?on_or_after: Time,
            ?on_or_before: Time
          ) -> void

          def to_hash: -> Increase::Models::ExportCreateParams::BookkeepingAccountBalanceCsv::created_at
        end
      end

      type entity_csv =
        { status: Increase::Models::ExportCreateParams::EntityCsv::Status }

      class EntityCsv < Increase::BaseModel
        attr_reader status: Increase::Models::ExportCreateParams::EntityCsv::Status?

        def status=: (
          Increase::Models::ExportCreateParams::EntityCsv::Status
        ) -> Increase::Models::ExportCreateParams::EntityCsv::Status

        def initialize: (
          ?status: Increase::Models::ExportCreateParams::EntityCsv::Status
        ) -> void

        def to_hash: -> Increase::Models::ExportCreateParams::entity_csv

        type status =
          {
            in_: ::Array[Increase::Models::ExportCreateParams::EntityCsv::Status::in_]
          }

        class Status < Increase::BaseModel
          attr_accessor in_: ::Array[Increase::Models::ExportCreateParams::EntityCsv::Status::in_]

          def initialize: (
            in_: ::Array[Increase::Models::ExportCreateParams::EntityCsv::Status::in_]
          ) -> void

          def to_hash: -> Increase::Models::ExportCreateParams::EntityCsv::status

          type in_ = :active | :archived | :disabled

          module In
            extend Increase::Enum

            # The entity is active.
            ACTIVE: :active

            # The entity is archived, and can no longer be used to create accounts.
            ARCHIVED: :archived

            # The entity is temporarily disabled and cannot be used for financial activity.
            DISABLED: :disabled

            def self?.values: -> ::Array[Increase::Models::ExportCreateParams::EntityCsv::Status::in_]
          end
        end
      end

      type transaction_csv =
        {
          account_id: String,
          created_at: Increase::Models::ExportCreateParams::TransactionCsv::CreatedAt,
          program_id: String
        }

      class TransactionCsv < Increase::BaseModel
        attr_reader account_id: String?

        def account_id=: (String) -> String

        attr_reader created_at: Increase::Models::ExportCreateParams::TransactionCsv::CreatedAt?

        def created_at=: (
          Increase::Models::ExportCreateParams::TransactionCsv::CreatedAt
        ) -> Increase::Models::ExportCreateParams::TransactionCsv::CreatedAt

        attr_reader program_id: String?

        def program_id=: (String) -> String

        def initialize: (
          ?account_id: String,
          ?created_at: Increase::Models::ExportCreateParams::TransactionCsv::CreatedAt,
          ?program_id: String
        ) -> void

        def to_hash: -> Increase::Models::ExportCreateParams::transaction_csv

        type created_at =
          { after: Time, before: Time, on_or_after: Time, on_or_before: Time }

        class CreatedAt < Increase::BaseModel
          attr_reader after: Time?

          def after=: (Time) -> Time

          attr_reader before: Time?

          def before=: (Time) -> Time

          attr_reader on_or_after: Time?

          def on_or_after=: (Time) -> Time

          attr_reader on_or_before: Time?

          def on_or_before=: (Time) -> Time

          def initialize: (
            ?after: Time,
            ?before: Time,
            ?on_or_after: Time,
            ?on_or_before: Time
          ) -> void

          def to_hash: -> Increase::Models::ExportCreateParams::TransactionCsv::created_at
        end
      end
    end
  end
end
