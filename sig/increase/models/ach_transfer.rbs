module Increase
  module Models
    type ach_transfer =
      {
        id: String,
        account_id: String,
        account_number: String,
        acknowledgement: Increase::Models::ACHTransfer::Acknowledgement?,
        addenda: Increase::Models::ACHTransfer::Addenda?,
        amount: Integer,
        approval: Increase::Models::ACHTransfer::Approval?,
        cancellation: Increase::Models::ACHTransfer::Cancellation?,
        company_descriptive_date: String?,
        company_discretionary_data: String?,
        company_entry_description: String?,
        company_name: String?,
        created_at: Time,
        created_by: Increase::Models::ACHTransfer::CreatedBy?,
        currency: Increase::Models::ACHTransfer::currency,
        destination_account_holder: Increase::Models::ACHTransfer::destination_account_holder,
        external_account_id: String?,
        funding: Increase::Models::ACHTransfer::funding,
        idempotency_key: String?,
        inbound_funds_hold: Increase::Models::ACHTransfer::InboundFundsHold?,
        individual_id: String?,
        individual_name: String?,
        network: Increase::Models::ACHTransfer::network,
        notifications_of_change: ::Array[Increase::Models::ACHTransfer::NotificationsOfChange],
        pending_transaction_id: String?,
        preferred_effective_date: Increase::Models::ACHTransfer::PreferredEffectiveDate,
        return_: Increase::Models::ACHTransfer::Return?,
        routing_number: String,
        settlement: Increase::Models::ACHTransfer::Settlement?,
        standard_entry_class_code: Increase::Models::ACHTransfer::standard_entry_class_code,
        statement_descriptor: String,
        status: Increase::Models::ACHTransfer::status,
        submission: Increase::Models::ACHTransfer::Submission?,
        transaction_id: String?,
        type: Increase::Models::ACHTransfer::type_
      }

    class ACHTransfer < Increase::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor account_number: String

      attr_accessor acknowledgement: Increase::Models::ACHTransfer::Acknowledgement?

      attr_accessor addenda: Increase::Models::ACHTransfer::Addenda?

      attr_accessor amount: Integer

      attr_accessor approval: Increase::Models::ACHTransfer::Approval?

      attr_accessor cancellation: Increase::Models::ACHTransfer::Cancellation?

      attr_accessor company_descriptive_date: String?

      attr_accessor company_discretionary_data: String?

      attr_accessor company_entry_description: String?

      attr_accessor company_name: String?

      attr_accessor created_at: Time

      attr_accessor created_by: Increase::Models::ACHTransfer::CreatedBy?

      attr_accessor currency: Increase::Models::ACHTransfer::currency

      attr_accessor destination_account_holder: Increase::Models::ACHTransfer::destination_account_holder

      attr_accessor external_account_id: String?

      attr_accessor funding: Increase::Models::ACHTransfer::funding

      attr_accessor idempotency_key: String?

      attr_accessor inbound_funds_hold: Increase::Models::ACHTransfer::InboundFundsHold?

      attr_accessor individual_id: String?

      attr_accessor individual_name: String?

      attr_accessor network: Increase::Models::ACHTransfer::network

      attr_accessor notifications_of_change: ::Array[Increase::Models::ACHTransfer::NotificationsOfChange]

      attr_accessor pending_transaction_id: String?

      attr_accessor preferred_effective_date: Increase::Models::ACHTransfer::PreferredEffectiveDate

      attr_accessor return_: Increase::Models::ACHTransfer::Return?

      attr_accessor routing_number: String

      attr_accessor settlement: Increase::Models::ACHTransfer::Settlement?

      attr_accessor standard_entry_class_code: Increase::Models::ACHTransfer::standard_entry_class_code

      attr_accessor statement_descriptor: String

      attr_accessor status: Increase::Models::ACHTransfer::status

      attr_accessor submission: Increase::Models::ACHTransfer::Submission?

      attr_accessor transaction_id: String?

      attr_accessor type: Increase::Models::ACHTransfer::type_

      def initialize: (
        id: String,
        account_id: String,
        account_number: String,
        acknowledgement: Increase::Models::ACHTransfer::Acknowledgement?,
        addenda: Increase::Models::ACHTransfer::Addenda?,
        amount: Integer,
        approval: Increase::Models::ACHTransfer::Approval?,
        cancellation: Increase::Models::ACHTransfer::Cancellation?,
        company_descriptive_date: String?,
        company_discretionary_data: String?,
        company_entry_description: String?,
        company_name: String?,
        created_at: Time,
        created_by: Increase::Models::ACHTransfer::CreatedBy?,
        currency: Increase::Models::ACHTransfer::currency,
        destination_account_holder: Increase::Models::ACHTransfer::destination_account_holder,
        external_account_id: String?,
        funding: Increase::Models::ACHTransfer::funding,
        idempotency_key: String?,
        inbound_funds_hold: Increase::Models::ACHTransfer::InboundFundsHold?,
        individual_id: String?,
        individual_name: String?,
        network: Increase::Models::ACHTransfer::network,
        notifications_of_change: ::Array[Increase::Models::ACHTransfer::NotificationsOfChange],
        pending_transaction_id: String?,
        preferred_effective_date: Increase::Models::ACHTransfer::PreferredEffectiveDate,
        return_: Increase::Models::ACHTransfer::Return?,
        routing_number: String,
        settlement: Increase::Models::ACHTransfer::Settlement?,
        standard_entry_class_code: Increase::Models::ACHTransfer::standard_entry_class_code,
        statement_descriptor: String,
        status: Increase::Models::ACHTransfer::status,
        submission: Increase::Models::ACHTransfer::Submission?,
        transaction_id: String?,
        type: Increase::Models::ACHTransfer::type_
      ) -> void

      def to_hash: -> Increase::Models::ach_transfer

      type acknowledgement = { acknowledged_at: String }

      class Acknowledgement < Increase::BaseModel
        attr_accessor acknowledged_at: String

        def initialize: (acknowledged_at: String) -> void

        def to_hash: -> Increase::Models::ACHTransfer::acknowledgement
      end

      type addenda =
        {
          category: Increase::Models::ACHTransfer::Addenda::category,
          freeform: Increase::Models::ACHTransfer::Addenda::Freeform?,
          payment_order_remittance_advice: Increase::Models::ACHTransfer::Addenda::PaymentOrderRemittanceAdvice?
        }

      class Addenda < Increase::BaseModel
        attr_accessor category: Increase::Models::ACHTransfer::Addenda::category

        attr_accessor freeform: Increase::Models::ACHTransfer::Addenda::Freeform?

        attr_accessor payment_order_remittance_advice: Increase::Models::ACHTransfer::Addenda::PaymentOrderRemittanceAdvice?

        def initialize: (
          category: Increase::Models::ACHTransfer::Addenda::category,
          freeform: Increase::Models::ACHTransfer::Addenda::Freeform?,
          payment_order_remittance_advice: Increase::Models::ACHTransfer::Addenda::PaymentOrderRemittanceAdvice?
        ) -> void

        def to_hash: -> Increase::Models::ACHTransfer::addenda

        type category = :freeform | :payment_order_remittance_advice | :other

        module Category
          extend Increase::Enum

          # Unstructured `payment_related_information` passed through with the transfer.
          FREEFORM: :freeform

          # Structured ASC X12 820 remittance advice records. Please reach out to [support@increase.com](mailto:support@increase.com) for more information.
          PAYMENT_ORDER_REMITTANCE_ADVICE: :payment_order_remittance_advice

          # Unknown addenda type.
          OTHER: :other

          def self.values: -> ::Array[Increase::Models::ACHTransfer::Addenda::category]
        end

        type freeform =
          {
            entries: ::Array[Increase::Models::ACHTransfer::Addenda::Freeform::Entry]
          }

        class Freeform < Increase::BaseModel
          attr_accessor entries: ::Array[Increase::Models::ACHTransfer::Addenda::Freeform::Entry]

          def initialize: (
            entries: ::Array[Increase::Models::ACHTransfer::Addenda::Freeform::Entry]
          ) -> void

          def to_hash: -> Increase::Models::ACHTransfer::Addenda::freeform

          type entry = { payment_related_information: String }

          class Entry < Increase::BaseModel
            attr_accessor payment_related_information: String

            def initialize: (payment_related_information: String) -> void

            def to_hash: -> Increase::Models::ACHTransfer::Addenda::Freeform::entry
          end
        end

        type payment_order_remittance_advice =
          {
            invoices: ::Array[Increase::Models::ACHTransfer::Addenda::PaymentOrderRemittanceAdvice::Invoice]
          }

        class PaymentOrderRemittanceAdvice < Increase::BaseModel
          attr_accessor invoices: ::Array[Increase::Models::ACHTransfer::Addenda::PaymentOrderRemittanceAdvice::Invoice]

          def initialize: (
            invoices: ::Array[Increase::Models::ACHTransfer::Addenda::PaymentOrderRemittanceAdvice::Invoice]
          ) -> void

          def to_hash: -> Increase::Models::ACHTransfer::Addenda::payment_order_remittance_advice

          type invoice = { invoice_number: String, paid_amount: Integer }

          class Invoice < Increase::BaseModel
            attr_accessor invoice_number: String

            attr_accessor paid_amount: Integer

            def initialize: (
              invoice_number: String,
              paid_amount: Integer
            ) -> void

            def to_hash: -> Increase::Models::ACHTransfer::Addenda::PaymentOrderRemittanceAdvice::invoice
          end
        end
      end

      type approval = { approved_at: Time, approved_by: String? }

      class Approval < Increase::BaseModel
        attr_accessor approved_at: Time

        attr_accessor approved_by: String?

        def initialize: (approved_at: Time, approved_by: String?) -> void

        def to_hash: -> Increase::Models::ACHTransfer::approval
      end

      type cancellation = { canceled_at: Time, canceled_by: String? }

      class Cancellation < Increase::BaseModel
        attr_accessor canceled_at: Time

        attr_accessor canceled_by: String?

        def initialize: (canceled_at: Time, canceled_by: String?) -> void

        def to_hash: -> Increase::Models::ACHTransfer::cancellation
      end

      type created_by =
        {
          api_key: Increase::Models::ACHTransfer::CreatedBy::APIKey?,
          category: Increase::Models::ACHTransfer::CreatedBy::category,
          oauth_application: Increase::Models::ACHTransfer::CreatedBy::OAuthApplication?,
          user: Increase::Models::ACHTransfer::CreatedBy::User?
        }

      class CreatedBy < Increase::BaseModel
        attr_accessor api_key: Increase::Models::ACHTransfer::CreatedBy::APIKey?

        attr_accessor category: Increase::Models::ACHTransfer::CreatedBy::category

        attr_accessor oauth_application: Increase::Models::ACHTransfer::CreatedBy::OAuthApplication?

        attr_accessor user: Increase::Models::ACHTransfer::CreatedBy::User?

        def initialize: (
          api_key: Increase::Models::ACHTransfer::CreatedBy::APIKey?,
          category: Increase::Models::ACHTransfer::CreatedBy::category,
          oauth_application: Increase::Models::ACHTransfer::CreatedBy::OAuthApplication?,
          user: Increase::Models::ACHTransfer::CreatedBy::User?
        ) -> void

        def to_hash: -> Increase::Models::ACHTransfer::created_by

        type api_key = { description: String? }

        class APIKey < Increase::BaseModel
          attr_accessor description: String?

          def initialize: (description: String?) -> void

          def to_hash: -> Increase::Models::ACHTransfer::CreatedBy::api_key
        end

        type category = :api_key | :oauth_application | :user

        module Category
          extend Increase::Enum

          # An API key. Details will be under the `api_key` object.
          API_KEY: :api_key

          # An OAuth application you connected to Increase. Details will be under the `oauth_application` object.
          OAUTH_APPLICATION: :oauth_application

          # A User in the Increase dashboard. Details will be under the `user` object.
          USER: :user

          def self.values: -> ::Array[Increase::Models::ACHTransfer::CreatedBy::category]
        end

        type oauth_application = { name: String }

        class OAuthApplication < Increase::BaseModel
          attr_accessor name: String

          def initialize: (name: String) -> void

          def to_hash: -> Increase::Models::ACHTransfer::CreatedBy::oauth_application
        end

        type user = { email: String }

        class User < Increase::BaseModel
          attr_accessor email: String

          def initialize: (email: String) -> void

          def to_hash: -> Increase::Models::ACHTransfer::CreatedBy::user
        end
      end

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self.values: -> ::Array[Increase::Models::ACHTransfer::currency]
      end

      type destination_account_holder = :business | :individual | :unknown

      module DestinationAccountHolder
        extend Increase::Enum

        # The External Account is owned by a business.
        BUSINESS: :business

        # The External Account is owned by an individual.
        INDIVIDUAL: :individual

        # It's unknown what kind of entity owns the External Account.
        UNKNOWN: :unknown

        def self.values: -> ::Array[Increase::Models::ACHTransfer::destination_account_holder]
      end

      type funding = :checking | :savings

      module Funding
        extend Increase::Enum

        # A checking account.
        CHECKING: :checking

        # A savings account.
        SAVINGS: :savings

        def self.values: -> ::Array[Increase::Models::ACHTransfer::funding]
      end

      type inbound_funds_hold =
        {
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::ACHTransfer::InboundFundsHold::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::ACHTransfer::InboundFundsHold::status,
          type: Increase::Models::ACHTransfer::InboundFundsHold::type_
        }

      class InboundFundsHold < Increase::BaseModel
        attr_accessor id: String

        attr_accessor amount: Integer

        attr_accessor automatically_releases_at: Time

        attr_accessor created_at: Time

        attr_accessor currency: Increase::Models::ACHTransfer::InboundFundsHold::currency

        attr_accessor held_transaction_id: String?

        attr_accessor pending_transaction_id: String?

        attr_accessor released_at: Time?

        attr_accessor status: Increase::Models::ACHTransfer::InboundFundsHold::status

        attr_accessor type: Increase::Models::ACHTransfer::InboundFundsHold::type_

        def initialize: (
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::ACHTransfer::InboundFundsHold::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::ACHTransfer::InboundFundsHold::status,
          type: Increase::Models::ACHTransfer::InboundFundsHold::type_
        ) -> void

        def to_hash: -> Increase::Models::ACHTransfer::inbound_funds_hold

        type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

        module Currency
          extend Increase::Enum

          # Canadian Dollar (CAD)
          CAD: :CAD

          # Swiss Franc (CHF)
          CHF: :CHF

          # Euro (EUR)
          EUR: :EUR

          # British Pound (GBP)
          GBP: :GBP

          # Japanese Yen (JPY)
          JPY: :JPY

          # US Dollar (USD)
          USD: :USD

          def self.values: -> ::Array[Increase::Models::ACHTransfer::InboundFundsHold::currency]
        end

        type status = :held | :complete

        module Status
          extend Increase::Enum

          # Funds are still being held.
          HELD: :held

          # Funds have been released.
          COMPLETE: :complete

          def self.values: -> ::Array[Increase::Models::ACHTransfer::InboundFundsHold::status]
        end

        type type_ = :inbound_funds_hold

        module Type
          extend Increase::Enum

          INBOUND_FUNDS_HOLD: :inbound_funds_hold

          def self.values: -> ::Array[Increase::Models::ACHTransfer::InboundFundsHold::type_]
        end
      end

      type network = :ach

      module Network
        extend Increase::Enum

        ACH: :ach

        def self.values: -> ::Array[Increase::Models::ACHTransfer::network]
      end

      type notifications_of_change =
        {
          change_code: Increase::Models::ACHTransfer::NotificationsOfChange::change_code,
          corrected_data: String,
          created_at: Time
        }

      class NotificationsOfChange < Increase::BaseModel
        attr_accessor change_code: Increase::Models::ACHTransfer::NotificationsOfChange::change_code

        attr_accessor corrected_data: String

        attr_accessor created_at: Time

        def initialize: (
          change_code: Increase::Models::ACHTransfer::NotificationsOfChange::change_code,
          corrected_data: String,
          created_at: Time
        ) -> void

        def to_hash: -> Increase::Models::ACHTransfer::notifications_of_change

        type change_code =
          :incorrect_account_number
          | :incorrect_routing_number
          | :incorrect_routing_number_and_account_number
          | :incorrect_transaction_code
          | :incorrect_account_number_and_transaction_code
          | :incorrect_routing_number_account_number_and_transaction_code
          | :incorrect_receiving_depository_financial_institution_identification
          | :incorrect_individual_identification_number
          | :addenda_format_error
          | :incorrect_standard_entry_class_code_for_outbound_international_payment
          | :misrouted_notification_of_change
          | :incorrect_trace_number
          | :incorrect_company_identification_number
          | :incorrect_identification_number
          | :incorrectly_formatted_corrected_data
          | :incorrect_discretionary_data
          | :routing_number_not_from_original_entry_detail_record
          | :depository_financial_institution_account_number_not_from_original_entry_detail_record
          | :incorrect_transaction_code_by_originating_depository_financial_institution

        module ChangeCode
          extend Increase::Enum

          # The account number was incorrect.
          INCORRECT_ACCOUNT_NUMBER: :incorrect_account_number

          # The routing number was incorrect.
          INCORRECT_ROUTING_NUMBER: :incorrect_routing_number

          # Both the routing number and the account number were incorrect.
          INCORRECT_ROUTING_NUMBER_AND_ACCOUNT_NUMBER: :incorrect_routing_number_and_account_number

          # The transaction code was incorrect. Try changing the `funding` parameter from checking to savings or vice-versa.
          INCORRECT_TRANSACTION_CODE: :incorrect_transaction_code

          # The account number and the transaction code were incorrect.
          INCORRECT_ACCOUNT_NUMBER_AND_TRANSACTION_CODE: :incorrect_account_number_and_transaction_code

          # The routing number, account number, and transaction code were incorrect.
          INCORRECT_ROUTING_NUMBER_ACCOUNT_NUMBER_AND_TRANSACTION_CODE: :incorrect_routing_number_account_number_and_transaction_code

          # The receiving depository financial institution identification was incorrect.
          INCORRECT_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_IDENTIFICATION: :incorrect_receiving_depository_financial_institution_identification

          # The individual identification number was incorrect.
          INCORRECT_INDIVIDUAL_IDENTIFICATION_NUMBER: :incorrect_individual_identification_number

          # The addenda had an incorrect format.
          ADDENDA_FORMAT_ERROR: :addenda_format_error

          # The standard entry class code was incorrect for an outbound international payment.
          INCORRECT_STANDARD_ENTRY_CLASS_CODE_FOR_OUTBOUND_INTERNATIONAL_PAYMENT: :incorrect_standard_entry_class_code_for_outbound_international_payment

          # The notification of change was misrouted.
          MISROUTED_NOTIFICATION_OF_CHANGE: :misrouted_notification_of_change

          # The trace number was incorrect.
          INCORRECT_TRACE_NUMBER: :incorrect_trace_number

          # The company identification number was incorrect.
          INCORRECT_COMPANY_IDENTIFICATION_NUMBER: :incorrect_company_identification_number

          # The individual identification number or identification number was incorrect.
          INCORRECT_IDENTIFICATION_NUMBER: :incorrect_identification_number

          # The corrected data was incorrectly formatted.
          INCORRECTLY_FORMATTED_CORRECTED_DATA: :incorrectly_formatted_corrected_data

          # The discretionary data was incorrect.
          INCORRECT_DISCRETIONARY_DATA: :incorrect_discretionary_data

          # The routing number was not from the original entry detail record.
          ROUTING_NUMBER_NOT_FROM_ORIGINAL_ENTRY_DETAIL_RECORD: :routing_number_not_from_original_entry_detail_record

          # The depository financial institution account number was not from the original entry detail record.
          DEPOSITORY_FINANCIAL_INSTITUTION_ACCOUNT_NUMBER_NOT_FROM_ORIGINAL_ENTRY_DETAIL_RECORD: :depository_financial_institution_account_number_not_from_original_entry_detail_record

          # The transaction code was incorrect, initiated by the originating depository financial institution.
          INCORRECT_TRANSACTION_CODE_BY_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION: :incorrect_transaction_code_by_originating_depository_financial_institution

          def self.values: -> ::Array[Increase::Models::ACHTransfer::NotificationsOfChange::change_code]
        end
      end

      type preferred_effective_date =
        {
          date: Date?,
          settlement_schedule: Increase::Models::ACHTransfer::PreferredEffectiveDate::settlement_schedule?
        }

      class PreferredEffectiveDate < Increase::BaseModel
        attr_accessor date: Date?

        attr_accessor settlement_schedule: Increase::Models::ACHTransfer::PreferredEffectiveDate::settlement_schedule?

        def initialize: (
          date: Date?,
          settlement_schedule: Increase::Models::ACHTransfer::PreferredEffectiveDate::settlement_schedule?
        ) -> void

        def to_hash: -> Increase::Models::ACHTransfer::preferred_effective_date

        type settlement_schedule = :same_day | :future_dated

        module SettlementSchedule
          extend Increase::Enum

          # The chosen effective date will be the same as the ACH processing date on which the transfer is submitted.
          # This is necessary, but not sufficient for the transfer to be settled same-day:
          # it must also be submitted before the last same-day cutoff
          # and be less than or equal to $1,000.000.00.
          SAME_DAY: :same_day

          # The chosen effective date will be the business day following the ACH processing date on which the transfer is submitted. The transfer will be settled on that future day.
          FUTURE_DATED: :future_dated

          def self.values: -> ::Array[Increase::Models::ACHTransfer::PreferredEffectiveDate::settlement_schedule]
        end
      end

      type return_ =
        {
          created_at: Time,
          raw_return_reason_code: String,
          return_reason_code: Increase::Models::ACHTransfer::Return::return_reason_code,
          trace_number: String,
          transaction_id: String,
          transfer_id: String
        }

      class Return < Increase::BaseModel
        attr_accessor created_at: Time

        attr_accessor raw_return_reason_code: String

        attr_accessor return_reason_code: Increase::Models::ACHTransfer::Return::return_reason_code

        attr_accessor trace_number: String

        attr_accessor transaction_id: String

        attr_accessor transfer_id: String

        def initialize: (
          created_at: Time,
          raw_return_reason_code: String,
          return_reason_code: Increase::Models::ACHTransfer::Return::return_reason_code,
          trace_number: String,
          transaction_id: String,
          transfer_id: String
        ) -> void

        def to_hash: -> Increase::Models::ACHTransfer::return_

        type return_reason_code =
          :insufficient_fund
          | :no_account
          | :account_closed
          | :invalid_account_number_structure
          | :account_frozen_entry_returned_per_ofac_instruction
          | :credit_entry_refused_by_receiver
          | :unauthorized_debit_to_consumer_account_using_corporate_sec_code
          | :corporate_customer_advised_not_authorized
          | :payment_stopped
          | :non_transaction_account
          | :uncollected_funds
          | :routing_number_check_digit_error
          | :customer_advised_unauthorized_improper_ineligible_or_incomplete
          | :amount_field_error
          | :authorization_revoked_by_customer
          | :invalid_ach_routing_number
          | :file_record_edit_criteria
          | :enr_invalid_individual_name
          | :returned_per_odfi_request
          | :limited_participation_dfi
          | :incorrectly_coded_outbound_international_payment
          | :account_sold_to_another_dfi
          | :addenda_error
          | :beneficiary_or_account_holder_deceased
          | :customer_advised_not_within_authorization_terms
          | :corrected_return
          | :duplicate_entry
          | :duplicate_return
          | :enr_duplicate_enrollment
          | :enr_invalid_dfi_account_number
          | :enr_invalid_individual_id_number
          | :enr_invalid_representative_payee_indicator
          | :enr_invalid_transaction_code
          | :enr_return_of_enr_entry
          | :enr_routing_number_check_digit_error
          | :entry_not_processed_by_gateway
          | :field_error
          | :foreign_receiving_dfi_unable_to_settle
          | :iat_entry_coding_error
          | :improper_effective_entry_date
          | :improper_source_document_source_document_presented
          | :invalid_company_id
          | :invalid_foreign_receiving_dfi_identification
          | :invalid_individual_id_number
          | :item_and_rck_entry_presented_for_payment
          | :item_related_to_rck_entry_is_ineligible
          | :mandatory_field_error
          | :misrouted_dishonored_return
          | :misrouted_return
          | :no_errors_found
          | :non_acceptance_of_r62_dishonored_return
          | :non_participant_in_iat_program
          | :permissible_return_entry
          | :permissible_return_entry_not_accepted
          | :rdfi_non_settlement
          | :rdfi_participant_in_check_truncation_program
          | :representative_payee_deceased_or_unable_to_continue_in_that_capacity
          | :return_not_a_duplicate
          | :return_of_erroneous_or_reversing_debit
          | :return_of_improper_credit_entry
          | :return_of_improper_debit_entry
          | :return_of_xck_entry
          | :source_document_presented_for_payment
          | :state_law_affecting_rck_acceptance
          | :stop_payment_on_item_related_to_rck_entry
          | :stop_payment_on_source_document
          | :timely_original_return
          | :trace_number_error
          | :untimely_dishonored_return
          | :untimely_return

        module ReturnReasonCode
          extend Increase::Enum

          # Code R01. Insufficient funds in the receiving account. Sometimes abbreviated to NSF.
          INSUFFICIENT_FUND: :insufficient_fund

          # Code R03. The account does not exist or the receiving bank was unable to locate it.
          NO_ACCOUNT: :no_account

          # Code R02. The account is closed at the receiving bank.
          ACCOUNT_CLOSED: :account_closed

          # Code R04. The account number is invalid at the receiving bank.
          INVALID_ACCOUNT_NUMBER_STRUCTURE: :invalid_account_number_structure

          # Code R16. The account at the receiving bank was frozen per the Office of Foreign Assets Control.
          ACCOUNT_FROZEN_ENTRY_RETURNED_PER_OFAC_INSTRUCTION: :account_frozen_entry_returned_per_ofac_instruction

          # Code R23. The receiving bank account refused a credit transfer.
          CREDIT_ENTRY_REFUSED_BY_RECEIVER: :credit_entry_refused_by_receiver

          # Code R05. The receiving bank rejected because of an incorrect Standard Entry Class code.
          UNAUTHORIZED_DEBIT_TO_CONSUMER_ACCOUNT_USING_CORPORATE_SEC_CODE: :unauthorized_debit_to_consumer_account_using_corporate_sec_code

          # Code R29. The corporate customer at the receiving bank reversed the transfer.
          CORPORATE_CUSTOMER_ADVISED_NOT_AUTHORIZED: :corporate_customer_advised_not_authorized

          # Code R08. The receiving bank stopped payment on this transfer.
          PAYMENT_STOPPED: :payment_stopped

          # Code R20. The receiving bank account does not perform transfers.
          NON_TRANSACTION_ACCOUNT: :non_transaction_account

          # Code R09. The receiving bank account does not have enough available balance for the transfer.
          UNCOLLECTED_FUNDS: :uncollected_funds

          # Code R28. The routing number is incorrect.
          ROUTING_NUMBER_CHECK_DIGIT_ERROR: :routing_number_check_digit_error

          # Code R10. The customer at the receiving bank reversed the transfer.
          CUSTOMER_ADVISED_UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE: :customer_advised_unauthorized_improper_ineligible_or_incomplete

          # Code R19. The amount field is incorrect or too large.
          AMOUNT_FIELD_ERROR: :amount_field_error

          # Code R07. The customer at the receiving institution informed their bank that they have revoked authorization for a previously authorized transfer.
          AUTHORIZATION_REVOKED_BY_CUSTOMER: :authorization_revoked_by_customer

          # Code R13. The routing number is invalid.
          INVALID_ACH_ROUTING_NUMBER: :invalid_ach_routing_number

          # Code R17. The receiving bank is unable to process a field in the transfer.
          FILE_RECORD_EDIT_CRITERIA: :file_record_edit_criteria

          # Code R45. The individual name field was invalid.
          ENR_INVALID_INDIVIDUAL_NAME: :enr_invalid_individual_name

          # Code R06. The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.
          RETURNED_PER_ODFI_REQUEST: :returned_per_odfi_request

          # Code R34. The receiving bank's regulatory supervisor has limited their participation in the ACH network.
          LIMITED_PARTICIPATION_DFI: :limited_participation_dfi

          # Code R85. The outbound international ACH transfer was incorrect.
          INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT: :incorrectly_coded_outbound_international_payment

          # Code R12. A rare return reason. The account was sold to another bank.
          ACCOUNT_SOLD_TO_ANOTHER_DFI: :account_sold_to_another_dfi

          # Code R25. The addenda record is incorrect or missing.
          ADDENDA_ERROR: :addenda_error

          # Code R15. A rare return reason. The account holder is deceased.
          BENEFICIARY_OR_ACCOUNT_HOLDER_DECEASED: :beneficiary_or_account_holder_deceased

          # Code R11. A rare return reason. The customer authorized some payment to the sender, but this payment was not in error.
          CUSTOMER_ADVISED_NOT_WITHIN_AUTHORIZATION_TERMS: :customer_advised_not_within_authorization_terms

          # Code R74. A rare return reason. Sent in response to a return that was returned with code `field_error`. The latest return should include the corrected field(s).
          CORRECTED_RETURN: :corrected_return

          # Code R24. A rare return reason. The receiving bank received an exact duplicate entry with the same trace number and amount.
          DUPLICATE_ENTRY: :duplicate_entry

          # Code R67. A rare return reason. The return this message refers to was a duplicate.
          DUPLICATE_RETURN: :duplicate_return

          # Code R47. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
          ENR_DUPLICATE_ENROLLMENT: :enr_duplicate_enrollment

          # Code R43. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
          ENR_INVALID_DFI_ACCOUNT_NUMBER: :enr_invalid_dfi_account_number

          # Code R44. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
          ENR_INVALID_INDIVIDUAL_ID_NUMBER: :enr_invalid_individual_id_number

          # Code R46. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
          ENR_INVALID_REPRESENTATIVE_PAYEE_INDICATOR: :enr_invalid_representative_payee_indicator

          # Code R41. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
          ENR_INVALID_TRANSACTION_CODE: :enr_invalid_transaction_code

          # Code R40. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
          ENR_RETURN_OF_ENR_ENTRY: :enr_return_of_enr_entry

          # Code R42. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.
          ENR_ROUTING_NUMBER_CHECK_DIGIT_ERROR: :enr_routing_number_check_digit_error

          # Code R84. A rare return reason. The International ACH Transfer cannot be processed by the gateway.
          ENTRY_NOT_PROCESSED_BY_GATEWAY: :entry_not_processed_by_gateway

          # Code R69. A rare return reason. One or more of the fields in the ACH were malformed.
          FIELD_ERROR: :field_error

          # Code R83. A rare return reason. The Foreign receiving bank was unable to settle this ACH transfer.
          FOREIGN_RECEIVING_DFI_UNABLE_TO_SETTLE: :foreign_receiving_dfi_unable_to_settle

          # Code R80. A rare return reason. The International ACH Transfer is malformed.
          IAT_ENTRY_CODING_ERROR: :iat_entry_coding_error

          # Code R18. A rare return reason. The ACH has an improper effective entry date field.
          IMPROPER_EFFECTIVE_ENTRY_DATE: :improper_effective_entry_date

          # Code R39. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.
          IMPROPER_SOURCE_DOCUMENT_SOURCE_DOCUMENT_PRESENTED: :improper_source_document_source_document_presented

          # Code R21. A rare return reason. The Company ID field of the ACH was invalid.
          INVALID_COMPANY_ID: :invalid_company_id

          # Code R82. A rare return reason. The foreign receiving bank identifier for an International ACH Transfer was invalid.
          INVALID_FOREIGN_RECEIVING_DFI_IDENTIFICATION: :invalid_foreign_receiving_dfi_identification

          # Code R22. A rare return reason. The Individual ID number field of the ACH was invalid.
          INVALID_INDIVIDUAL_ID_NUMBER: :invalid_individual_id_number

          # Code R53. A rare return reason. Both the Represented Check ("RCK") entry and the original check were presented to the bank.
          ITEM_AND_RCK_ENTRY_PRESENTED_FOR_PAYMENT: :item_and_rck_entry_presented_for_payment

          # Code R51. A rare return reason. The Represented Check ("RCK") entry is ineligible.
          ITEM_RELATED_TO_RCK_ENTRY_IS_INELIGIBLE: :item_related_to_rck_entry_is_ineligible

          # Code R26. A rare return reason. The ACH is missing a required field.
          MANDATORY_FIELD_ERROR: :mandatory_field_error

          # Code R71. A rare return reason. The receiving bank does not recognize the routing number in a dishonored return entry.
          MISROUTED_DISHONORED_RETURN: :misrouted_dishonored_return

          # Code R61. A rare return reason. The receiving bank does not recognize the routing number in a return entry.
          MISROUTED_RETURN: :misrouted_return

          # Code R76. A rare return reason. Sent in response to a return, the bank does not find the errors alleged by the returning bank.
          NO_ERRORS_FOUND: :no_errors_found

          # Code R77. A rare return reason. The receiving bank does not accept the return of the erroneous debit. The funds are not available at the receiving bank.
          NON_ACCEPTANCE_OF_R62_DISHONORED_RETURN: :non_acceptance_of_r62_dishonored_return

          # Code R81. A rare return reason. The receiving bank does not accept International ACH Transfers.
          NON_PARTICIPANT_IN_IAT_PROGRAM: :non_participant_in_iat_program

          # Code R31. A rare return reason. A return that has been agreed to be accepted by the receiving bank, despite falling outside of the usual return timeframe.
          PERMISSIBLE_RETURN_ENTRY: :permissible_return_entry

          # Code R70. A rare return reason. The receiving bank had not approved this return.
          PERMISSIBLE_RETURN_ENTRY_NOT_ACCEPTED: :permissible_return_entry_not_accepted

          # Code R32. A rare return reason. The receiving bank could not settle this transaction.
          RDFI_NON_SETTLEMENT: :rdfi_non_settlement

          # Code R30. A rare return reason. The receiving bank does not accept Check Truncation ACH transfers.
          RDFI_PARTICIPANT_IN_CHECK_TRUNCATION_PROGRAM: :rdfi_participant_in_check_truncation_program

          # Code R14. A rare return reason. The payee is deceased.
          REPRESENTATIVE_PAYEE_DECEASED_OR_UNABLE_TO_CONTINUE_IN_THAT_CAPACITY: :representative_payee_deceased_or_unable_to_continue_in_that_capacity

          # Code R75. A rare return reason. The originating bank disputes that an earlier `duplicate_entry` return was actually a duplicate.
          RETURN_NOT_A_DUPLICATE: :return_not_a_duplicate

          # Code R62. A rare return reason. The originating financial institution made a mistake and this return corrects it.
          RETURN_OF_ERRONEOUS_OR_REVERSING_DEBIT: :return_of_erroneous_or_reversing_debit

          # Code R36. A rare return reason. Return of a malformed credit entry.
          RETURN_OF_IMPROPER_CREDIT_ENTRY: :return_of_improper_credit_entry

          # Code R35. A rare return reason. Return of a malformed debit entry.
          RETURN_OF_IMPROPER_DEBIT_ENTRY: :return_of_improper_debit_entry

          # Code R33. A rare return reason. Return of a Destroyed Check ("XKC") entry.
          RETURN_OF_XCK_ENTRY: :return_of_xck_entry

          # Code R37. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.
          SOURCE_DOCUMENT_PRESENTED_FOR_PAYMENT: :source_document_presented_for_payment

          # Code R50. A rare return reason. State law prevents the bank from accepting the Represented Check ("RCK") entry.
          STATE_LAW_AFFECTING_RCK_ACCEPTANCE: :state_law_affecting_rck_acceptance

          # Code R52. A rare return reason. A stop payment was issued on a Represented Check ("RCK") entry.
          STOP_PAYMENT_ON_ITEM_RELATED_TO_RCK_ENTRY: :stop_payment_on_item_related_to_rck_entry

          # Code R38. A rare return reason. The source attached to the ACH, usually an ACH check conversion, includes a stop payment.
          STOP_PAYMENT_ON_SOURCE_DOCUMENT: :stop_payment_on_source_document

          # Code R73. A rare return reason. The bank receiving an `untimely_return` believes it was on time.
          TIMELY_ORIGINAL_RETURN: :timely_original_return

          # Code R27. A rare return reason. An ACH return's trace number does not match an originated ACH.
          TRACE_NUMBER_ERROR: :trace_number_error

          # Code R72. A rare return reason. The dishonored return was sent too late.
          UNTIMELY_DISHONORED_RETURN: :untimely_dishonored_return

          # Code R68. A rare return reason. The return was sent too late.
          UNTIMELY_RETURN: :untimely_return

          def self.values: -> ::Array[Increase::Models::ACHTransfer::Return::return_reason_code]
        end
      end

      type settlement = { settled_at: Time }

      class Settlement < Increase::BaseModel
        attr_accessor settled_at: Time

        def initialize: (settled_at: Time) -> void

        def to_hash: -> Increase::Models::ACHTransfer::settlement
      end

      type standard_entry_class_code =
        :corporate_credit_or_debit
        | :corporate_trade_exchange
        | :prearranged_payments_and_deposit
        | :internet_initiated

      module StandardEntryClassCode
        extend Increase::Enum

        # Corporate Credit and Debit (CCD).
        CORPORATE_CREDIT_OR_DEBIT: :corporate_credit_or_debit

        # Corporate Trade Exchange (CTX).
        CORPORATE_TRADE_EXCHANGE: :corporate_trade_exchange

        # Prearranged Payments and Deposits (PPD).
        PREARRANGED_PAYMENTS_AND_DEPOSIT: :prearranged_payments_and_deposit

        # Internet Initiated (WEB).
        INTERNET_INITIATED: :internet_initiated

        def self.values: -> ::Array[Increase::Models::ACHTransfer::standard_entry_class_code]
      end

      type status =
        :pending_approval
        | :pending_transfer_session_confirmation
        | :canceled
        | :pending_submission
        | :pending_reviewing
        | :requires_attention
        | :rejected
        | :submitted
        | :returned

      module Status
        extend Increase::Enum

        # The transfer is pending approval.
        PENDING_APPROVAL: :pending_approval

        # The transfer belongs to a Transfer Session that is pending confirmation.
        PENDING_TRANSFER_SESSION_CONFIRMATION: :pending_transfer_session_confirmation

        # The transfer has been canceled.
        CANCELED: :canceled

        # The transfer is pending submission to the Federal Reserve.
        PENDING_SUBMISSION: :pending_submission

        # The transfer is pending review by Increase.
        PENDING_REVIEWING: :pending_reviewing

        # The transfer requires attention from an Increase operator.
        REQUIRES_ATTENTION: :requires_attention

        # The transfer has been rejected.
        REJECTED: :rejected

        # The transfer is complete.
        SUBMITTED: :submitted

        # The transfer has been returned.
        RETURNED: :returned

        def self.values: -> ::Array[Increase::Models::ACHTransfer::status]
      end

      type submission =
        {
          effective_date: Date,
          expected_funds_settlement_at: Time,
          expected_settlement_schedule: Increase::Models::ACHTransfer::Submission::expected_settlement_schedule,
          submitted_at: Time,
          trace_number: String
        }

      class Submission < Increase::BaseModel
        attr_accessor effective_date: Date

        attr_accessor expected_funds_settlement_at: Time

        attr_accessor expected_settlement_schedule: Increase::Models::ACHTransfer::Submission::expected_settlement_schedule

        attr_accessor submitted_at: Time

        attr_accessor trace_number: String

        def initialize: (
          effective_date: Date,
          expected_funds_settlement_at: Time,
          expected_settlement_schedule: Increase::Models::ACHTransfer::Submission::expected_settlement_schedule,
          submitted_at: Time,
          trace_number: String
        ) -> void

        def to_hash: -> Increase::Models::ACHTransfer::submission

        type expected_settlement_schedule = :same_day | :future_dated

        module ExpectedSettlementSchedule
          extend Increase::Enum

          # The transfer is expected to settle same-day.
          SAME_DAY: :same_day

          # The transfer is expected to settle on a future date.
          FUTURE_DATED: :future_dated

          def self.values: -> ::Array[Increase::Models::ACHTransfer::Submission::expected_settlement_schedule]
        end
      end

      type type_ = :ach_transfer

      module Type
        extend Increase::Enum

        ACH_TRANSFER: :ach_transfer

        def self.values: -> ::Array[Increase::Models::ACHTransfer::type_]
      end
    end
  end
end
