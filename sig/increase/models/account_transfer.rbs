module Increase
  module Models
    type account_transfer =
      {
        id: String,
        account_id: String,
        amount: Integer,
        approval: Increase::Models::AccountTransfer::Approval?,
        cancellation: Increase::Models::AccountTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::Models::AccountTransfer::CreatedBy?,
        currency: Increase::Models::AccountTransfer::currency,
        description: String,
        destination_account_id: String,
        destination_transaction_id: String?,
        idempotency_key: String?,
        network: Increase::Models::AccountTransfer::network,
        pending_transaction_id: String?,
        status: Increase::Models::AccountTransfer::status,
        transaction_id: String?,
        type: Increase::Models::AccountTransfer::type_
      }

    class AccountTransfer < Increase::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor approval: Increase::Models::AccountTransfer::Approval?

      attr_accessor cancellation: Increase::Models::AccountTransfer::Cancellation?

      attr_accessor created_at: Time

      attr_accessor created_by: Increase::Models::AccountTransfer::CreatedBy?

      attr_accessor currency: Increase::Models::AccountTransfer::currency

      attr_accessor description: String

      attr_accessor destination_account_id: String

      attr_accessor destination_transaction_id: String?

      attr_accessor idempotency_key: String?

      attr_accessor network: Increase::Models::AccountTransfer::network

      attr_accessor pending_transaction_id: String?

      attr_accessor status: Increase::Models::AccountTransfer::status

      attr_accessor transaction_id: String?

      attr_accessor type: Increase::Models::AccountTransfer::type_

      def initialize: (
        id: String,
        account_id: String,
        amount: Integer,
        approval: Increase::Models::AccountTransfer::Approval?,
        cancellation: Increase::Models::AccountTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::Models::AccountTransfer::CreatedBy?,
        currency: Increase::Models::AccountTransfer::currency,
        description: String,
        destination_account_id: String,
        destination_transaction_id: String?,
        idempotency_key: String?,
        network: Increase::Models::AccountTransfer::network,
        pending_transaction_id: String?,
        status: Increase::Models::AccountTransfer::status,
        transaction_id: String?,
        type: Increase::Models::AccountTransfer::type_
      ) -> void

      def to_hash: -> Increase::Models::account_transfer

      type approval = { approved_at: Time, approved_by: String? }

      class Approval < Increase::BaseModel
        attr_accessor approved_at: Time

        attr_accessor approved_by: String?

        def initialize: (approved_at: Time, approved_by: String?) -> void

        def to_hash: -> Increase::Models::AccountTransfer::approval
      end

      type cancellation = { canceled_at: Time, canceled_by: String? }

      class Cancellation < Increase::BaseModel
        attr_accessor canceled_at: Time

        attr_accessor canceled_by: String?

        def initialize: (canceled_at: Time, canceled_by: String?) -> void

        def to_hash: -> Increase::Models::AccountTransfer::cancellation
      end

      type created_by =
        {
          api_key: Increase::Models::AccountTransfer::CreatedBy::APIKey?,
          category: Increase::Models::AccountTransfer::CreatedBy::category,
          oauth_application: Increase::Models::AccountTransfer::CreatedBy::OAuthApplication?,
          user: Increase::Models::AccountTransfer::CreatedBy::User?
        }

      class CreatedBy < Increase::BaseModel
        attr_accessor api_key: Increase::Models::AccountTransfer::CreatedBy::APIKey?

        attr_accessor category: Increase::Models::AccountTransfer::CreatedBy::category

        attr_accessor oauth_application: Increase::Models::AccountTransfer::CreatedBy::OAuthApplication?

        attr_accessor user: Increase::Models::AccountTransfer::CreatedBy::User?

        def initialize: (
          api_key: Increase::Models::AccountTransfer::CreatedBy::APIKey?,
          category: Increase::Models::AccountTransfer::CreatedBy::category,
          oauth_application: Increase::Models::AccountTransfer::CreatedBy::OAuthApplication?,
          user: Increase::Models::AccountTransfer::CreatedBy::User?
        ) -> void

        def to_hash: -> Increase::Models::AccountTransfer::created_by

        type api_key = { description: String? }

        class APIKey < Increase::BaseModel
          attr_accessor description: String?

          def initialize: (description: String?) -> void

          def to_hash: -> Increase::Models::AccountTransfer::CreatedBy::api_key
        end

        type category = :api_key | :oauth_application | :user

        module Category
          extend Increase::Enum

          # An API key. Details will be under the `api_key` object.
          API_KEY: :api_key

          # An OAuth application you connected to Increase. Details will be under the `oauth_application` object.
          OAUTH_APPLICATION: :oauth_application

          # A User in the Increase dashboard. Details will be under the `user` object.
          USER: :user

          def self.values: -> ::Array[Increase::Models::AccountTransfer::CreatedBy::category]
        end

        type oauth_application = { name: String }

        class OAuthApplication < Increase::BaseModel
          attr_accessor name: String

          def initialize: (name: String) -> void

          def to_hash: -> Increase::Models::AccountTransfer::CreatedBy::oauth_application
        end

        type user = { email: String }

        class User < Increase::BaseModel
          attr_accessor email: String

          def initialize: (email: String) -> void

          def to_hash: -> Increase::Models::AccountTransfer::CreatedBy::user
        end
      end

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self.values: -> ::Array[Increase::Models::AccountTransfer::currency]
      end

      type network = :account

      module Network
        extend Increase::Enum

        ACCOUNT: :account

        def self.values: -> ::Array[Increase::Models::AccountTransfer::network]
      end

      type status = :pending_approval | :canceled | :complete

      module Status
        extend Increase::Enum

        # The transfer is pending approval.
        PENDING_APPROVAL: :pending_approval

        # The transfer has been canceled.
        CANCELED: :canceled

        # The transfer has been completed.
        COMPLETE: :complete

        def self.values: -> ::Array[Increase::Models::AccountTransfer::status]
      end

      type type_ = :account_transfer

      module Type
        extend Increase::Enum

        ACCOUNT_TRANSFER: :account_transfer

        def self.values: -> ::Array[Increase::Models::AccountTransfer::type_]
      end
    end
  end
end
