module Increase
  module Models
    type real_time_payments_transfer = {
      id: String,
      account_id: String,
      acknowledgement: Increase::RealTimePaymentsTransfer::Acknowledgement?,
      amount: Integer,
      approval: Increase::RealTimePaymentsTransfer::Approval?,
      cancellation: Increase::RealTimePaymentsTransfer::Cancellation?,
      created_at: Time,
      created_by: Increase::RealTimePaymentsTransfer::CreatedBy?,
      creditor_name: String,
      currency: Increase::Models::RealTimePaymentsTransfer::currency,
      debtor_name: String?,
      destination_account_number: String,
      destination_routing_number: String,
      external_account_id: String?,
      idempotency_key: String?,
      pending_transaction_id: String?,
      rejection: Increase::RealTimePaymentsTransfer::Rejection?,
      remittance_information: String,
      source_account_number_id: String,
      status: Increase::Models::RealTimePaymentsTransfer::status,
      submission: Increase::RealTimePaymentsTransfer::Submission?,
      transaction_id: String?,
      type: Increase::Models::RealTimePaymentsTransfer::type_,
      ultimate_creditor_name: String?,
      ultimate_debtor_name: String?
    }

    class RealTimePaymentsTransfer < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor acknowledgement: Increase::RealTimePaymentsTransfer::Acknowledgement?

      attr_accessor amount: Integer

      attr_accessor approval: Increase::RealTimePaymentsTransfer::Approval?

      attr_accessor cancellation: Increase::RealTimePaymentsTransfer::Cancellation?

      attr_accessor created_at: Time

      attr_accessor created_by: Increase::RealTimePaymentsTransfer::CreatedBy?

      attr_accessor creditor_name: String

      attr_accessor currency: Increase::Models::RealTimePaymentsTransfer::currency

      attr_accessor debtor_name: String?

      attr_accessor destination_account_number: String

      attr_accessor destination_routing_number: String

      attr_accessor external_account_id: String?

      attr_accessor idempotency_key: String?

      attr_accessor pending_transaction_id: String?

      attr_accessor rejection: Increase::RealTimePaymentsTransfer::Rejection?

      attr_accessor remittance_information: String

      attr_accessor source_account_number_id: String

      attr_accessor status: Increase::Models::RealTimePaymentsTransfer::status

      attr_accessor submission: Increase::RealTimePaymentsTransfer::Submission?

      attr_accessor transaction_id: String?

      attr_accessor type: Increase::Models::RealTimePaymentsTransfer::type_

      attr_accessor ultimate_creditor_name: String?

      attr_accessor ultimate_debtor_name: String?

      def initialize: (id: String, account_id: String, acknowledgement: Increase::RealTimePaymentsTransfer::Acknowledgement?, amount: Integer, approval: Increase::RealTimePaymentsTransfer::Approval?, cancellation: Increase::RealTimePaymentsTransfer::Cancellation?, created_at: Time, created_by: Increase::RealTimePaymentsTransfer::CreatedBy?, creditor_name: String, currency: Increase::Models::RealTimePaymentsTransfer::currency, debtor_name: String?, destination_account_number: String, destination_routing_number: String, external_account_id: String?, idempotency_key: String?, pending_transaction_id: String?, rejection: Increase::RealTimePaymentsTransfer::Rejection?, remittance_information: String, source_account_number_id: String, status: Increase::Models::RealTimePaymentsTransfer::status, submission: Increase::RealTimePaymentsTransfer::Submission?, transaction_id: String?, type: Increase::Models::RealTimePaymentsTransfer::type_, ultimate_creditor_name: String?, ultimate_debtor_name: String?) -> void

      def to_hash: () -> {
        id: String,
        account_id: String,
        acknowledgement: Increase::RealTimePaymentsTransfer::Acknowledgement?,
        amount: Integer,
        approval: Increase::RealTimePaymentsTransfer::Approval?,
        cancellation: Increase::RealTimePaymentsTransfer::Cancellation?,
        created_at: Time,
        created_by: Increase::RealTimePaymentsTransfer::CreatedBy?,
        creditor_name: String,
        currency: Increase::Models::RealTimePaymentsTransfer::currency,
        debtor_name: String?,
        destination_account_number: String,
        destination_routing_number: String,
        external_account_id: String?,
        idempotency_key: String?,
        pending_transaction_id: String?,
        rejection: Increase::RealTimePaymentsTransfer::Rejection?,
        remittance_information: String,
        source_account_number_id: String,
        status: Increase::Models::RealTimePaymentsTransfer::status,
        submission: Increase::RealTimePaymentsTransfer::Submission?,
        transaction_id: String?,
        type: Increase::Models::RealTimePaymentsTransfer::type_,
        ultimate_creditor_name: String?,
        ultimate_debtor_name: String?
      }

      type acknowledgement = {acknowledged_at: Time}

      class Acknowledgement < Increase::Internal::Type::BaseModel
        attr_accessor acknowledged_at: Time

        def initialize: (acknowledged_at: Time) -> void

        def to_hash: () -> {acknowledged_at: Time}
      end

      type approval = {approved_at: Time, approved_by: String?}

      class Approval < Increase::Internal::Type::BaseModel
        attr_accessor approved_at: Time

        attr_accessor approved_by: String?

        def initialize: (approved_at: Time, approved_by: String?) -> void

        def to_hash: () -> {approved_at: Time, approved_by: String?}
      end

      type cancellation = {canceled_at: Time, canceled_by: String?}

      class Cancellation < Increase::Internal::Type::BaseModel
        attr_accessor canceled_at: Time

        attr_accessor canceled_by: String?

        def initialize: (canceled_at: Time, canceled_by: String?) -> void

        def to_hash: () -> {canceled_at: Time, canceled_by: String?}
      end

      type created_by = {
        api_key: Increase::RealTimePaymentsTransfer::CreatedBy::APIKey?,
        category: Increase::Models::RealTimePaymentsTransfer::CreatedBy::category,
        oauth_application: Increase::RealTimePaymentsTransfer::CreatedBy::OAuthApplication?,
        user: Increase::RealTimePaymentsTransfer::CreatedBy::User?
      }

      class CreatedBy < Increase::Internal::Type::BaseModel
        attr_accessor api_key: Increase::RealTimePaymentsTransfer::CreatedBy::APIKey?

        attr_accessor category: Increase::Models::RealTimePaymentsTransfer::CreatedBy::category

        attr_accessor oauth_application: Increase::RealTimePaymentsTransfer::CreatedBy::OAuthApplication?

        attr_accessor user: Increase::RealTimePaymentsTransfer::CreatedBy::User?

        def initialize: (api_key: Increase::RealTimePaymentsTransfer::CreatedBy::APIKey?, category: Increase::Models::RealTimePaymentsTransfer::CreatedBy::category, oauth_application: Increase::RealTimePaymentsTransfer::CreatedBy::OAuthApplication?, user: Increase::RealTimePaymentsTransfer::CreatedBy::User?) -> void

        def to_hash: () -> {
          api_key: Increase::RealTimePaymentsTransfer::CreatedBy::APIKey?,
          category: Increase::Models::RealTimePaymentsTransfer::CreatedBy::category,
          oauth_application: Increase::RealTimePaymentsTransfer::CreatedBy::OAuthApplication?,
          user: Increase::RealTimePaymentsTransfer::CreatedBy::User?
        }

        type api_key = {description: String?}

        class APIKey < Increase::Internal::Type::BaseModel
          attr_accessor description: String?

          def initialize: (description: String?) -> void

          def to_hash: () -> {description: String?}
        end

        type category = (:api_key | :oauth_application | :user)

        module Category
          extend Increase::Internal::Type::Enum

          # An API key. Details will be under the `api_key` object.
          API_KEY: :api_key

          # An OAuth application you connected to Increase. Details will be under the `oauth_application` object.
          OAUTH_APPLICATION: :oauth_application

          # A User in the Increase dashboard. Details will be under the `user` object.
          USER: :user

          def self?.values: () -> ::Array[Increase::Models::RealTimePaymentsTransfer::CreatedBy::category]
        end

        type oauth_application = {name: String}

        class OAuthApplication < Increase::Internal::Type::BaseModel
          attr_accessor name: String

          def initialize: (name: String) -> void

          def to_hash: () -> {name: String}
        end

        type user = {email: String}

        class User < Increase::Internal::Type::BaseModel
          attr_accessor email: String

          def initialize: (email: String) -> void

          def to_hash: () -> {email: String}
        end
      end

      type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: () -> ::Array[Increase::Models::RealTimePaymentsTransfer::currency]
      end

      type rejection = {
        reject_reason_additional_information: String?,
        reject_reason_code: Increase::Models::RealTimePaymentsTransfer::Rejection::reject_reason_code,
        rejected_at: Time?
      }

      class Rejection < Increase::Internal::Type::BaseModel
        attr_accessor reject_reason_additional_information: String?

        attr_accessor reject_reason_code: Increase::Models::RealTimePaymentsTransfer::Rejection::reject_reason_code

        attr_accessor rejected_at: Time?

        def initialize: (reject_reason_additional_information: String?, reject_reason_code: Increase::Models::RealTimePaymentsTransfer::Rejection::reject_reason_code, rejected_at: Time?) -> void

        def to_hash: () -> {
          reject_reason_additional_information: String?,
          reject_reason_code: Increase::Models::RealTimePaymentsTransfer::Rejection::reject_reason_code,
          rejected_at: Time?
        }

        type reject_reason_code = (:account_closed | :account_blocked | :invalid_creditor_account_type | :invalid_creditor_account_number | :invalid_creditor_financial_institution_identifier | :end_customer_deceased | :narrative | :transaction_forbidden | :transaction_type_not_supported | :unexpected_amount | :amount_exceeds_bank_limits | :invalid_creditor_address | :unknown_end_customer | :invalid_debtor_address | :timeout | :unsupported_message_for_recipient | :recipient_connection_not_available | :real_time_payments_suspended | :instructed_agent_signed_off | :processing_error | :other)

        module RejectReasonCode
          extend Increase::Internal::Type::Enum

          # The destination account is closed. Corresponds to the Real-Time Payments reason code `AC04`.
          ACCOUNT_CLOSED: :account_closed

          # The destination account is currently blocked from receiving transactions. Corresponds to the Real-Time Payments reason code `AC06`.
          ACCOUNT_BLOCKED: :account_blocked

          # The destination account is ineligible to receive Real-Time Payments transfers. Corresponds to the Real-Time Payments reason code `AC14`.
          INVALID_CREDITOR_ACCOUNT_TYPE: :invalid_creditor_account_type

          # The destination account does not exist. Corresponds to the Real-Time Payments reason code `AC03`.
          INVALID_CREDITOR_ACCOUNT_NUMBER: :invalid_creditor_account_number

          # The destination routing number is invalid. Corresponds to the Real-Time Payments reason code `RC04`.
          INVALID_CREDITOR_FINANCIAL_INSTITUTION_IDENTIFIER: :invalid_creditor_financial_institution_identifier

          # The destination account holder is deceased. Corresponds to the Real-Time Payments reason code `MD07`.
          END_CUSTOMER_DECEASED: :end_customer_deceased

          # The reason is provided as narrative information in the additional information field.
          NARRATIVE: :narrative

          # Real-Time Payments transfers are not allowed to the destination account. Corresponds to the Real-Time Payments reason code `AG01`.
          TRANSACTION_FORBIDDEN: :transaction_forbidden

          # Real-Time Payments transfers are not enabled for the destination account. Corresponds to the Real-Time Payments reason code `AG03`.
          TRANSACTION_TYPE_NOT_SUPPORTED: :transaction_type_not_supported

          # The amount of the transfer is different than expected by the recipient. Corresponds to the Real-Time Payments reason code `AM09`.
          UNEXPECTED_AMOUNT: :unexpected_amount

          # The amount is higher than the recipient is authorized to send or receive. Corresponds to the Real-Time Payments reason code `AM14`.
          AMOUNT_EXCEEDS_BANK_LIMITS: :amount_exceeds_bank_limits

          # The creditor's address is required, but missing or invalid. Corresponds to the Real-Time Payments reason code `BE04`.
          INVALID_CREDITOR_ADDRESS: :invalid_creditor_address

          # The specified creditor is unknown. Corresponds to the Real-Time Payments reason code `BE06`.
          UNKNOWN_END_CUSTOMER: :unknown_end_customer

          # The debtor's address is required, but missing or invalid. Corresponds to the Real-Time Payments reason code `BE07`.
          INVALID_DEBTOR_ADDRESS: :invalid_debtor_address

          # There was a timeout processing the transfer. Corresponds to the Real-Time Payments reason code `DS24`.
          TIMEOUT: :timeout

          # Real-Time Payments transfers are not enabled for the destination account. Corresponds to the Real-Time Payments reason code `NOAT`.
          UNSUPPORTED_MESSAGE_FOR_RECIPIENT: :unsupported_message_for_recipient

          # The destination financial institution is currently not connected to Real-Time Payments. Corresponds to the Real-Time Payments reason code `9912`.
          RECIPIENT_CONNECTION_NOT_AVAILABLE: :recipient_connection_not_available

          # Real-Time Payments is currently unavailable. Corresponds to the Real-Time Payments reason code `9948`.
          REAL_TIME_PAYMENTS_SUSPENDED: :real_time_payments_suspended

          # The destination financial institution is currently signed off of Real-Time Payments. Corresponds to the Real-Time Payments reason code `9910`.
          INSTRUCTED_AGENT_SIGNED_OFF: :instructed_agent_signed_off

          # The transfer was rejected due to an internal Increase issue. We have been notified.
          PROCESSING_ERROR: :processing_error

          # Some other error or issue has occurred.
          OTHER: :other

          def self?.values: () -> ::Array[Increase::Models::RealTimePaymentsTransfer::Rejection::reject_reason_code]
        end
      end

      type status = (:pending_approval | :canceled | :pending_reviewing | :requires_attention | :rejected | :pending_submission | :submitted | :complete)

      module Status
        extend Increase::Internal::Type::Enum

        # The transfer is pending approval.
        PENDING_APPROVAL: :pending_approval

        # The transfer has been canceled.
        CANCELED: :canceled

        # The transfer is pending review by Increase.
        PENDING_REVIEWING: :pending_reviewing

        # The transfer requires attention from an Increase operator.
        REQUIRES_ATTENTION: :requires_attention

        # The transfer was rejected by the network or the recipient's bank.
        REJECTED: :rejected

        # The transfer is queued to be submitted to Real-Time Payments.
        PENDING_SUBMISSION: :pending_submission

        # The transfer has been submitted and is pending a response from Real-Time Payments.
        SUBMITTED: :submitted

        # The transfer has been sent successfully and is complete.
        COMPLETE: :complete

        def self?.values: () -> ::Array[Increase::Models::RealTimePaymentsTransfer::status]
      end

      type submission = {submitted_at: Time?, transaction_identification: String}

      class Submission < Increase::Internal::Type::BaseModel
        attr_accessor submitted_at: Time?

        attr_accessor transaction_identification: String

        def initialize: (submitted_at: Time?, transaction_identification: String) -> void

        def to_hash: () -> {submitted_at: Time?, transaction_identification: String}
      end

      type type_ = :real_time_payments_transfer

      module Type
        extend Increase::Internal::Type::Enum

        REAL_TIME_PAYMENTS_TRANSFER: :real_time_payments_transfer

        def self?.values: () -> ::Array[Increase::Models::RealTimePaymentsTransfer::type_]
      end
    end
  end
end
