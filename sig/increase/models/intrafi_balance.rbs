module Increase
  module Models
    type intrafi_balance =
      {
        id: String,
        balances: ::Array[Increase::IntrafiBalance::Balance],
        currency: Increase::IntrafiBalance::currency,
        effective_date: Date,
        total_balance: Integer,
        type: Increase::IntrafiBalance::type_
      }

    class IntrafiBalance < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor balances: ::Array[Increase::IntrafiBalance::Balance]

      attr_accessor currency: Increase::IntrafiBalance::currency

      attr_accessor effective_date: Date

      attr_accessor total_balance: Integer

      attr_accessor type: Increase::IntrafiBalance::type_

      def initialize: (
        id: String,
        balances: ::Array[Increase::IntrafiBalance::Balance],
        currency: Increase::IntrafiBalance::currency,
        effective_date: Date,
        total_balance: Integer,
        type: Increase::IntrafiBalance::type_
      ) -> void

      type balance =
        {
          id: String,
          balance: Integer,
          bank: String,
          bank_location: Increase::IntrafiBalance::Balance::BankLocation?,
          fdic_certificate_number: String
        }

      class Balance < Increase::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor balance: Integer

        attr_accessor bank: String

        attr_accessor bank_location: Increase::IntrafiBalance::Balance::BankLocation?

        attr_accessor fdic_certificate_number: String

        def initialize: (
          id: String,
          balance: Integer,
          bank: String,
          bank_location: Increase::IntrafiBalance::Balance::BankLocation?,
          fdic_certificate_number: String
        ) -> void

        type bank_location = { city: String, state: String }

        class BankLocation < Increase::Internal::Type::BaseModel
          attr_accessor city: String

          attr_accessor state: String

          def initialize: (city: String, state: String) -> void
        end
      end

      type currency = :CAD | :CHF | :EUR | :GBP | :JPY | :USD

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: -> ::Array[Increase::IntrafiBalance::currency]
      end

      type type_ = :intrafi_balance

      module Type
        extend Increase::Internal::Type::Enum

        INTRAFI_BALANCE: :intrafi_balance

        def self?.values: -> ::Array[Increase::IntrafiBalance::type_]
      end
    end
  end
end
