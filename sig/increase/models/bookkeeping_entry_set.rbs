module Increase
  module Models
    type bookkeeping_entry_set =
      {
        id: String,
        created_at: Time,
        date: Time,
        entries: ::Array[Increase::Models::BookkeepingEntrySet::Entry],
        idempotency_key: String?,
        transaction_id: String?,
        type: Increase::Models::BookkeepingEntrySet::type_
      }

    class BookkeepingEntrySet < Increase::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor date: Time

      attr_accessor entries: ::Array[Increase::Models::BookkeepingEntrySet::Entry]

      attr_accessor idempotency_key: String?

      attr_accessor transaction_id: String?

      attr_accessor type: Increase::Models::BookkeepingEntrySet::type_

      def initialize: (
        id: String,
        created_at: Time,
        date: Time,
        entries: ::Array[Increase::Models::BookkeepingEntrySet::Entry],
        idempotency_key: String?,
        transaction_id: String?,
        type: Increase::Models::BookkeepingEntrySet::type_
      ) -> void

      def to_hash: -> Increase::Models::bookkeeping_entry_set

      type entry = { id: String, account_id: String, amount: Integer }

      class Entry < Increase::BaseModel
        attr_accessor id: String

        attr_accessor account_id: String

        attr_accessor amount: Integer

        def initialize: (
          id: String,
          account_id: String,
          amount: Integer
        ) -> void

        def to_hash: -> Increase::Models::BookkeepingEntrySet::entry
      end

      type type_ = :bookkeeping_entry_set

      module Type
        extend Increase::Enum

        BOOKKEEPING_ENTRY_SET: :bookkeeping_entry_set

        def self.values: -> ::Array[Increase::Models::BookkeepingEntrySet::type_]
      end
    end
  end
end
