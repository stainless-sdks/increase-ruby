module Increase
  module Models
    type pending_transaction = {
      id: String,
      account_id: String,
      amount: Integer,
      balance_impact: Increase::Models::PendingTransaction::balance_impact,
      completed_at: Time?,
      created_at: Time,
      currency: Increase::Models::PendingTransaction::currency,
      description: String,
      route_id: String?,
      route_type: Increase::Models::PendingTransaction::route_type?,
      source: Increase::PendingTransaction::Source,
      status: Increase::Models::PendingTransaction::status,
      type: Increase::Models::PendingTransaction::type_
    }

    class PendingTransaction < Increase::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor account_id: String

      attr_accessor amount: Integer

      attr_accessor balance_impact: Increase::Models::PendingTransaction::balance_impact

      attr_accessor completed_at: Time?

      attr_accessor created_at: Time

      attr_accessor currency: Increase::Models::PendingTransaction::currency

      attr_accessor description: String

      attr_accessor route_id: String?

      attr_accessor route_type: Increase::Models::PendingTransaction::route_type?

      attr_accessor source: Increase::PendingTransaction::Source

      attr_accessor status: Increase::Models::PendingTransaction::status

      attr_accessor type: Increase::Models::PendingTransaction::type_

      def initialize: (id: String, account_id: String, amount: Integer, balance_impact: Increase::Models::PendingTransaction::balance_impact, completed_at: Time?, created_at: Time, currency: Increase::Models::PendingTransaction::currency, description: String, route_id: String?, route_type: Increase::Models::PendingTransaction::route_type?, source: Increase::PendingTransaction::Source, status: Increase::Models::PendingTransaction::status, type: Increase::Models::PendingTransaction::type_) -> void

      def to_hash: () -> {
        id: String,
        account_id: String,
        amount: Integer,
        balance_impact: Increase::Models::PendingTransaction::balance_impact,
        completed_at: Time?,
        created_at: Time,
        currency: Increase::Models::PendingTransaction::currency,
        description: String,
        route_id: String?,
        route_type: Increase::Models::PendingTransaction::route_type?,
        source: Increase::PendingTransaction::Source,
        status: Increase::Models::PendingTransaction::status,
        type: Increase::Models::PendingTransaction::type_
      }

      type balance_impact = (:affects_available_balance | :none)

      module BalanceImpact
        extend Increase::Internal::Type::Enum

        # This Pending Transaction will decrement the available balance on the Account while its status is `pending`.
        AFFECTS_AVAILABLE_BALANCE: :affects_available_balance

        # This Pending Transaction does not affect the available balance on the Account.
        NONE: :none

        def self?.values: () -> ::Array[Increase::Models::PendingTransaction::balance_impact]
      end

      type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

      module Currency
        extend Increase::Internal::Type::Enum

        # Canadian Dollar (CAD)
        CAD: :CAD

        # Swiss Franc (CHF)
        CHF: :CHF

        # Euro (EUR)
        EUR: :EUR

        # British Pound (GBP)
        GBP: :GBP

        # Japanese Yen (JPY)
        JPY: :JPY

        # US Dollar (USD)
        USD: :USD

        def self?.values: () -> ::Array[Increase::Models::PendingTransaction::currency]
      end

      type route_type = (:account_number | :card | :lockbox)

      module RouteType
        extend Increase::Internal::Type::Enum

        # An Account Number.
        ACCOUNT_NUMBER: :account_number

        # A Card.
        CARD: :card

        # A Lockbox.
        LOCKBOX: :lockbox

        def self?.values: () -> ::Array[Increase::Models::PendingTransaction::route_type]
      end

      type source = {
        account_transfer_instruction: Increase::PendingTransaction::Source::AccountTransferInstruction?,
        ach_transfer_instruction: Increase::PendingTransaction::Source::ACHTransferInstruction?,
        card_authorization: Increase::PendingTransaction::Source::CardAuthorization?,
        category: Increase::Models::PendingTransaction::Source::category,
        check_deposit_instruction: Increase::PendingTransaction::Source::CheckDepositInstruction?,
        check_transfer_instruction: Increase::PendingTransaction::Source::CheckTransferInstruction?,
        inbound_funds_hold: Increase::PendingTransaction::Source::InboundFundsHold?,
        inbound_wire_transfer_reversal: Increase::PendingTransaction::Source::InboundWireTransferReversal?,
        other: top?,
        outbound_card_push_transfer_instruction: Increase::PendingTransaction::Source::OutboundCardPushTransferInstruction?,
        real_time_payments_transfer_instruction: Increase::PendingTransaction::Source::RealTimePaymentsTransferInstruction?,
        swift_transfer_instruction: Increase::PendingTransaction::Source::SwiftTransferInstruction?,
        user_initiated_hold: top?,
        wire_transfer_instruction: Increase::PendingTransaction::Source::WireTransferInstruction?
      }

      class Source < Increase::Internal::Type::BaseModel
        attr_accessor account_transfer_instruction: Increase::PendingTransaction::Source::AccountTransferInstruction?

        attr_accessor ach_transfer_instruction: Increase::PendingTransaction::Source::ACHTransferInstruction?

        attr_accessor card_authorization: Increase::PendingTransaction::Source::CardAuthorization?

        attr_accessor category: Increase::Models::PendingTransaction::Source::category

        attr_accessor check_deposit_instruction: Increase::PendingTransaction::Source::CheckDepositInstruction?

        attr_accessor check_transfer_instruction: Increase::PendingTransaction::Source::CheckTransferInstruction?

        attr_accessor inbound_funds_hold: Increase::PendingTransaction::Source::InboundFundsHold?

        attr_accessor inbound_wire_transfer_reversal: Increase::PendingTransaction::Source::InboundWireTransferReversal?

        attr_accessor other: top?

        attr_accessor outbound_card_push_transfer_instruction: Increase::PendingTransaction::Source::OutboundCardPushTransferInstruction?

        attr_accessor real_time_payments_transfer_instruction: Increase::PendingTransaction::Source::RealTimePaymentsTransferInstruction?

        attr_accessor swift_transfer_instruction: Increase::PendingTransaction::Source::SwiftTransferInstruction?

        attr_accessor user_initiated_hold: top?

        attr_accessor wire_transfer_instruction: Increase::PendingTransaction::Source::WireTransferInstruction?

        def initialize: (account_transfer_instruction: Increase::PendingTransaction::Source::AccountTransferInstruction?, ach_transfer_instruction: Increase::PendingTransaction::Source::ACHTransferInstruction?, card_authorization: Increase::PendingTransaction::Source::CardAuthorization?, category: Increase::Models::PendingTransaction::Source::category, check_deposit_instruction: Increase::PendingTransaction::Source::CheckDepositInstruction?, check_transfer_instruction: Increase::PendingTransaction::Source::CheckTransferInstruction?, inbound_funds_hold: Increase::PendingTransaction::Source::InboundFundsHold?, inbound_wire_transfer_reversal: Increase::PendingTransaction::Source::InboundWireTransferReversal?, other: top?, outbound_card_push_transfer_instruction: Increase::PendingTransaction::Source::OutboundCardPushTransferInstruction?, real_time_payments_transfer_instruction: Increase::PendingTransaction::Source::RealTimePaymentsTransferInstruction?, swift_transfer_instruction: Increase::PendingTransaction::Source::SwiftTransferInstruction?, user_initiated_hold: top?, wire_transfer_instruction: Increase::PendingTransaction::Source::WireTransferInstruction?) -> void

        def to_hash: () -> {
          account_transfer_instruction: Increase::PendingTransaction::Source::AccountTransferInstruction?,
          ach_transfer_instruction: Increase::PendingTransaction::Source::ACHTransferInstruction?,
          card_authorization: Increase::PendingTransaction::Source::CardAuthorization?,
          category: Increase::Models::PendingTransaction::Source::category,
          check_deposit_instruction: Increase::PendingTransaction::Source::CheckDepositInstruction?,
          check_transfer_instruction: Increase::PendingTransaction::Source::CheckTransferInstruction?,
          inbound_funds_hold: Increase::PendingTransaction::Source::InboundFundsHold?,
          inbound_wire_transfer_reversal: Increase::PendingTransaction::Source::InboundWireTransferReversal?,
          other: top?,
          outbound_card_push_transfer_instruction: Increase::PendingTransaction::Source::OutboundCardPushTransferInstruction?,
          real_time_payments_transfer_instruction: Increase::PendingTransaction::Source::RealTimePaymentsTransferInstruction?,
          swift_transfer_instruction: Increase::PendingTransaction::Source::SwiftTransferInstruction?,
          user_initiated_hold: top?,
          wire_transfer_instruction: Increase::PendingTransaction::Source::WireTransferInstruction?
        }

        type account_transfer_instruction = {
          amount: Integer,
          currency: Increase::Models::PendingTransaction::Source::AccountTransferInstruction::currency,
          transfer_id: String
        }

        class AccountTransferInstruction < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor currency: Increase::Models::PendingTransaction::Source::AccountTransferInstruction::currency

          attr_accessor transfer_id: String

          def initialize: (amount: Integer, currency: Increase::Models::PendingTransaction::Source::AccountTransferInstruction::currency, transfer_id: String) -> void

          def to_hash: () -> {
            amount: Integer,
            currency: Increase::Models::PendingTransaction::Source::AccountTransferInstruction::currency,
            transfer_id: String
          }

          type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::AccountTransferInstruction::currency]
          end
        end

        type ach_transfer_instruction = {amount: Integer, transfer_id: String}

        class ACHTransferInstruction < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor transfer_id: String

          def initialize: (amount: Integer, transfer_id: String) -> void

          def to_hash: () -> {amount: Integer, transfer_id: String}
        end

        type card_authorization = {
          id: String,
          actioner: Increase::Models::PendingTransaction::Source::CardAuthorization::actioner,
          amount: Integer,
          card_payment_id: String,
          currency: Increase::Models::PendingTransaction::Source::CardAuthorization::currency,
          digital_wallet_token_id: String?,
          direction: Increase::Models::PendingTransaction::Source::CardAuthorization::direction,
          expires_at: Time,
          merchant_acceptor_id: String,
          merchant_category_code: String,
          merchant_city: String?,
          merchant_country: String,
          merchant_descriptor: String,
          merchant_postal_code: String?,
          merchant_state: String?,
          network_details: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails,
          network_identifiers: Increase::PendingTransaction::Source::CardAuthorization::NetworkIdentifiers,
          network_risk_score: Integer?,
          pending_transaction_id: String?,
          physical_card_id: String?,
          presentment_amount: Integer,
          presentment_currency: String,
          processing_category: Increase::Models::PendingTransaction::Source::CardAuthorization::processing_category,
          real_time_decision_id: String?,
          terminal_id: String?,
          type: Increase::Models::PendingTransaction::Source::CardAuthorization::type_,
          verification: Increase::PendingTransaction::Source::CardAuthorization::Verification
        }

        class CardAuthorization < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor actioner: Increase::Models::PendingTransaction::Source::CardAuthorization::actioner

          attr_accessor amount: Integer

          attr_accessor card_payment_id: String

          attr_accessor currency: Increase::Models::PendingTransaction::Source::CardAuthorization::currency

          attr_accessor digital_wallet_token_id: String?

          attr_accessor direction: Increase::Models::PendingTransaction::Source::CardAuthorization::direction

          attr_accessor expires_at: Time

          attr_accessor merchant_acceptor_id: String

          attr_accessor merchant_category_code: String

          attr_accessor merchant_city: String?

          attr_accessor merchant_country: String

          attr_accessor merchant_descriptor: String

          attr_accessor merchant_postal_code: String?

          attr_accessor merchant_state: String?

          attr_accessor network_details: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails

          attr_accessor network_identifiers: Increase::PendingTransaction::Source::CardAuthorization::NetworkIdentifiers

          attr_accessor network_risk_score: Integer?

          attr_accessor pending_transaction_id: String?

          attr_accessor physical_card_id: String?

          attr_accessor presentment_amount: Integer

          attr_accessor presentment_currency: String

          attr_accessor processing_category: Increase::Models::PendingTransaction::Source::CardAuthorization::processing_category

          attr_accessor real_time_decision_id: String?

          attr_accessor terminal_id: String?

          attr_accessor type: Increase::Models::PendingTransaction::Source::CardAuthorization::type_

          attr_accessor verification: Increase::PendingTransaction::Source::CardAuthorization::Verification

          def initialize: (id: String, actioner: Increase::Models::PendingTransaction::Source::CardAuthorization::actioner, amount: Integer, card_payment_id: String, currency: Increase::Models::PendingTransaction::Source::CardAuthorization::currency, digital_wallet_token_id: String?, direction: Increase::Models::PendingTransaction::Source::CardAuthorization::direction, expires_at: Time, merchant_acceptor_id: String, merchant_category_code: String, merchant_city: String?, merchant_country: String, merchant_descriptor: String, merchant_postal_code: String?, merchant_state: String?, network_details: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails, network_identifiers: Increase::PendingTransaction::Source::CardAuthorization::NetworkIdentifiers, network_risk_score: Integer?, pending_transaction_id: String?, physical_card_id: String?, presentment_amount: Integer, presentment_currency: String, processing_category: Increase::Models::PendingTransaction::Source::CardAuthorization::processing_category, real_time_decision_id: String?, terminal_id: String?, type: Increase::Models::PendingTransaction::Source::CardAuthorization::type_, verification: Increase::PendingTransaction::Source::CardAuthorization::Verification) -> void

          def to_hash: () -> {
            id: String,
            actioner: Increase::Models::PendingTransaction::Source::CardAuthorization::actioner,
            amount: Integer,
            card_payment_id: String,
            currency: Increase::Models::PendingTransaction::Source::CardAuthorization::currency,
            digital_wallet_token_id: String?,
            direction: Increase::Models::PendingTransaction::Source::CardAuthorization::direction,
            expires_at: Time,
            merchant_acceptor_id: String,
            merchant_category_code: String,
            merchant_city: String?,
            merchant_country: String,
            merchant_descriptor: String,
            merchant_postal_code: String?,
            merchant_state: String?,
            network_details: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails,
            network_identifiers: Increase::PendingTransaction::Source::CardAuthorization::NetworkIdentifiers,
            network_risk_score: Integer?,
            pending_transaction_id: String?,
            physical_card_id: String?,
            presentment_amount: Integer,
            presentment_currency: String,
            processing_category: Increase::Models::PendingTransaction::Source::CardAuthorization::processing_category,
            real_time_decision_id: String?,
            terminal_id: String?,
            type: Increase::Models::PendingTransaction::Source::CardAuthorization::type_,
            verification: Increase::PendingTransaction::Source::CardAuthorization::Verification
          }

          type actioner = (:user | :increase | :network)

          module Actioner
            extend Increase::Internal::Type::Enum

            # This object was actioned by the user through a real-time decision.
            USER: :user

            # This object was actioned by Increase without user intervention.
            INCREASE: :increase

            # This object was actioned by the network, through stand-in processing.
            NETWORK: :network

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CardAuthorization::actioner]
          end

          type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CardAuthorization::currency]
          end

          type direction = (:settlement | :refund)

          module Direction
            extend Increase::Internal::Type::Enum

            # A regular card authorization where funds are debited from the cardholder.
            SETTLEMENT: :settlement

            # A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder.
            REFUND: :refund

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CardAuthorization::direction]
          end

          type network_details = {
            category: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::category,
            visa: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa?
          }

          class NetworkDetails < Increase::Internal::Type::BaseModel
            attr_accessor category: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::category

            attr_accessor visa: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa?

            def initialize: (category: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::category, visa: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa?) -> void

            def to_hash: () -> {
              category: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::category,
              visa: Increase::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa?
            }

            type category = :visa

            module Category
              extend Increase::Internal::Type::Enum

              # Visa
              VISA: :visa

              def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::category]
            end

            type visa = {
              electronic_commerce_indicator: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?,
              point_of_service_entry_mode: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?,
              stand_in_processing_reason: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?
            }

            class Visa < Increase::Internal::Type::BaseModel
              attr_accessor electronic_commerce_indicator: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?

              attr_accessor point_of_service_entry_mode: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?

              attr_accessor stand_in_processing_reason: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?

              def initialize: (electronic_commerce_indicator: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?, point_of_service_entry_mode: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?, stand_in_processing_reason: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?) -> void

              def to_hash: () -> {
                electronic_commerce_indicator: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator?,
                point_of_service_entry_mode: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode?,
                stand_in_processing_reason: Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason?
              }

              type electronic_commerce_indicator = (:mail_phone_order | :recurring | :installment | :unknown_mail_phone_order | :secure_electronic_commerce | :non_authenticated_security_transaction_at_3ds_capable_merchant | :non_authenticated_security_transaction | :non_secure_transaction)

              module ElectronicCommerceIndicator
                extend Increase::Internal::Type::Enum

                # Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.
                MAIL_PHONE_ORDER: :mail_phone_order

                # Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.
                RECURRING: :recurring

                # Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.
                INSTALLMENT: :installment

                # Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.
                UNKNOWN_MAIL_PHONE_ORDER: :unknown_mail_phone_order

                # Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure
                SECURE_ELECTRONIC_COMMERCE: :secure_electronic_commerce

                # Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.
                NON_AUTHENTICATED_SECURITY_TRANSACTION_AT_3DS_CAPABLE_MERCHANT: :non_authenticated_security_transaction_at_3ds_capable_merchant

                # Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.
                NON_AUTHENTICATED_SECURITY_TRANSACTION: :non_authenticated_security_transaction

                # Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection.
                NON_SECURE_TRANSACTION: :non_secure_transaction

                def self?.values: () -> ::Array[
                  Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::electronic_commerce_indicator
                ]
              end

              type point_of_service_entry_mode = (:unknown | :manual | :magnetic_stripe_no_cvv | :optical_code | :integrated_circuit_card | :contactless | :credential_on_file | :magnetic_stripe | :contactless_magnetic_stripe | :integrated_circuit_card_no_cvv)

              module PointOfServiceEntryMode
                extend Increase::Internal::Type::Enum

                # Unknown
                UNKNOWN: :unknown

                # Manual key entry
                MANUAL: :manual

                # Magnetic stripe read, without card verification value
                MAGNETIC_STRIPE_NO_CVV: :magnetic_stripe_no_cvv

                # Optical code
                OPTICAL_CODE: :optical_code

                # Contact chip card
                INTEGRATED_CIRCUIT_CARD: :integrated_circuit_card

                # Contactless read of chip card
                CONTACTLESS: :contactless

                # Transaction initiated using a credential that has previously been stored on file
                CREDENTIAL_ON_FILE: :credential_on_file

                # Magnetic stripe read
                MAGNETIC_STRIPE: :magnetic_stripe

                # Contactless read of magnetic stripe data
                CONTACTLESS_MAGNETIC_STRIPE: :contactless_magnetic_stripe

                # Contact chip card, without card verification value
                INTEGRATED_CIRCUIT_CARD_NO_CVV: :integrated_circuit_card_no_cvv

                def self?.values: () -> ::Array[
                  Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::point_of_service_entry_mode
                ]
              end

              type stand_in_processing_reason = (:issuer_error | :invalid_physical_card | :invalid_cardholder_authentication_verification_value | :internal_visa_error | :merchant_transaction_advisory_service_authentication_required | :payment_fraud_disruption_acquirer_block | :other)

              module StandInProcessingReason
                extend Increase::Internal::Type::Enum

                # Increase failed to process the authorization in a timely manner.
                ISSUER_ERROR: :issuer_error

                # The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.
                INVALID_PHYSICAL_CARD: :invalid_physical_card

                # The 3DS cardholder authentication verification value was invalid.
                INVALID_CARDHOLDER_AUTHENTICATION_VERIFICATION_VALUE: :invalid_cardholder_authentication_verification_value

                # An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.
                INTERNAL_VISA_ERROR: :internal_visa_error

                # The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.
                MERCHANT_TRANSACTION_ADVISORY_SERVICE_AUTHENTICATION_REQUIRED: :merchant_transaction_advisory_service_authentication_required

                # The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.
                PAYMENT_FRAUD_DISRUPTION_ACQUIRER_BLOCK: :payment_fraud_disruption_acquirer_block

                # An unspecific reason for stand-in processing.
                OTHER: :other

                def self?.values: () -> ::Array[
                  Increase::Models::PendingTransaction::Source::CardAuthorization::NetworkDetails::Visa::stand_in_processing_reason
                ]
              end
            end
          end

          type network_identifiers = {retrieval_reference_number: String?, trace_number: String?, transaction_id: String?}

          class NetworkIdentifiers < Increase::Internal::Type::BaseModel
            attr_accessor retrieval_reference_number: String?

            attr_accessor trace_number: String?

            attr_accessor transaction_id: String?

            def initialize: (retrieval_reference_number: String?, trace_number: String?, transaction_id: String?) -> void

            def to_hash: () -> {retrieval_reference_number: String?, trace_number: String?, transaction_id: String?}
          end

          type processing_category = (:account_funding | :automatic_fuel_dispenser | :bill_payment | :original_credit | :purchase | :quasi_cash | :refund)

          module ProcessingCategory
            extend Increase::Internal::Type::Enum

            # Account funding transactions are transactions used to e.g., fund an account or transfer funds between accounts.
            ACCOUNT_FUNDING: :account_funding

            # Automatic fuel dispenser authorizations occur when a card is used at a gas pump, prior to the actual transaction amount being known. They are followed by an advice message that updates the amount of the pending transaction.
            AUTOMATIC_FUEL_DISPENSER: :automatic_fuel_dispenser

            # A transaction used to pay a bill.
            BILL_PAYMENT: :bill_payment

            # Original credit transactions are used to send money to a cardholder.
            ORIGINAL_CREDIT: :original_credit

            # A regular purchase.
            PURCHASE: :purchase

            # Quasi-cash transactions represent purchases of items which may be convertible to cash.
            QUASI_CASH: :quasi_cash

            # A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder.
            REFUND: :refund

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CardAuthorization::processing_category]
          end

          type type_ = :card_authorization

          module Type
            extend Increase::Internal::Type::Enum

            CARD_AUTHORIZATION: :card_authorization

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CardAuthorization::type_]
          end

          type verification = {
            card_verification_code: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode,
            cardholder_address: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress
          }

          class Verification < Increase::Internal::Type::BaseModel
            attr_accessor card_verification_code: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode

            attr_accessor cardholder_address: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress

            def initialize: (card_verification_code: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode, cardholder_address: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress) -> void

            def to_hash: () -> {
              card_verification_code: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode,
              cardholder_address: Increase::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress
            }

            type card_verification_code = {
              result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode::result
            }

            class CardVerificationCode < Increase::Internal::Type::BaseModel
              attr_accessor result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode::result

              def initialize: (result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode::result) -> void

              def to_hash: () -> {
                result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode::result
              }

              type result = (:not_checked | :match | :no_match)

              module Result
                extend Increase::Internal::Type::Enum

                # No card verification code was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # The card verification code matched the one on file.
                MATCH: :match

                # The card verification code did not match the one on file.
                NO_MATCH: :no_match

                def self?.values: () -> ::Array[
                  Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardVerificationCode::result
                ]
              end
            end

            type cardholder_address = {
              actual_line1: String?,
              actual_postal_code: String?,
              provided_line1: String?,
              provided_postal_code: String?,
              result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress::result
            }

            class CardholderAddress < Increase::Internal::Type::BaseModel
              attr_accessor actual_line1: String?

              attr_accessor actual_postal_code: String?

              attr_accessor provided_line1: String?

              attr_accessor provided_postal_code: String?

              attr_accessor result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress::result

              def initialize: (actual_line1: String?, actual_postal_code: String?, provided_line1: String?, provided_postal_code: String?, result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress::result) -> void

              def to_hash: () -> {
                actual_line1: String?,
                actual_postal_code: String?,
                provided_line1: String?,
                provided_postal_code: String?,
                result: Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress::result
              }

              type result = (:not_checked | :postal_code_match_address_not_checked | :postal_code_match_address_no_match | :postal_code_no_match_address_match | :match | :no_match)

              module Result
                extend Increase::Internal::Type::Enum

                # No address was provided in the authorization request.
                NOT_CHECKED: :not_checked

                # Postal code matches, but the street address was not verified.
                POSTAL_CODE_MATCH_ADDRESS_NOT_CHECKED: :postal_code_match_address_not_checked

                # Postal code matches, but the street address does not match.
                POSTAL_CODE_MATCH_ADDRESS_NO_MATCH: :postal_code_match_address_no_match

                # Postal code does not match, but the street address matches.
                POSTAL_CODE_NO_MATCH_ADDRESS_MATCH: :postal_code_no_match_address_match

                # Postal code and street address match.
                MATCH: :match

                # Postal code and street address do not match.
                NO_MATCH: :no_match

                def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CardAuthorization::Verification::CardholderAddress::result]
              end
            end
          end
        end

        type category = (:account_transfer_instruction | :ach_transfer_instruction | :card_authorization | :check_deposit_instruction | :check_transfer_instruction | :inbound_funds_hold | :user_initiated_hold | :real_time_payments_transfer_instruction | :wire_transfer_instruction | :inbound_wire_transfer_reversal | :swift_transfer_instruction | :outbound_card_push_transfer_instruction | :other)

        module Category
          extend Increase::Internal::Type::Enum

          # Account Transfer Instruction: details will be under the `account_transfer_instruction` object.
          ACCOUNT_TRANSFER_INSTRUCTION: :account_transfer_instruction

          # ACH Transfer Instruction: details will be under the `ach_transfer_instruction` object.
          ACH_TRANSFER_INSTRUCTION: :ach_transfer_instruction

          # Card Authorization: details will be under the `card_authorization` object.
          CARD_AUTHORIZATION: :card_authorization

          # Check Deposit Instruction: details will be under the `check_deposit_instruction` object.
          CHECK_DEPOSIT_INSTRUCTION: :check_deposit_instruction

          # Check Transfer Instruction: details will be under the `check_transfer_instruction` object.
          CHECK_TRANSFER_INSTRUCTION: :check_transfer_instruction

          # Inbound Funds Hold: details will be under the `inbound_funds_hold` object.
          INBOUND_FUNDS_HOLD: :inbound_funds_hold

          # User Initiated Hold: details will be under the `user_initiated_hold` object.
          USER_INITIATED_HOLD: :user_initiated_hold

          # Real-Time Payments Transfer Instruction: details will be under the `real_time_payments_transfer_instruction` object.
          REAL_TIME_PAYMENTS_TRANSFER_INSTRUCTION: :real_time_payments_transfer_instruction

          # Wire Transfer Instruction: details will be under the `wire_transfer_instruction` object.
          WIRE_TRANSFER_INSTRUCTION: :wire_transfer_instruction

          # Inbound Wire Transfer Reversal: details will be under the `inbound_wire_transfer_reversal` object.
          INBOUND_WIRE_TRANSFER_REVERSAL: :inbound_wire_transfer_reversal

          # Swift Transfer Instruction: details will be under the `swift_transfer_instruction` object.
          SWIFT_TRANSFER_INSTRUCTION: :swift_transfer_instruction

          # Outbound Card Push Transfer Instruction: details will be under the `outbound_card_push_transfer_instruction` object.
          OUTBOUND_CARD_PUSH_TRANSFER_INSTRUCTION: :outbound_card_push_transfer_instruction

          # The Pending Transaction was made for an undocumented or deprecated reason.
          OTHER: :other

          def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::category]
        end

        type check_deposit_instruction = {
          amount: Integer,
          back_image_file_id: String?,
          check_deposit_id: String?,
          currency: Increase::Models::PendingTransaction::Source::CheckDepositInstruction::currency,
          front_image_file_id: String
        }

        class CheckDepositInstruction < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor back_image_file_id: String?

          attr_accessor check_deposit_id: String?

          attr_accessor currency: Increase::Models::PendingTransaction::Source::CheckDepositInstruction::currency

          attr_accessor front_image_file_id: String

          def initialize: (amount: Integer, back_image_file_id: String?, check_deposit_id: String?, currency: Increase::Models::PendingTransaction::Source::CheckDepositInstruction::currency, front_image_file_id: String) -> void

          def to_hash: () -> {
            amount: Integer,
            back_image_file_id: String?,
            check_deposit_id: String?,
            currency: Increase::Models::PendingTransaction::Source::CheckDepositInstruction::currency,
            front_image_file_id: String
          }

          type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CheckDepositInstruction::currency]
          end
        end

        type check_transfer_instruction = {
          amount: Integer,
          currency: Increase::Models::PendingTransaction::Source::CheckTransferInstruction::currency,
          transfer_id: String
        }

        class CheckTransferInstruction < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor currency: Increase::Models::PendingTransaction::Source::CheckTransferInstruction::currency

          attr_accessor transfer_id: String

          def initialize: (amount: Integer, currency: Increase::Models::PendingTransaction::Source::CheckTransferInstruction::currency, transfer_id: String) -> void

          def to_hash: () -> {
            amount: Integer,
            currency: Increase::Models::PendingTransaction::Source::CheckTransferInstruction::currency,
            transfer_id: String
          }

          type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::CheckTransferInstruction::currency]
          end
        end

        type inbound_funds_hold = {
          id: String,
          amount: Integer,
          automatically_releases_at: Time,
          created_at: Time,
          currency: Increase::Models::PendingTransaction::Source::InboundFundsHold::currency,
          held_transaction_id: String?,
          pending_transaction_id: String?,
          released_at: Time?,
          status: Increase::Models::PendingTransaction::Source::InboundFundsHold::status,
          type: Increase::Models::PendingTransaction::Source::InboundFundsHold::type_
        }

        class InboundFundsHold < Increase::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount: Integer

          attr_accessor automatically_releases_at: Time

          attr_accessor created_at: Time

          attr_accessor currency: Increase::Models::PendingTransaction::Source::InboundFundsHold::currency

          attr_accessor held_transaction_id: String?

          attr_accessor pending_transaction_id: String?

          attr_accessor released_at: Time?

          attr_accessor status: Increase::Models::PendingTransaction::Source::InboundFundsHold::status

          attr_accessor type: Increase::Models::PendingTransaction::Source::InboundFundsHold::type_

          def initialize: (id: String, amount: Integer, automatically_releases_at: Time, created_at: Time, currency: Increase::Models::PendingTransaction::Source::InboundFundsHold::currency, held_transaction_id: String?, pending_transaction_id: String?, released_at: Time?, status: Increase::Models::PendingTransaction::Source::InboundFundsHold::status, type: Increase::Models::PendingTransaction::Source::InboundFundsHold::type_) -> void

          def to_hash: () -> {
            id: String,
            amount: Integer,
            automatically_releases_at: Time,
            created_at: Time,
            currency: Increase::Models::PendingTransaction::Source::InboundFundsHold::currency,
            held_transaction_id: String?,
            pending_transaction_id: String?,
            released_at: Time?,
            status: Increase::Models::PendingTransaction::Source::InboundFundsHold::status,
            type: Increase::Models::PendingTransaction::Source::InboundFundsHold::type_
          }

          type currency = (:CAD | :CHF | :EUR | :GBP | :JPY | :USD)

          module Currency
            extend Increase::Internal::Type::Enum

            # Canadian Dollar (CAD)
            CAD: :CAD

            # Swiss Franc (CHF)
            CHF: :CHF

            # Euro (EUR)
            EUR: :EUR

            # British Pound (GBP)
            GBP: :GBP

            # Japanese Yen (JPY)
            JPY: :JPY

            # US Dollar (USD)
            USD: :USD

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::InboundFundsHold::currency]
          end

          type status = (:held | :complete)

          module Status
            extend Increase::Internal::Type::Enum

            # Funds are still being held.
            HELD: :held

            # Funds have been released.
            COMPLETE: :complete

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::InboundFundsHold::status]
          end

          type type_ = :inbound_funds_hold

          module Type
            extend Increase::Internal::Type::Enum

            INBOUND_FUNDS_HOLD: :inbound_funds_hold

            def self?.values: () -> ::Array[Increase::Models::PendingTransaction::Source::InboundFundsHold::type_]
          end
        end

        type inbound_wire_transfer_reversal = {inbound_wire_transfer_id: String}

        class InboundWireTransferReversal < Increase::Internal::Type::BaseModel
          attr_accessor inbound_wire_transfer_id: String

          def initialize: (inbound_wire_transfer_id: String) -> void

          def to_hash: () -> {inbound_wire_transfer_id: String}
        end

        type outbound_card_push_transfer_instruction = {amount: Integer, transfer_id: String}

        class OutboundCardPushTransferInstruction < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor transfer_id: String

          def initialize: (amount: Integer, transfer_id: String) -> void

          def to_hash: () -> {amount: Integer, transfer_id: String}
        end

        type real_time_payments_transfer_instruction = {amount: Integer, transfer_id: String}

        class RealTimePaymentsTransferInstruction < Increase::Internal::Type::BaseModel
          attr_accessor amount: Integer

          attr_accessor transfer_id: String

          def initialize: (amount: Integer, transfer_id: String) -> void

          def to_hash: () -> {amount: Integer, transfer_id: String}
        end

        type swift_transfer_instruction = {transfer_id: String}

        class SwiftTransferInstruction < Increase::Internal::Type::BaseModel
          attr_accessor transfer_id: String

          def initialize: (transfer_id: String) -> void

          def to_hash: () -> {transfer_id: String}
        end

        type wire_transfer_instruction = {account_number: String, amount: Integer, message_to_recipient: String, routing_number: String, transfer_id: String}

        class WireTransferInstruction < Increase::Internal::Type::BaseModel
          attr_accessor account_number: String

          attr_accessor amount: Integer

          attr_accessor message_to_recipient: String

          attr_accessor routing_number: String

          attr_accessor transfer_id: String

          def initialize: (account_number: String, amount: Integer, message_to_recipient: String, routing_number: String, transfer_id: String) -> void

          def to_hash: () -> {account_number: String, amount: Integer, message_to_recipient: String, routing_number: String, transfer_id: String}
        end
      end

      type status = (:pending | :complete)

      module Status
        extend Increase::Internal::Type::Enum

        # The Pending Transaction is still awaiting confirmation.
        PENDING: :pending

        # The Pending Transaction is confirmed. An associated Transaction exists for this object. The Pending Transaction will no longer count against your balance and can generally be hidden from UIs, etc.
        COMPLETE: :complete

        def self?.values: () -> ::Array[Increase::Models::PendingTransaction::status]
      end

      type type_ = :pending_transaction

      module Type
        extend Increase::Internal::Type::Enum

        PENDING_TRANSACTION: :pending_transaction

        def self?.values: () -> ::Array[Increase::Models::PendingTransaction::type_]
      end
    end
  end
end
