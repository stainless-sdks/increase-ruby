module Increase
  module Models
    type lockbox_update_params =
      {
        description: String,
        recipient_name: String,
        status: Increase::Models::LockboxUpdateParams::status
      }
      & Increase::request_parameters

    class LockboxUpdateParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      attr_reader description: String?

      def description=: (String) -> String

      attr_reader recipient_name: String?

      def recipient_name=: (String) -> String

      attr_reader status: Increase::Models::LockboxUpdateParams::status?

      def status=: (
        Increase::Models::LockboxUpdateParams::status
      ) -> Increase::Models::LockboxUpdateParams::status

      def initialize:
        (
          description: String,
          recipient_name: String,
          status: Increase::Models::LockboxUpdateParams::status,
          request_options: Increase::request_opts
        ) -> void
        | (
          ?Increase::Models::lockbox_update_params | Increase::BaseModel data
        ) -> void

      def to_hash: -> Increase::Models::lockbox_update_params

      type status = :active | :inactive

      class Status < Increase::Enum
        # This Lockbox is active. Checks mailed to it will be deposited automatically.
        ACTIVE: :active

        # This Lockbox is inactive. Checks mailed to it will not be deposited.
        INACTIVE: :inactive

        def self.values: -> ::Array[Increase::Models::LockboxUpdateParams::status]
      end
    end
  end
end
