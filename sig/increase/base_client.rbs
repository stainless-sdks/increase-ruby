module Increase
  class BaseClient
    type request_components =
      {
        method: Symbol,
        path: String | ::Array[String],
        query: ::Hash[String, (::Array[String] | String)?]?,
        headers: ::Hash[String, String?]?,
        body: top?,
        unwrap: Symbol?,
        page: Class?,
        model: Increase::Converter::input?,
        options: Increase::request_opts?
      }

    type request_input =
      {
        method: Symbol,
        url: URI::Generic,
        headers: ::Hash[String, String],
        body: top,
        streaming: bool,
        max_retries: Integer,
        timeout: Float
      }

    MAX_REDIRECTS: 20

    PLATFORM_HEADERS: ::Hash[String, String]

    def self.validate!: (Increase::BaseClient::request_components req) -> void

    def self.should_retry?: (
      Integer status,
      headers: ::Hash[String, String]
    ) -> bool

    def self.follow_redirect: (
      Increase::BaseClient::request_input request,
      status: Integer,
      response_headers: ::Hash[String, String]
    ) -> Increase::BaseClient::request_input

    # @private
    attr_accessor requester: top

    def initialize: (
      base_url: String,
      timeout: Float,
      max_retries: Integer,
      initial_retry_delay: Float,
      max_retry_delay: Float,
      headers: ::Hash[String, String?],
      idempotency_header: String?
    ) -> void

    private def auth_headers: -> ::Hash[String, String]

    private def generate_idempotency_key: -> String

    private def build_request: (
      Increase::BaseClient::request_components req,
      Increase::request_options opts
    ) -> Increase::BaseClient::request_input

    private def retry_delay: (
      ::Hash[String, String] headers,
      retry_count: Integer
    ) -> Float

    private def send_request: (
      Increase::BaseClient::request_input request,
      redirect_count: Integer,
      retry_count: Integer,
      send_retry_header: bool
    ) -> [top, Enumerable[String]]

    private def parse_response: (
      Increase::BaseClient::request_components req,
      headers: ::Hash[String, String],
      stream: Enumerable[String]
    ) -> top

    def request:
      (
        Symbol method,
        String | ::Array[String] path,
        query: ::Hash[String, (::Array[String] | String)?]?,
        headers: ::Hash[String, String?]?,
        body: top?,
        unwrap: Symbol?,
        page: Class?,
        model: Increase::Converter::input?,
        options: Increase::request_opts?
      ) -> top
      | (Increase::BaseClient::request_components req) -> top

    def inspect: -> String
  end
end
