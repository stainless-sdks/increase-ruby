module Increase
  module Type
    module Union
      include Increase::Type::Converter

      private def self.known_variants: -> ::Array[[Symbol?, (^-> Increase::Type::Converter::input)]]

      def self.derefed_variants: -> ::Array[[Symbol?, top]]

      def self.variants: -> ::Array[top]

      private def self.discriminator: (Symbol property) -> void

      private def self.variant: (
        Symbol
        | ::Hash[Symbol, top]
        | ^-> Increase::Type::Converter::input
        | Increase::Type::Converter::input key,
        ?::Hash[Symbol, top]
        | ^-> Increase::Type::Converter::input
        | Increase::Type::Converter::input spec
      ) -> void

      private def self.resolve_variant: (
        top value
      ) -> Increase::Type::Converter::input?

      def ===: (top other) -> bool

      def ==: (top other) -> bool

      def coerce: (top value, state: Increase::Type::Converter::state) -> top

      def dump: (top value) -> top
    end
  end
end
