module Increase
  module Util
    def self?.primitive?: (top input) -> (bool | top)

    def self?.coerce_boolean: (top input) -> (bool | top)

    def self?.coerce_boolean!: (top input) -> bool?

    def self?.coerce_integer: (top input) -> (Integer | top)

    def self?.coerce_float: (top input) -> (Float | top)

    def self?.coerce_hash: (top input) -> (::Hash[top, top] | top)

    def self?.suppress: (*::Array[Exception] exceptions, sentinel: top?) { () -> top? } -> top?

    OMIT: top

    def self?.deep_merge: (*::Array[top] values, sentinel: top?, concat: bool) -> top

    def self?.dig: ((::Hash[Symbol, top] | ::Array[top] | top) data, (Symbol | Integer | ::Array[(Symbol | Integer)])? pick, ?top? sentinel) { () -> top? } -> top?

    def self?.uri_origin: (URI::Generic uri) -> String

    def self?.interpolate_path: ((String | ::Array[String]) path) -> String

    type parsed_uri = {scheme: String?, host: String?, port: Integer?, path: String?, query: ::Hash[String, ::Array[String]]}

    def self?.parse_uri: ((URI::Generic | String) url) -> Increase::Util::parsed_uri

    def self?.unparse_uri: (Increase::Util::parsed_uri parsed) -> URI::Generic

    def self?.join_parsed_uri: (Increase::Util::parsed_uri lhs, Increase::Util::parsed_uri rhs) -> URI::Generic

    def self?.decode_query: (String? query) -> ::Hash[String, ::Array[String]]

    def self?.encode_query: (::Hash[String, (::Array[String] | String)?]? query) -> String?

    def self?.normalized_headers: (*::Array[::Hash[String, (String | Integer)?]] headers) -> ::Hash[String, String]

    def self?.encode_content: (::Hash[String, String] headers, top body) -> top

    def self?.decode_content: (top response, suppress_error: bool) -> top

    def self?.encode_multipart_formdata: (StringIO io, boundary: String, key: (Symbol | String), val: top) -> void
  end
end
