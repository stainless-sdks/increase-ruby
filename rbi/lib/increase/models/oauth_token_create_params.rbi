# typed: strong

module Increase
  module Models
    class OAuthTokenCreateParams < Increase::BaseModel
      extend Increase::RequestParameters::Converter
      include Increase::RequestParameters

      # The credential you request in exchange for the code. In Production, this is
      #   always `authorization_code`. In Sandbox, you can pass either enum value.
      sig { returns(Increase::Models::OAuthTokenCreateParams::GrantType::OrSymbol) }
      def grant_type
      end

      sig do
        params(_: Increase::Models::OAuthTokenCreateParams::GrantType::OrSymbol)
          .returns(Increase::Models::OAuthTokenCreateParams::GrantType::OrSymbol)
      end
      def grant_type=(_)
      end

      # The public identifier for your application.
      sig { returns(T.nilable(String)) }
      def client_id
      end

      sig { params(_: String).returns(String) }
      def client_id=(_)
      end

      # The secret that confirms you own the application. This is redundent given that
      #   the request is made with your API key but it's a required component of OAuth
      #   2.0.
      sig { returns(T.nilable(String)) }
      def client_secret
      end

      sig { params(_: String).returns(String) }
      def client_secret=(_)
      end

      # The authorization code generated by the user and given to you as a query
      #   parameter.
      sig { returns(T.nilable(String)) }
      def code
      end

      sig { params(_: String).returns(String) }
      def code=(_)
      end

      # The production token you want to exchange for a sandbox token. This is only
      #   available in Sandbox. Set `grant_type` to `production_token` to use this
      #   parameter.
      sig { returns(T.nilable(String)) }
      def production_token
      end

      sig { params(_: String).returns(String) }
      def production_token=(_)
      end

      sig do
        params(
          grant_type: Increase::Models::OAuthTokenCreateParams::GrantType::OrSymbol,
          client_id: String,
          client_secret: String,
          code: String,
          production_token: String,
          request_options: T.any(Increase::RequestOptions, Increase::Util::AnyHash)
        )
          .returns(T.attached_class)
      end
      def self.new(grant_type:, client_id: nil, client_secret: nil, code: nil, production_token: nil, request_options: {})
      end

      sig do
        override
          .returns(
            {
              grant_type: Increase::Models::OAuthTokenCreateParams::GrantType::OrSymbol,
              client_id: String,
              client_secret: String,
              code: String,
              production_token: String,
              request_options: Increase::RequestOptions
            }
          )
      end
      def to_hash
      end

      # The credential you request in exchange for the code. In Production, this is
      #   always `authorization_code`. In Sandbox, you can pass either enum value.
      module GrantType
        extend Increase::Enum

        TaggedSymbol = T.type_alias { T.all(Symbol, Increase::Models::OAuthTokenCreateParams::GrantType) }
        OrSymbol =
          T.type_alias { T.any(Symbol, Increase::Models::OAuthTokenCreateParams::GrantType::TaggedSymbol) }

        # An OAuth authorization code.
        AUTHORIZATION_CODE =
          T.let(:authorization_code, Increase::Models::OAuthTokenCreateParams::GrantType::TaggedSymbol)

        # An OAuth production token.
        PRODUCTION_TOKEN =
          T.let(:production_token, Increase::Models::OAuthTokenCreateParams::GrantType::TaggedSymbol)

        class << self
          sig { override.returns(T::Array[Increase::Models::OAuthTokenCreateParams::GrantType::TaggedSymbol]) }
          def values
          end
        end
      end
    end
  end
end
