# Just to be safe, ensure nobody is mutating our internal strings.
Style/FrozenStringLiteralComment:
  EnforcedStyle: always

# Prefer double quotes so that interpolaiton can be easily added.
Style/StringLiterals:
  EnforcedStyle: double_quotes

# Most common style in Ruby.
Style/RegexpLiteral:
  EnforcedStyle: slashes
  AllowInnerSlashes: true

# Prefer explicit symbols for clarity; you can search for `:the_symbol`.
Style/SymbolArray:
  EnforcedStyle: brackets

# Nothing wrong with clear if statements.
Style/IfUnlessModifier:
  Enabled: false

# Unless is not neccisarily clearer.
Style/NegatedIf:
  Enabled: false

# We use these sparingly, where we anticipate future branches for the
# inner conditional.
Style/SoleNestedConditional:
  Enabled: false

# Allow explicit empty elses, for clarity.
Style/EmptyElse:
  Enabled: false

# Allow explicit ifs, especially for imperative use.
Style/SafeNavigation:
  Enabled: false

# We commonly use ENV['KEY'], it's OK.
Style/FetchEnvVar:
  Enabled: false

# Behaviour of alias_method is more predictable.
Style/Alias:
  EnforcedStyle: prefer_alias_method

# We prefer nested modules in lib/, but are currently using compact style for tests.
Style/ClassAndModuleChildren:
  Exclude:
    - test/**/*

# Set a reasonable line length; rely on other cops to correct long lines.
Layout/LineLength:
  Max: 110
  AllowedPatterns:
    - '^(\s*#)' # Comments for YARD docs: @param and similar.
    - '= Increase::Resources::\S+\.new\(client: (self|client)\)$' # Instantiating resources.
    - '^\s*(-> { )?Increase::Models::[a-zA-Z0-9:]+( })?$' # Line is entirely a reference to a fully-qualified Model.

# Start the assignment on the same line variable is mentioned.
Layout/MultilineAssignmentLayout:
  EnforcedStyle: same_line

# Don't leave complex assignment values hanging off to the right.
Layout/EndAlignment:
  EnforcedStyleAlignWith: variable

# Don't require this extra line break, it can be excessive.
Layout/EmptyLineAfterGuardClause:
  Enabled: false

# For arrays, hashes, method arguments, and method params, if they are broken onto multiple lines:
# * Should have one element per line.
# * Should have a line break before the first element.
Layout/MultilineArrayLineBreaks:
  Enabled: true
Layout/FirstArrayElementLineBreak:
  Enabled: true
Layout/MultilineHashKeyLineBreaks:
  Enabled: true
Layout/FirstHashElementLineBreak:
  Enabled: true
Layout/MultilineMethodArgumentLineBreaks:
  Enabled: true
Layout/FirstMethodArgumentLineBreak:
  Enabled: true
Layout/MultilineMethodParameterLineBreaks:
  Enabled: true
Layout/FirstMethodParameterLineBreak:
  Enabled: true

# Prefer compact hash literals.
Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: no_space

# These cops are not as applicaple to generated code.
Metrics/ParameterLists:
  Enabled: false
Metrics/MethodLength:
  Enabled: false
Metrics/ClassLength:
  Enabled: false

# These cops are too aggressive for us or now, but we may want to address them
# later.
Metrics/CyclomaticComplexity:
  Enabled: false
Metrics/PerceivedComplexity:
  Enabled: false
Metrics/AbcSize:
  Enabled: false

# We should go back and add these docs, but ignore for now.
Style/Documentation:
  Enabled: false

# Explicitly disable pending cops for now. This is the default behaviour but
# this avoids a large warning every time we run it.
# Stop RuboCop nagging about rubocop-rake.
# Ensure that RuboCop validates according to the lowest version of Ruby that we support.
AllCops:
  NewCops: enable
  SuggestExtensions: false
  TargetRubyVersion: 3.0.0
